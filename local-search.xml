<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ubuntu配置conda环境下的tensorflow</title>
    <link href="/2024/10/29/ubuntu%E9%85%8D%E7%BD%AEconda%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%9C%80%E6%96%B0%E7%9A%84tensorflow/"/>
    <url>/2024/10/29/ubuntu%E9%85%8D%E7%BD%AEconda%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%9C%80%E6%96%B0%E7%9A%84tensorflow/</url>
    
    <content type="html"><![CDATA[<p>ubuntu20.04在conda虚拟环境下使用pip安装gpu版本的tensorflow</p><span id="more"></span><h1 id="1-GPU-软件要求"><a href="#1-GPU-软件要求" class="headerlink" title="1. GPU 软件要求"></a>1. GPU 软件要求</h1><p>参考：<a href="https://www.tensorflow.org/install/gpu?hl=zh-cn#software_requirements">GPU支持-软件要求</a><br><img src="/../img/ubuntu+conda+pip+tensorflow/1-1.png"></p><ul><li>第一个是显卡的驱动程序</li><li>第二个是一个工具包</li><li>第三个是附带在工具包的东西，下载了第二个，就不用管第三个</li><li>第四个是深度学习要用到的，点击第一个链接下载就行</li><li>第五个是可选的</li></ul><p>关于第二个工具包的安装，如果有问题，参考更详细的<a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#network-repo-installation-for-ubuntu">官方文档</a>。这里面还添加了环境变量。</p><h1 id="2-安装tensorflow"><a href="#2-安装tensorflow" class="headerlink" title="2. 安装tensorflow"></a>2. 安装tensorflow</h1><p>参考：<a href="https://www.tensorflow.org/install/pip?hl=zh-cn#conda">pip安装tensorflow</a><br>使用<code>conda</code>命令创建一个虚拟环境，然后使用<code>pip</code>安装tensorflow。至于为什么不用<code>conda</code>命令安装，是因为<code>conda</code>仓库的tensorflow版本有点低，不适合我的电脑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>pip install --upgrade tensorflow<br><span class="hljs-comment"># 验证</span><br>python -c <span class="hljs-string">&quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/ubuntu+conda+pip+tensorflow/2-1.png"><br>打印出向量即为成功</p><h1 id="3-问题"><a href="#3-问题" class="headerlink" title="3. 问题"></a>3. 问题</h1><p>python版本是决定能否安装最新版本的tensorflow的因素，由于我在做的实验需要python3.7版本，因此我的tensorflow版本最多为2.11版本，而2.11版本的tensorflow需要的cuda只能是11.2。因此我前面下载的cdua工具包是最新的12.6.2不行，只能卸载该版本，下载11.2版本。</p><p>第五个tensorrt要求python版本3.8以上，无法安装。</p><p>最后还是使用conda命令安装最简单,建议不要像我一样瞎折腾。</p>]]></content>
    
    
    <categories>
      
      <category>tensorflow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python pandas学习</title>
    <link href="/2024/10/23/python-pandas%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/23/python-pandas%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>python的pandas库的学习，参考<a href="https://www.runoob.com/pandas/pandas-tutorial.html">pandas菜鸟教程</a>，内容多是复制该教程。</p><span id="more"></span><h1 id="1-Pandas简介"><a href="#1-Pandas简介" class="headerlink" title="1.Pandas简介"></a>1.Pandas简介</h1><h2 id="1-1-pandas应用"><a href="#1-1-pandas应用" class="headerlink" title="1.1 pandas应用"></a>1.1 pandas应用</h2><p>Pandas 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据。<br>Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。<br>Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。</p><h2 id="1-2-数据结构"><a href="#1-2-数据结构" class="headerlink" title="1.2 数据结构"></a>1.2 数据结构</h2><p>Pandas 主要引入了两种新的数据结构：DataFrame 和 Series。</p><ul><li>Series： 类似于一维数组或列表，是由一组数据以及与之相关的数据标签（索引）构成。Series 可以看作是 DataFrame 中的一列，也可以是单独存在的一维数据结构。<br>  <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/1-1.png"></li><li>DataFrame： 类似于一个二维表格，它是 Pandas 中最重要的数据结构。DataFrame 可以看作是由多个 Series 按列排列构成的表格，它既有行索引也有列索引，因此可以方便地进行行列选择、过滤、合并等操作。<br>  <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/1-2.svg"></li><li>DataFrame 可视为由多个 Series 组成的数据结构：<br>  <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/1-3.png"><br>Pandas 提供了丰富的功能，包括：</li><li>数据清洗：处理缺失数据、重复数据等。</li><li>数据转换：改变数据的形状、结构或格式。</li><li>数据分析：进行统计分析、聚合、分组等。</li><li>数据可视化：通过整合 Matplotlib 和 Seaborn 等库，可以进行数据可视化。</li></ul><h2 id="1-3-pandas例子"><a href="#1-3-pandas例子" class="headerlink" title="1.3 pandas例子"></a>1.3 pandas例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>mydataset = &#123;<br>  <span class="hljs-string">&#x27;sites&#x27;</span>: [<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;Wiki&quot;</span>],<br>  <span class="hljs-string">&#x27;number&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><br>myvar = pd.DataFrame(mydataset)<br><br><span class="hljs-built_in">print</span>(myvar)<br></code></pre></td></tr></table></figure><p>输出结果如下：<br><img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/1-3.jpg"></p><h1 id="2-Pandas-Series"><a href="#2-Pandas-Series" class="headerlink" title="2. Pandas Series"></a>2. Pandas Series</h1><p>Series 是 Pandas 中的一种基本数据结构，类似于一维数组或列表，但具有标签（索引），使得数据在处理和分析时更具灵活性。</p><h2 id="2-1-创建Series"><a href="#2-1-创建Series" class="headerlink" title="2.1 创建Series"></a>2.1 创建Series</h2><p>可以使用 pd.Series() 构造函数创建一个 Series 对象，传递一个数据数组（可以是列表、NumPy 数组等）和一个可选的索引数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pandas.Series(data=<span class="hljs-literal">None</span>, index=<span class="hljs-literal">None</span>, dtype=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>, copy=<span class="hljs-literal">False</span>, fastpath=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>参数说明</p><ul><li>data：Series 的数据部分，可以是列表、数组、字典、标量值等。如果不提供此参数，则创建一个空的 Series。</li><li>index：Series 的索引部分，用于对数据进行标记。可以是列表、数组、索引对象等。如果不提供此参数，则创建一个默认的整数索引。</li><li>dtype：指定 Series 的数据类型。可以是 NumPy 的数据类型，例如 np.int64、np.float64 等。如果不提供此参数，则根据数据自动推断数据类型。</li><li>name：Series 的名称，用于标识 Series 对象。如果提供了此参数，则创建的 Series 对象将具有指定的名称。</li><li>copy：是否复制数据。默认为 False，表示不复制数据。如果设置为 True，则复制输入的数据。</li><li>fastpath：是否启用快速路径。默认为 False。启用快速路径可能会在某些情况下提高性能。</li></ul><ol><li><p>创建一个简单的 Series 实例：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>myvar = pd.Series(a)<br><br><span class="hljs-built_in">print</span>(myvar)<br></code></pre></td></tr></table></figure><p> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/2-1.jpg"></p></li><li><p>从上图可知，如果没有指定索引，索引值就从 0 开始，我们可以根据索引值读取数据：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>myvar = pd.Series(a)<br><br><span class="hljs-built_in">print</span>(myvar[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p> 输出结果如下</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure></li><li><p>我们可以指定索引值，如下实例：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>a = [<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;Wiki&quot;</span>]<br><br>myvar = pd.Series(a, index = [<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>])<br><br><span class="hljs-built_in">print</span>(myvar)<br></code></pre></td></tr></table></figure><p> 输出结果如下<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/2-2.jpg"></p></li><li><p>根据索引值读取数据:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>a = [<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;Wiki&quot;</span>]<br><br>myvar = pd.Series(a, index = [<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>])<br><br><span class="hljs-built_in">print</span>(myvar[<span class="hljs-string">&quot;y&quot;</span>])<br></code></pre></td></tr></table></figure><p> 输出结果如下</p> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Runoob</span><br></code></pre></td></tr></table></figure></li><li><p>我们也可以使用 key&#x2F;value 对象，类似字典来创建 Series：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>sites = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;Wiki&quot;</span>&#125;<br><br>myvar = pd.Series(sites)<br><br><span class="hljs-built_in">print</span>(myvar)<br></code></pre></td></tr></table></figure><p> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/2-3.jpg"></p></li><li><p>从上图可知，字典的 key 变成了索引值。<br> 如果我们只需要字典中的一部分数据，只需要指定需要数据的索引即可，如下实例：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>sites = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;Wiki&quot;</span>&#125;<br><br>myvar = pd.Series(sites, index = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><br><span class="hljs-built_in">print</span>(myvar)<br></code></pre></td></tr></table></figure><p> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/2-4.jpg"></p></li><li><p>设置 Series 名称参数：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>sites = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&quot;Wiki&quot;</span>&#125;<br><br>myvar = pd.Series(sites, index = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], name=<span class="hljs-string">&quot;RUNOOB-Series-TEST&quot;</span> )<br><br><span class="hljs-built_in">print</span>(myvar)<br></code></pre></td></tr></table></figure><p> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/2-5.jpg"></p></li></ol><h2 id="2-2-更多Series说明"><a href="#2-2-更多Series说明" class="headerlink" title="2.2 更多Series说明"></a>2.2 更多Series说明</h2><ol><li>使用列表、字典或数组创建一个默认索引的 Series。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用列表创建 Series</span><br>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><br><span class="hljs-comment"># 使用 NumPy 数组创建 Series</span><br>s = pd.Series(np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))<br><br><span class="hljs-comment"># 使用字典创建 Series</span><br>s = pd.Series(&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">4</span>&#125;)<br></code></pre></td></tr></table></figure></li><li>基本操作 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 指定索引创建 Series</span><br>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<br><br><span class="hljs-comment"># 获取值</span><br>value = s[<span class="hljs-number">2</span>]  <span class="hljs-comment"># 获取索引为2的值</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>])  <span class="hljs-comment"># 返回索引标签 &#x27;a&#x27; 对应的元素</span><br><br><span class="hljs-comment"># 获取多个值</span><br>subset = s[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]  <span class="hljs-comment"># 获取索引为1到3的值</span><br><br><span class="hljs-comment"># 使用自定义索引</span><br>value = s[<span class="hljs-string">&#x27;b&#x27;</span>]  <span class="hljs-comment"># 获取索引为&#x27;b&#x27;的值</span><br><br><span class="hljs-comment"># 索引和值的对应关系</span><br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> s.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Index: <span class="hljs-subst">&#123;index&#125;</span>, Value: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># 使用切片语法来访问 Series 的一部分</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>])  <span class="hljs-comment"># 返回索引标签 &#x27;a&#x27; 到 &#x27;c&#x27; 之间的元素</span><br><span class="hljs-built_in">print</span>(s[:<span class="hljs-number">3</span>])  <span class="hljs-comment"># 返回前三个元素</span><br><br><span class="hljs-comment"># 为特定的索引标签赋值</span><br>s[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">10</span>  <span class="hljs-comment"># 将索引标签 &#x27;a&#x27; 对应的元素修改为 10</span><br><br><span class="hljs-comment"># 通过赋值给新的索引标签来添加元素</span><br>s[<span class="hljs-string">&#x27;e&#x27;</span>] = <span class="hljs-number">5</span>  <span class="hljs-comment"># 在 Series 中添加一个新的元素，索引标签为 &#x27;e&#x27;</span><br><br><span class="hljs-comment"># 使用 del 删除指定索引标签的元素。</span><br><span class="hljs-keyword">del</span> s[<span class="hljs-string">&#x27;a&#x27;</span>]  <span class="hljs-comment"># 删除索引标签 &#x27;a&#x27; 对应的元素</span><br><br><span class="hljs-comment"># 使用 drop 方法删除一个或多个索引标签，并返回一个新的 Series。</span><br>s_dropped = s.drop([<span class="hljs-string">&#x27;b&#x27;</span>])  <span class="hljs-comment"># 返回一个删除了索引标签 &#x27;b&#x27; 的新 Series</span><br></code></pre></td></tr></table></figure></li><li>基本运算 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 算术运算</span><br>result = series * <span class="hljs-number">2</span>  <span class="hljs-comment"># 所有元素乘以2</span><br><br><span class="hljs-comment"># 过滤</span><br>filtered_series = series[series &gt; <span class="hljs-number">2</span>]  <span class="hljs-comment"># 选择大于2的元素</span><br><br><span class="hljs-comment"># 数学函数</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>result = np.sqrt(series)  <span class="hljs-comment"># 对每个元素取平方根</span><br></code></pre></td></tr></table></figure></li><li>计算统计数据：使用 Series 的方法来计算描述性统计。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">sum</span>())  <span class="hljs-comment"># 输出 Series 的总和</span><br><span class="hljs-built_in">print</span>(s.mean())  <span class="hljs-comment"># 输出 Series 的平均值</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">max</span>())  <span class="hljs-comment"># 输出 Series 的最大值</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">min</span>())  <span class="hljs-comment"># 输出 Series 的最小值</span><br><span class="hljs-built_in">print</span>(s.std())  <span class="hljs-comment"># 输出 Series 的标准差</span><br></code></pre></td></tr></table></figure></li><li>属性和方法： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取索引</span><br>index = s.index<br><br><span class="hljs-comment"># 获取值数组</span><br>values = s.values<br><br><span class="hljs-comment"># 获取描述统计信息</span><br>stats = s.describe()<br><br><span class="hljs-comment"># 获取最大值和最小值的索引</span><br>max_index = s.idxmax()<br>min_index = s.idxmin()<br><br><span class="hljs-comment"># 其他属性和方法</span><br><span class="hljs-built_in">print</span>(s.dtype)   <span class="hljs-comment"># 数据类型</span><br><span class="hljs-built_in">print</span>(s.shape)   <span class="hljs-comment"># 形状</span><br><span class="hljs-built_in">print</span>(s.size)    <span class="hljs-comment"># 元素个数</span><br><span class="hljs-built_in">print</span>(s.head())  <span class="hljs-comment"># 前几个元素，默认是前 5 个</span><br><span class="hljs-built_in">print</span>(s.tail())  <span class="hljs-comment"># 后几个元素，默认是后 5 个</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">sum</span>())   <span class="hljs-comment"># 求和</span><br><span class="hljs-built_in">print</span>(s.mean())  <span class="hljs-comment"># 平均值</span><br><span class="hljs-built_in">print</span>(s.std())   <span class="hljs-comment"># 标准差</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">min</span>())   <span class="hljs-comment"># 最小值</span><br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">max</span>())   <span class="hljs-comment"># 最大值</span><br></code></pre></td></tr></table></figure></li><li>使用布尔表达式：根据条件过滤 Series。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s &gt; <span class="hljs-number">2</span>)  <span class="hljs-comment"># 返回一个布尔 Series，其中的元素值大于 2</span><br></code></pre></td></tr></table></figure></li><li>查看数据类型：使用 dtype 属性查看 Series 的数据类型。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s.dtype)  <span class="hljs-comment"># 输出 Series 的数据类型</span><br></code></pre></td></tr></table></figure></li><li>转换数据类型：使用 astype 方法将 Series 转换为另一种数据类型。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s = s.astype(<span class="hljs-string">&#x27;float64&#x27;</span>)  <span class="hljs-comment"># 将 Series 中的所有元素转换为 float64 类型</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="3-Pandas-DataFrame"><a href="#3-Pandas-DataFrame" class="headerlink" title="3. Pandas DataFrame"></a>3. Pandas DataFrame</h1><p>DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）<br><img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/3-1.png"></p><h2 id="3-1-创建DataFrame"><a href="#3-1-创建DataFrame" class="headerlink" title="3.1 创建DataFrame"></a>3.1 创建DataFrame</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pandas.DataFrame(data=<span class="hljs-literal">None</span>, index=<span class="hljs-literal">None</span>, columns=<span class="hljs-literal">None</span>, dtype=<span class="hljs-literal">None</span>, copy=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>参数说明</p><ul><li>data：DataFrame 的数据部分，可以是字典、二维数组、Series、DataFrame 或其他可转换为 DataFrame 的对象。如果不提供此参数，则创建一个空的 DataFrame。</li><li>index：DataFrame 的行索引，用于标识每行数据。可以是列表、数组、索引对象等。如果不提供此参数，则创建一个默认的整数索引。</li><li>columns：DataFrame 的列索引，用于标识每列数据。可以是列表、数组、索引对象等。如果不提供此参数，则创建一个默认的整数索引。</li><li>dtype：指定 DataFrame 的数据类型。可以是 NumPy 的数据类型，例如 np.int64、np.float64 等。如果不提供此参数，则根据数据自动推断数据类型。</li><li>copy：是否复制数据。默认为 False，表示不复制数据。如果设置为 True，则复制输入的数据。</li></ul><ol><li>使用列表创建 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data = [[<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-number">10</span>], [<span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-number">12</span>], [<span class="hljs-string">&#x27;Wiki&#x27;</span>, <span class="hljs-number">13</span>]]<br><br><span class="hljs-comment"># 创建DataFrame</span><br>df = pd.DataFrame(data, columns=[<span class="hljs-string">&#x27;Site&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>])<br><br><span class="hljs-comment"># 使用astype方法设置每列的数据类型</span><br>df[<span class="hljs-string">&#x27;Site&#x27;</span>] = df[<span class="hljs-string">&#x27;Site&#x27;</span>].astype(<span class="hljs-built_in">str</span>)<br>df[<span class="hljs-string">&#x27;Age&#x27;</span>] = df[<span class="hljs-string">&#x27;Age&#x27;</span>].astype(<span class="hljs-built_in">float</span>)<br><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/3-2.jpg"></li><li>使用字典创建 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data = &#123;<span class="hljs-string">&#x27;Site&#x27;</span>:[<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Wiki&#x27;</span>], <span class="hljs-string">&#x27;Age&#x27;</span>:[<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]&#125;<br><br>df = pd.DataFrame(data)<br><br><span class="hljs-built_in">print</span> (df)<br></code></pre></td></tr></table></figure></li><li>使用ndarrays创建 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 创建一个包含网站和年龄的二维ndarray</span><br>ndarray_data = np.array([<br>    [<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-number">10</span>],<br>    [<span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-number">12</span>],<br>    [<span class="hljs-string">&#x27;Wiki&#x27;</span>, <span class="hljs-number">13</span>]<br>])<br><br><span class="hljs-comment"># 使用DataFrame构造函数创建数据帧</span><br>df = pd.DataFrame(ndarray_data, columns=[<span class="hljs-string">&#x27;Site&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>])<br><br><span class="hljs-comment"># 打印数据帧</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure></li><li>还可以使用字典（key&#x2F;value），其中字典的 key 为列名: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data = [&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">20</span>&#125;]<br><br>df = pd.DataFrame(data)<br><br><span class="hljs-built_in">print</span> (df)<br></code></pre></td></tr></table></figure> 输出结果如下 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">   <span class="hljs-attribute">a</span>   b     c<br><span class="hljs-attribute">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   NaN<br><span class="hljs-attribute">1</span>  <span class="hljs-number">5</span>  <span class="hljs-number">10</span>  <span class="hljs-number">20</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure> 没有对应的部分数据为 NaN。</li><li>Pandas 可以使用 loc 属性返回指定行的数据，如果没有设置索引，第一行索引为 0，第二行索引为 1，以此类推：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data = &#123;<br>  <span class="hljs-string">&quot;calories&quot;</span>: [<span class="hljs-number">420</span>, <span class="hljs-number">380</span>, <span class="hljs-number">390</span>],<br>  <span class="hljs-string">&quot;duration&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>]<br>&#125;<br><br><span class="hljs-comment"># 数据载入到 DataFrame 对象</span><br>df = pd.DataFrame(data)<br><br><span class="hljs-comment"># 返回第一行</span><br><span class="hljs-built_in">print</span>(df.loc[<span class="hljs-number">0</span>])<br><span class="hljs-comment"># 返回第二行</span><br><span class="hljs-built_in">print</span>(df.loc[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>输出结果如下<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">calories</span>    <span class="hljs-number">420</span><br><span class="hljs-attribute">duration</span>     <span class="hljs-number">50</span><br><span class="hljs-attribute">Name</span>: <span class="hljs-number">0</span>, dtype: int64<br><span class="hljs-attribute">calories</span>    <span class="hljs-number">380</span><br><span class="hljs-attribute">duration</span>     <span class="hljs-number">40</span><br><span class="hljs-attribute">Name</span>: <span class="hljs-number">1</span>, dtype: int64<br></code></pre></td></tr></table></figure>注意：返回结果其实就是一个 Pandas Series 数据。</li><li>也可以返回多行数据，使用 [[ … ]] 格式，… 为各行的索引，以逗号隔开： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data = &#123;<br>  <span class="hljs-string">&quot;calories&quot;</span>: [<span class="hljs-number">420</span>, <span class="hljs-number">380</span>, <span class="hljs-number">390</span>],<br>  <span class="hljs-string">&quot;duration&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>]<br>&#125;<br><br><span class="hljs-comment"># 数据载入到 DataFrame 对象</span><br>df = pd.DataFrame(data)<br><br><span class="hljs-comment"># 返回第一行和第二行</span><br><span class="hljs-built_in">print</span>(df.loc[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br></code></pre></td></tr></table></figure> 输出结果如下： <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">       <span class="hljs-attribute">calories</span>  duration<br><span class="hljs-attribute">0</span>       <span class="hljs-number">420</span>        <span class="hljs-number">50</span><br><span class="hljs-attribute">1</span>       <span class="hljs-number">380</span>        <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure> 注意：返回结果其实就是一个 Pandas DataFrame 数据</li><li>我们可以指定索引值，如下实例： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data = &#123;<br>  <span class="hljs-string">&quot;calories&quot;</span>: [<span class="hljs-number">420</span>, <span class="hljs-number">380</span>, <span class="hljs-number">390</span>],<br>  <span class="hljs-string">&quot;duration&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>]<br>&#125;<br><br>df = pd.DataFrame(data, index = [<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>, <span class="hljs-string">&quot;day3&quot;</span>])<br><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 输出结果为 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache">      <span class="hljs-attribute">calories</span>  duration<br><span class="hljs-attribute">day1</span>       <span class="hljs-number">420</span>        <span class="hljs-number">50</span><br><span class="hljs-attribute">day2</span>       <span class="hljs-number">380</span>        <span class="hljs-number">40</span><br><span class="hljs-attribute">day3</span>       <span class="hljs-number">390</span>        <span class="hljs-number">45</span><br></code></pre></td></tr></table></figure></li><li>Pandas 可以使用 loc 属性返回指定索引对应到某一行： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data = &#123;<br>  <span class="hljs-string">&quot;calories&quot;</span>: [<span class="hljs-number">420</span>, <span class="hljs-number">380</span>, <span class="hljs-number">390</span>],<br>  <span class="hljs-string">&quot;duration&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>]<br>&#125;<br><br>df = pd.DataFrame(data, index = [<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>, <span class="hljs-string">&quot;day3&quot;</span>])<br><br><span class="hljs-comment"># 指定索引  </span><br><span class="hljs-built_in">print</span>(df.loc[<span class="hljs-string">&quot;day2&quot;</span>])<br></code></pre></td></tr></table></figure> 输出结果为 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">calories</span>    <span class="hljs-number">380</span><br><span class="hljs-attribute">duration</span>     <span class="hljs-number">40</span><br><span class="hljs-attribute">Name</span>: day2, dtype: int64<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-2-更多DataFrame说明"><a href="#3-2-更多DataFrame说明" class="headerlink" title="3.2 更多DataFrame说明"></a>3.2 更多DataFrame说明</h2><h3 id="3-2-1-创建DataFrame"><a href="#3-2-1-创建DataFrame" class="headerlink" title="3.2.1 创建DataFrame"></a>3.2.1 创建DataFrame</h3><ol><li>从字典创建：字典的键成为列名，值成为列数据。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 通过字典创建 DataFrame</span><br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Column1&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-string">&#x27;Column2&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]&#125;)<br></code></pre></td></tr></table></figure></li><li>从列表的列表创建：外层列表代表行，内层列表代表列。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]],<br>                  columns=[<span class="hljs-string">&#x27;Column1&#x27;</span>, <span class="hljs-string">&#x27;Column2&#x27;</span>, <span class="hljs-string">&#x27;Column3&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li>从 NumPy 数组创建：提供一个二维 NumPy 数组。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 通过 NumPy 数组创建 DataFrame</span><br>df = pd.DataFrame(np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]))<br></code></pre></td></tr></table></figure></li><li>从 Series 创建 DataFrame：通过 pd.Series() 创建。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从 Series 创建 DataFrame</span><br>s1 = pd.Series([<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>])<br>s2 = pd.Series([<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>])<br>s3 = pd.Series([<span class="hljs-string">&#x27;New York&#x27;</span>, <span class="hljs-string">&#x27;Los Angeles&#x27;</span>, <span class="hljs-string">&#x27;Chicago&#x27;</span>])<br>df = pd.DataFrame(&#123;<span class="hljs-string">&#x27;Name&#x27;</span>: s1, <span class="hljs-string">&#x27;Age&#x27;</span>: s2, <span class="hljs-string">&#x27;City&#x27;</span>: s3&#125;)<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-2-DataFrame-的属性和方法"><a href="#3-2-2-DataFrame-的属性和方法" class="headerlink" title="3.2.2 DataFrame 的属性和方法"></a>3.2.2 DataFrame 的属性和方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DataFrame 的属性和方法</span><br><span class="hljs-built_in">print</span>(df.shape)     <span class="hljs-comment"># 形状</span><br><span class="hljs-built_in">print</span>(df.columns)   <span class="hljs-comment"># 列名</span><br><span class="hljs-built_in">print</span>(df.index)     <span class="hljs-comment"># 索引</span><br><span class="hljs-built_in">print</span>(df.head())    <span class="hljs-comment"># 前几行数据，默认是前 5 行</span><br><span class="hljs-built_in">print</span>(df.tail())    <span class="hljs-comment"># 后几行数据，默认是后 5 行</span><br><span class="hljs-built_in">print</span>(df.info())    <span class="hljs-comment"># 数据信息</span><br><span class="hljs-built_in">print</span>(df.describe())<span class="hljs-comment"># 描述统计信息</span><br><span class="hljs-built_in">print</span>(df.mean())    <span class="hljs-comment"># 求平均值</span><br><span class="hljs-built_in">print</span>(df.<span class="hljs-built_in">sum</span>())     <span class="hljs-comment"># 求和</span><br></code></pre></td></tr></table></figure><h3 id="3-2-3-访问-DataFrame-元素"><a href="#3-2-3-访问-DataFrame-元素" class="headerlink" title="3.2.3 访问 DataFrame 元素"></a>3.2.3 访问 DataFrame 元素</h3><p>访问列：使用列名作为属性或通过 .loc[]、.iloc[] 访问，也可以使用标签或位置索引。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过列名访问</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;Column1&#x27;</span>])<br><br><span class="hljs-comment"># 通过属性访问</span><br><span class="hljs-built_in">print</span>(df.Name)     <br>   <br><span class="hljs-comment"># 通过 .loc[] 访问</span><br><span class="hljs-built_in">print</span>(df.loc[:, <span class="hljs-string">&#x27;Column1&#x27;</span>])<br><br><span class="hljs-comment"># 通过 .iloc[] 访问</span><br><span class="hljs-built_in">print</span>(df.iloc[:, <span class="hljs-number">0</span>])  <span class="hljs-comment"># 假设 &#x27;Column1&#x27; 是第一列</span><br><br><span class="hljs-comment"># 访问单个元素</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-string">&#x27;Name&#x27;</span>][<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>访问行：使用行的标签和 .loc[] 访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过行标签访问</span><br><span class="hljs-built_in">print</span>(df.loc[<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Column1&#x27;</span>])<br></code></pre></td></tr></table></figure><h3 id="3-2-4-修改DataFrame"><a href="#3-2-4-修改DataFrame" class="headerlink" title="3.2.4 修改DataFrame"></a>3.2.4 修改DataFrame</h3><ol><li><p>修改列数据：直接对列赋值</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;Column1&#x27;</span>] = [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]<br></code></pre></td></tr></table></figure></li><li><p>添加新列：给新列赋值。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;NewColumn&#x27;</span>] = [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>]<br></code></pre></td></tr></table></figure></li><li><p>添加新行：使用 loc、append 或 concat 方法。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 loc 为特定索引添加新行</span><br>df.loc[<span class="hljs-number">3</span>] = [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>]<br><br><span class="hljs-comment"># 使用 append 添加新行到末尾</span><br>new_row = &#123;<span class="hljs-string">&#x27;Column1&#x27;</span>: <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;Column2&#x27;</span>: <span class="hljs-number">14</span>, <span class="hljs-string">&#x27;NewColumn&#x27;</span>: <span class="hljs-number">16</span>&#125;<br>df = df.append(new_row, ignore_index=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p> <strong>注意</strong>：append() 方法在 pandas 版本 1.4.0 中已经被标记为弃用，并将在未来的版本中被移除，官方推荐使用 concat() 作为替代方法来进行数据的合并操作。</p></li><li><p>concat() 方法用于合并两个或多个 DataFrame，当你想要添加一行到另一个 DataFrame 时，可以将新行作为一个新的 DataFrame，然后使用 concat()：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用concat添加新行</span><br>new_row = pd.DataFrame([[<span class="hljs-number">4</span>, <span class="hljs-number">7</span>]], columns=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>])  <span class="hljs-comment"># 创建一个只包含新行的DataFrame</span><br>df = pd.concat([df, new_row], ignore_index=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 将新行添加到原始DataFrame</span><br><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-5-删除-DataFrame-元素"><a href="#3-2-5-删除-DataFrame-元素" class="headerlink" title="3.2.5 删除 DataFrame 元素"></a>3.2.5 删除 DataFrame 元素</h3><ol><li>删除列：使用drop方法 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_dropped = df.drop(<span class="hljs-string">&#x27;Column1&#x27;</span>, axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li><li>删除行：同样使用 drop 方法。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_dropped = df.drop(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 删除索引为 0 的行</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-6-DataFrame-的统计分析"><a href="#3-2-6-DataFrame-的统计分析" class="headerlink" title="3.2.6 DataFrame 的统计分析"></a>3.2.6 DataFrame 的统计分析</h3><ol><li>描述性统计：使用 .describe() 查看数值列的统计摘要。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.describe()<br></code></pre></td></tr></table></figure></li><li>计算统计数据：使用聚合函数如 .sum()、.mean()、.max() 等。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;Column1&#x27;</span>].<span class="hljs-built_in">sum</span>()<br>df.mean()<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-7-DataFrame-的索引操作"><a href="#3-2-7-DataFrame-的索引操作" class="headerlink" title="3.2.7 DataFrame 的索引操作"></a>3.2.7 DataFrame 的索引操作</h3><ol><li>重置索引：使用 .reset_index()。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_reset = df.reset_index(drop=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></li><li>设置索引：使用 .set_index()。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df_set = df.set_index(<span class="hljs-string">&#x27;Column1&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>使用布尔表达式：根据条件过滤 DataFrame。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[df[<span class="hljs-string">&#x27;Column1&#x27;</span>] &gt; <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-8-DataFrame-的数据类型"><a href="#3-2-8-DataFrame-的数据类型" class="headerlink" title="3.2.8 DataFrame 的数据类型"></a>3.2.8 DataFrame 的数据类型</h3><ol><li>查看数据类型：使用 dtypes 属性。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.dtypes<br></code></pre></td></tr></table></figure></li><li>转换数据类型：使用 astype 方法。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;Column1&#x27;</span>] = df[<span class="hljs-string">&#x27;Column1&#x27;</span>].astype(<span class="hljs-string">&#x27;float64&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-9-DataFrame-的合并与分割"><a href="#3-2-9-DataFrame-的合并与分割" class="headerlink" title="3.2.9 DataFrame 的合并与分割"></a>3.2.9 DataFrame 的合并与分割</h3><ol><li>合并：使用 concat 或 merge 方法。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 纵向合并</span><br>pd.concat([df1, df2], ignore_index=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 横向合并</span><br>pd.merge(df1, df2, on=<span class="hljs-string">&#x27;Column1&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>分割：使用 pivot、melt 或自定义函数。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 长格式转宽格式</span><br>df_pivot = df.pivot(index=<span class="hljs-string">&#x27;Column1&#x27;</span>, columns=<span class="hljs-string">&#x27;Column2&#x27;</span>, values=<span class="hljs-string">&#x27;Column3&#x27;</span>)<br><br><span class="hljs-comment"># 宽格式转长格式</span><br>df_melt = df.melt(id_vars=<span class="hljs-string">&#x27;Column1&#x27;</span>, value_vars=[<span class="hljs-string">&#x27;Column2&#x27;</span>, <span class="hljs-string">&#x27;Column3&#x27;</span>])<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-10-索引和切片"><a href="#3-2-10-索引和切片" class="headerlink" title="3.2.10 索引和切片"></a>3.2.10 索引和切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 索引和切片</span><br><span class="hljs-built_in">print</span>(df[[<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>]])  <span class="hljs-comment"># 提取多列</span><br><span class="hljs-built_in">print</span>(df[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])               <span class="hljs-comment"># 切片行</span><br><span class="hljs-built_in">print</span>(df.loc[:, <span class="hljs-string">&#x27;Name&#x27;</span>])     <span class="hljs-comment"># 提取单列</span><br><span class="hljs-built_in">print</span>(df.loc[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>, [<span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>]])  <span class="hljs-comment"># 标签索引提取指定行列</span><br><span class="hljs-built_in">print</span>(df.iloc[:, <span class="hljs-number">1</span>:])        <span class="hljs-comment"># 位置索引提取指定列</span><br></code></pre></td></tr></table></figure><h1 id="4-Pandas-CSV文件"><a href="#4-Pandas-CSV文件" class="headerlink" title="4. Pandas CSV文件"></a>4. Pandas CSV文件</h1><h2 id="4-1-打开CSV文件和存储CSV文件"><a href="#4-1-打开CSV文件和存储CSV文件" class="headerlink" title="4.1 打开CSV文件和存储CSV文件"></a>4.1 打开CSV文件和存储CSV文件</h2><ol><li>Pandas 可以很方便的处理 CSV 文件，本文以<a href="https://static.jyshare.com/download/nba.csv">nba.csv</a>为例 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;nba.csv&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure></li><li>to_string() 用于返回 DataFrame 类型的数据，如果不使用该函数，则输出结果为数据的前面 5 行和末尾 5 行，中间部分以 … 代替。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;nba.csv&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 输出结果为：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/4-1.png"></li><li>我们也可以使用 to_csv() 方法将 DataFrame 存储为 csv 文件： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd <br><br><span class="hljs-comment"># 三个字段 name, site, age</span><br>nme = [<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Runoob&quot;</span>, <span class="hljs-string">&quot;Taobao&quot;</span>, <span class="hljs-string">&quot;Wiki&quot;</span>]<br>st = [<span class="hljs-string">&quot;www.google.com&quot;</span>, <span class="hljs-string">&quot;www.runoob.com&quot;</span>, <span class="hljs-string">&quot;www.taobao.com&quot;</span>, <span class="hljs-string">&quot;www.wikipedia.org&quot;</span>]<br>ag = [<span class="hljs-number">90</span>, <span class="hljs-number">40</span>, <span class="hljs-number">80</span>, <span class="hljs-number">98</span>]<br><br><span class="hljs-comment"># 字典</span><br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: nme, <span class="hljs-string">&#x27;site&#x27;</span>: st, <span class="hljs-string">&#x27;age&#x27;</span>: ag&#125; <br><br>df = pd.DataFrame(<span class="hljs-built_in">dict</span>)<br><br><span class="hljs-comment"># 保存 dataframe</span><br>df.to_csv(<span class="hljs-string">&#x27;site.csv&#x27;</span>)<br></code></pre></td></tr></table></figure> 执行成功后，我们打开 site.csv 文件，显示结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/4-2.png"></li></ol><h2 id="4-2-数据处理"><a href="#4-2-数据处理" class="headerlink" title="4.2 数据处理"></a>4.2 数据处理</h2><ol><li>head()<br> <code>head( n )</code> 方法用于读取前面的 n 行，如果不填参数 n ，默认返回 5 行。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;nba.csv&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.head())<br></code></pre></td></tr></table></figure> 输出结果为：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/4-3.png"></li><li>tail()<br> <code>tail( n )</code> 方法用于读取尾部的 n 行，如果不填参数 n ，默认返回 5 行，空行各个字段的值返回 NaN。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;nba.csv&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.tail())<br></code></pre></td></tr></table></figure> 输出结果为：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/4-4.png"></li><li>info()<br> info() 方法返回表格的一些基本信息： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;nba.csv&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.info())<br></code></pre></td></tr></table></figure> 输出结果为：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/4-5.png"></li></ol><h1 id="5-Pandas-JSON"><a href="#5-Pandas-JSON" class="headerlink" title="5. Pandas JSON"></a>5. Pandas JSON</h1><h2 id="5-1-读取和转换"><a href="#5-1-读取和转换" class="headerlink" title="5.1 读取和转换"></a>5.1 读取和转换</h2><p>Pandas 可以很方便的处理 JSON 数据，本文以 <a href="https://static.jyshare.com/download/sites.json">sites.json</a> 为例，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>   <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A001&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;菜鸟教程&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;www.runoob.com&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;likes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">61</span><br>   <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A002&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Google&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;www.google.com&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;likes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">124</span><br>   <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A003&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;淘宝&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;www.taobao.com&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;likes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">45</span><br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><ol><li>读取JSON文件： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_json(<span class="hljs-string">&#x27;sites.json&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-1.png"></li><li><code>to_string()</code>用于返回 DataFrame 类型的数据，我们也可以直接处理 JSON 字符串。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data =[<br>    &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;A001&quot;</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;菜鸟教程&quot;</span>,<br>      <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;www.runoob.com&quot;</span>,<br>      <span class="hljs-string">&quot;likes&quot;</span>: <span class="hljs-number">61</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;A002&quot;</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Google&quot;</span>,<br>      <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;www.google.com&quot;</span>,<br>      <span class="hljs-string">&quot;likes&quot;</span>: <span class="hljs-number">124</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;A003&quot;</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;淘宝&quot;</span>,<br>      <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;www.taobao.com&quot;</span>,<br>      <span class="hljs-string">&quot;likes&quot;</span>: <span class="hljs-number">45</span><br>    &#125;<br>]<br>df = pd.DataFrame(data)<br><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 输出结果同上。</li><li>JSON 对象与 Python 字典具有相同的格式，所以我们可以直接将 Python 字典转化为 DataFrame 数据： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 字典格式的JSON                                                                                              </span><br>s = &#123;<br>    <span class="hljs-string">&quot;col1&quot;</span>:&#123;<span class="hljs-string">&quot;row1&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;row2&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;row3&quot;</span>:<span class="hljs-number">3</span>&#125;,<br>    <span class="hljs-string">&quot;col2&quot;</span>:&#123;<span class="hljs-string">&quot;row1&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;row2&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;row3&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-comment"># 读取 JSON 转为 DataFrame                                                                                           </span><br>df = pd.DataFrame(s)<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-2.png"></li><li>从 URL 中读取 JSON 数据： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>URL = <span class="hljs-string">&#x27;https://static.jyshare.com/download/sites.json&#x27;</span><br>df = pd.read_json(URL)<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-3.png"></li></ol><h2 id="5-2-内嵌的-JSON-数据"><a href="#5-2-内嵌的-JSON-数据" class="headerlink" title="5.2 内嵌的 JSON 数据"></a>5.2 内嵌的 JSON 数据</h2><ol><li>假设有一组内嵌的 JSON 数据文件 nested_list.json  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;school_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ABC primary school&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;class&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Year 1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;students&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A001&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">66</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">61</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A002&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;James&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">89</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">76</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">51</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A003&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jenny&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">79</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">90</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">78</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> 使用以下代码格式化完整内容： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_json(<span class="hljs-string">&#x27;nested_list.json&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 以上实例输出结果为：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-4.png"></li><li>这时我们就需要使用到<code>json_normalize()</code>方法将内嵌的数据完整的解析出来： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 使用 Python JSON 模块载入数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;nested_list.json&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = json.loads(f.read())<br><br><span class="hljs-comment"># 展平数据</span><br>df_nested_list = pd.json_normalize(data, record_path =[<span class="hljs-string">&#x27;students&#x27;</span>])<br><span class="hljs-built_in">print</span>(df_nested_list)<br></code></pre></td></tr></table></figure> 输出结果如下：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-5.png"><br> <code>data = json.loads(f.read())</code>使用 Python JSON 模块载入数据。<br> <code>json_normalize()</code>使用了参数 record_path 并设置为 [‘students’] 用于展开内嵌的 JSON 数据 students。<br> 显示结果还没有包含 school_name 和 class 元素，如果需要展示出来可以使用 meta 参数来显示这些元数据： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 使用 Python JSON 模块载入数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;nested_list.json&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = json.loads(f.read())<br><br><span class="hljs-comment"># 展平数据</span><br>df_nested_list = pd.json_normalize(<br>    data, <br>    record_path =[<span class="hljs-string">&#x27;students&#x27;</span>], <br>    meta=[<span class="hljs-string">&#x27;school_name&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>]<br>)<br><span class="hljs-built_in">print</span>(df_nested_list)<br></code></pre></td></tr></table></figure> 以上实例输出结果为：<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-6.png"></li><li>接下来，让我们尝试读取更复杂的 JSON 数据，该数据嵌套了列表和字典，数据文件 nested_mix.json 如下： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;school_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local primary school&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;class&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Year 1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;president&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Kasich&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ABC road, London, UK&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;contacts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin@e.com&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456789&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;students&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A001&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">66</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">61</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A002&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;James&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">89</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">76</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">51</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A003&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jenny&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">79</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">90</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">78</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> nested_mix.json 文件转换为 DataFrame： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 使用 Python JSON 模块载入数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;nested_mix.json&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = json.loads(f.read())<br><br>df = pd.json_normalize(<br>    data, <br>    record_path =[<span class="hljs-string">&#x27;students&#x27;</span>], <br>    meta=[<br>        <span class="hljs-string">&#x27;class&#x27;</span>,<br>        [<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;president&#x27;</span>], <br>        [<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;contacts&#x27;</span>, <span class="hljs-string">&#x27;tel&#x27;</span>]<br>    ]<br>)<br><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure> 输出结果如下<br> <img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-7.png"></li></ol><h2 id="5-3-读取内嵌数据中的一组数据"><a href="#5-3-读取内嵌数据中的一组数据" class="headerlink" title="5.3 读取内嵌数据中的一组数据"></a>5.3 读取内嵌数据中的一组数据</h2><p>以下是实例文件 nested_deep.json，我们只读取内嵌中的 math 字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;school_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local primary school&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;class&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Year 1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;students&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A001&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tom&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">66</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">61</span><br>        <span class="hljs-punctuation">&#125;</span><br>  <br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A002&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;James&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">89</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">76</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">51</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A003&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jenny&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;math&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">79</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;physics&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">90</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;chemistry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">78</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里我们需要使用到 glom 模块来处理数据套嵌，glom 模块允许我们使用 . 来访问内嵌对象的属性。<br>第一次使用我们需要安装 glom：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install glom<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> glom <span class="hljs-keyword">import</span> glom<br><br>df = pd.read_json(<span class="hljs-string">&#x27;nested_deep.json&#x27;</span>)<br><br>data = df[<span class="hljs-string">&#x27;students&#x27;</span>].apply(<span class="hljs-keyword">lambda</span> row: glom(row, <span class="hljs-string">&#x27;grade.math&#x27;</span>))<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><p>输出结果如下：<br><img src="/../img/python+pandas%E5%AD%A6%E4%B9%A0/5-8.png"></p>]]></content>
    
    
    <categories>
      
      <category>pandas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu anaconda安装和使用</title>
    <link href="/2024/10/22/ubuntu-anaconda%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/10/22/ubuntu-anaconda%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-Anaconda安装"><a href="#1-Anaconda安装" class="headerlink" title="1. Anaconda安装"></a>1. Anaconda安装</h1><ol><li>下载<br> 进入<a href="https://www.anaconda.com/download/">官网</a>，填入自己的邮箱进行注册，然后在邮箱找到对应的邮件，点击<a href="https://www.anaconda.com/download/success">下载链接</a>,下载<code>Linux</code>下对应的安装文件</li><li>安装<br> 下载好之后给该sh安装文件执行权限，然后执行安装文件<br> <img src="/../img/ubuntu%E4%B8%8BAnaconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/1-1.png"></li><li>初始化<br> <img src="/../img/ubuntu%E4%B8%8BAnaconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/1-2.png"><br> 然后重新打开一个terminal，就可以直接使用conda命令了。<br> <img src="/../img/ubuntu%E4%B8%8BAnaconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/1-3.png"><br> 以后每次都会启动terminal时都会激活conda，</li><li>后续<br> 要是想不激活conda就使用 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda config --<span class="hljs-built_in">set</span> auto_activate_base <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure> 后面想再次进行<code>base</code>环境，可以使用 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate base<br></code></pre></td></tr></table></figure> <img src="/../img/ubuntu%E4%B8%8BAnaconda%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/1-4.png"></li></ol><h1 id="2-Anaconda配置"><a href="#2-Anaconda配置" class="headerlink" title="2. Anaconda配置"></a>2. Anaconda配置</h1><ol><li>换源<br> <a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华镜像源</a></li></ol><h1 id="3-Anaconda使用"><a href="#3-Anaconda使用" class="headerlink" title="3. Anaconda使用"></a>3. Anaconda使用</h1><h2 id="3-1-创建和管理环境"><a href="#3-1-创建和管理环境" class="headerlink" title="3.1 创建和管理环境"></a>3.1 创建和管理环境</h2><ol><li>创建环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n myenv python=3.8<br></code></pre></td></tr></table></figure> <code>myenv</code>是环境名称，版本是3.8.</li><li>激活环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate myenv<br></code></pre></td></tr></table></figure></li><li>停用环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda deactivate<br></code></pre></td></tr></table></figure></li><li>删除环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda remove --name myenv --all<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-2-安装和更新包"><a href="#3-2-安装和更新包" class="headerlink" title="3.2 安装和更新包"></a>3.2 安装和更新包</h2><ol><li>安装包 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install package_name<br></code></pre></td></tr></table></figure></li><li>更新包 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda update package_name<br></code></pre></td></tr></table></figure></li><li>查看安装的包 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda list<br></code></pre></td></tr></table></figure></li><li>搜索包 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda search package_name<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-3-其他命令"><a href="#3-3-其他命令" class="headerlink" title="3.3 其他命令"></a>3.3 其他命令</h2><ol><li>查看所有环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure></li><li>导出环境文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> <span class="hljs-built_in">export</span> &gt; environment.yml<br></code></pre></td></tr></table></figure></li><li>从环境文件创建环境 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> create -f environment.yml<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>anaconda</category>
      
    </categories>
    
    
    <tags>
      
      <tag>anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ryu智能路由学习</title>
    <link href="/2024/10/22/ryu%E6%99%BA%E8%83%BD%E8%B7%AF%E7%94%B1%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/10/22/ryu%E6%99%BA%E8%83%BD%E8%B7%AF%E7%94%B1%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><p>使用虚拟环境为anaconda，python版本3.7.16，先创建一个虚拟环境<code>sdn</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n sdn python=3.7<br></code></pre></td></tr></table></figure><p>然后激活环境，在虚拟环境中安装ryu和mininet</p><h2 id="1-1-ryu源码安装"><a href="#1-1-ryu源码安装" class="headerlink" title="1.1 ryu源码安装"></a>1.1 ryu源码安装</h2><p>后续需要修改ryu源码，因此选择编译ryu源码的方式安装，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/faucetsdn/ryu.git<br><span class="hljs-built_in">cd</span> ryu<br>pip install .<br></code></pre></td></tr></table></figure><p>安装成功后如下<br><img src="/../img/ryu%E6%99%BA%E8%83%BD%E8%B7%AF%E7%94%B1%E5%AD%A6%E4%B9%A0/1-1.png"></p><h2 id="1-2-mininet源码安装"><a href="#1-2-mininet源码安装" class="headerlink" title="1.2 mininet源码安装"></a>1.2 mininet源码安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/mininet/mininet<br><span class="hljs-built_in">cd</span> mininet<br><span class="hljs-built_in">cd</span> ..<br>PYTHON=python3 mininet/util/install.sh -a<br></code></pre></td></tr></table></figure><p>安装成功后如下<br><img src="/../img/ryu%E6%99%BA%E8%83%BD%E8%B7%AF%E7%94%B1%E5%AD%A6%E4%B9%A0/1-2.png"></p><h2 id="1-3-其他的库"><a href="#1-3-其他的库" class="headerlink" title="1.3 其他的库"></a>1.3 其他的库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install networkx<br></code></pre></td></tr></table></figure><h1 id="2-ryu代码修改"><a href="#2-ryu代码修改" class="headerlink" title="2. ryu代码修改"></a>2. ryu代码修改</h1><h2 id="2-1-李呈的github项目学习"><a href="#2-1-李呈的github项目学习" class="headerlink" title="2.1 李呈的github项目学习"></a>2.1 李呈的github项目学习</h2><h3 id="2-1-1-初学和简单使用"><a href="#2-1-1-初学和简单使用" class="headerlink" title="2.1.1 初学和简单使用"></a>2.1.1 初学和简单使用</h3><p><a href="https://github.com/muzixing/ryu/tree/master/ryu/app/network_awareness">网络状态感知实现by李呈</a></p><ol><li>将<code>network_awareness</code>文件内容加到<code>ryu/ryu/app/</code>目录下，将print改成python3的格式并进行适当修改（以前改的，忘记改了什么，就记得print要改）。</li><li>按照README修改ryu源文件<code>flags.py</code>和<code>topology/switches.py</code></li><li>重新编译安装ryu <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 setup.py install<br></code></pre></td></tr></table></figure></li><li>启动ryu，并使用胖树topo进行测试 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ryu-manager shortest_forwarding.py --observe-links --k-paths=2  --weight=delay<br></code></pre></td></tr></table></figure> ps：这里weight没用README的bw，是因为我运行暂时出现错误（似乎基于bw的路径不存在了），但是用delay没问题。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mn --custom FatTreeTopo.py --topo fattreetopo --mac --switch ovsk,protocol=OpenFLow13 --controller remote<br></code></pre></td></tr></table></figure> pingall测试结果：<br> <img src="/../img/ryu%E6%99%BA%E8%83%BD%E8%B7%AF%E7%94%B1%E5%AD%A6%E4%B9%A0/2-1.png"></li><li>后续需要对李呈的代码进行分析，进一步优化。。。</li></ol><h2 id="2-2-基于强化学习的算法学习"><a href="#2-2-基于强化学习的算法学习" class="headerlink" title="2.2 基于强化学习的算法学习"></a>2.2 基于强化学习的算法学习</h2><ol><li>这些论文中提出sdn架构模块中的topo发现和信息采集模块与李呈的基本一致，只有细微的区别。</li></ol>]]></content>
    
    
    <categories>
      
      <category>sdn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>智能路由</tag>
      
      <tag>sdn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/21/hello-world/"/>
    <url>/2024/10/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>论文记录</title>
    <link href="/2024/10/10/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/10/10/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>记录阅读到的论文的摘要内容</p><span id="more"></span><h2 id="学位论文"><a href="#学位论文" class="headerlink" title="学位论文"></a>学位论文</h2><h3 id="1-基于软件定义网络的智能QoS路由优化研究-鲁勇-2022："><a href="#1-基于软件定义网络的智能QoS路由优化研究-鲁勇-2022：" class="headerlink" title="1. 基于软件定义网络的智能QoS路由优化研究-鲁勇-2022："></a>1. 基于软件定义网络的智能QoS路由优化研究-鲁勇-2022：</h3><ol><li>研究问题：现有的智能路由方案只能处理离散的、低维的动作空间，并用离线的网络数据进行训练，不能在线学习，对动态网络环境表现不佳。</li><li>提出的算法：基于SDN和异步优势动作评估模型A3C的智能Qos路由优化算法，简称SA3C算法。<strong>创新点1</strong>：基于深度学习智能模型A3C；考虑多种Qos指标；<strong>创新点2</strong>：进行在线训练，实现在线策略；对于qos流，得到一系列的链路权重；然后计算出最优路径。</li><li>成果：实现了Qos智能路由优化系统（区分qos流和非qos流）。</li><li>实验拓扑：OS3E。</li><li>实验性能评价指标：网络的平均时延、吞吐量和平均丢包率</li><li>实验效果：和ECMP，KSP，NAF_R，DDPG_R算法比较 ，减少网络的平均时延，提高吞吐量，降低平均丢包率。</li><li>缺陷：<ol><li>没有对Qos流进行分类：对于奖励的权值，所有的Qos流都是一样的；</li><li>在线训练的时间问题：实验中一次路由进行了114次在线训练</li></ol></li></ol><h3 id="2-基于深度强化学习和网络流量状态预测的SDN智能路由优化研究-黄林强-2024："><a href="#2-基于深度强化学习和网络流量状态预测的SDN智能路由优化研究-黄林强-2024：" class="headerlink" title="2. 基于深度强化学习和网络流量状态预测的SDN智能路由优化研究-黄林强-2024："></a>2. 基于深度强化学习和网络流量状态预测的SDN智能路由优化研究-黄林强-2024：</h3><ol><li>研究问题：传统路由方法适应动态复杂的网络能力差且无法自适应进行路由转发等缺陷；大规模网络中单控制器负载大</li><li>提出的算法：<br>1. 单控制器：基于 Dueling DQN 强化学习和网络流量状态预测的 SDN 智能路由方法：获取全局网络感知信息，将信息转换成流量矩阵（带宽+时延+丢包率+使用带宽+丢包数+出错包的加权），对流量矩阵进行<strong>预测</strong>并使用Dueling DQN算法，自适应生成最佳路由<br>2. 多控制器：基于多智能体深度强化学习和网络流量状态预测的 SDN 跨域智能路由方法：多控制器之间通过socket通信，本地控制器和根控制器分别生成域内和域间路由，然后进行流量预测，生成最优路径。</li><li>实验拓扑：纽约市中心网络</li><li>实验性能评价指标：网络的平均时延、吞吐量和平均丢包率</li><li>实验效果：和不使用预测算法比较，获得的奖励值更大；流量矩阵和奖励的权值通过实验得出；和dijkstra,ospf比较，路由算法的网络平均吞吐量、时延和丢包率效果更好</li><li>缺陷：<ol><li>没有流的qos分类；</li><li>实验效果和传统算法比较，没有说服力。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>论文阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>论文阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git学习</title>
    <link href="/2024/09/28/git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/09/28/git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>记录使用git工具的过程</p><span id="more"></span><h1 id="1-git和github配置"><a href="#1-git和github配置" class="headerlink" title="1. git和github配置"></a>1. git和github配置</h1><h2 id="1-1-git配置用户名和邮箱"><a href="#1-1-git配置用户名和邮箱" class="headerlink" title="1.1 git配置用户名和邮箱"></a>1.1 git配置用户名和邮箱</h2><ol><li>配置<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;diba0&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;298301624@qq.com&quot;</span><br></code></pre></td></tr></table></figure></li><li>验证<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --list<br></code></pre></td></tr></table></figure><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.1-%E9%AA%8C%E8%AF%81.png"></li></ol><h2 id="1-2-配置github-ssh登录"><a href="#1-2-配置github-ssh登录" class="headerlink" title="1.2 配置github ssh登录"></a>1.2 配置github ssh登录</h2><ol><li><p>生成新的ssh公钥</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;298301624@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-keygen.png"></p></li><li><p>将ssh密钥添加到ssh-agent</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add ~/.ssh/id_ed25519<br></code></pre></td></tr></table></figure><p><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-agent.png"></p></li><li><p>在github Settings-&gt;SSh and GpG keys中添加公钥<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-key-github-new.png"><br>将公钥文件内容填入<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-key-github-new-1.png"><br>输入自己的GitHub账号密码<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-key-github-new-2.png"><br>添加成功<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-key-github-new-3.png"></p></li><li><p>验证<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-authenticated.png"><br>如果出现<code>kex_exchange_identification: Connection closed by remote host</code><br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-authenticated-error.png"><br>本人尝试关闭电脑里面的VPN软件后，可以解决。</p></li><li><p>使用ssh clone 自己的项目，进行操作<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-clone.png"><br>同时可以在GitHub看到ssh密钥被使用了<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-ssh-clone-github.png"></p></li></ol><h2 id="1-3-github-https-clone"><a href="#1-3-github-https-clone" class="headerlink" title="1.3 github https clone"></a>1.3 github https clone</h2><p>当然，上面是用ssh clone的，对于https clone，上面的配置并不能保证你对仓库有对应的权限。<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.2-https-error.png"><br>在push时要求输入用户名和密码，但是这个密码并不是Github账号密码。输出提示看对应网址的文档。学习一下。。。。</p><ol><li><p>创建 personal access token (classic)<br>这个token比较简单， fine-grained personal access token不考虑。<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.3-generate-new-token.png"><br>设置的话，把仓库先选上，其他的权限看需要进行勾选。<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.3-new-token-setting.png"><br>然后就有new token了，记得保存好。<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.3-new-token.png"></p></li><li><p>使用token<br>接着对库进行push操作就没问题了<br><img src="/../img/git%E5%AD%A6%E4%B9%A0/1.3-git-push.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Educoder MySQL学习</title>
    <link href="/2024/09/28/Educoder-Mysql%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/09/28/Educoder-Mysql%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>根据Educoder实践课程<a href="https://www.educoder.net/paths/bqcxmgje">数据库原理与应用——MySQL从入门到实战</a>进行学习记录</p><span id="more"></span><h1 id="1-MySQL数据定义与操作实战"><a href="#1-MySQL数据定义与操作实战" class="headerlink" title="1. MySQL数据定义与操作实战"></a>1. MySQL数据定义与操作实战</h1><h2 id="1-1-初视MySQL"><a href="#1-1-初视MySQL" class="headerlink" title="1.1 初视MySQL"></a>1.1 初视MySQL</h2><h3 id="1-1-1-创建数据库"><a href="#1-1-1-创建数据库" class="headerlink" title="1.1.1 创建数据库"></a>1.1.1 创建数据库</h3><ol><li>连接数据库<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -u`用户名` -p`密码`<br></code></pre></td></tr></table></figure></li><li>创建数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database `数据库名`;<br></code></pre></td></tr></table></figure></li><li>查看数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure></li><li>Educoder截图<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.1.1.png"></li></ol><h3 id="1-1-2-创建表"><a href="#1-1-2-创建表" class="headerlink" title="1.1.2 创建表"></a>1.1.2 创建表</h3><ol><li>创建表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `表名`(<br>    `字段名` `数据类型`，<br>    `字段名` `数据类型`，<br>    ......<br>);<br></code></pre></td></tr></table></figure></li><li>在指定数据库中创建表（例子）<ol><li>创建数据库 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database MyDb;<br></code></pre></td></tr></table></figure></li><li>选择数据库 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use MyDb;<br></code></pre></td></tr></table></figure></li><li>创建t_user表 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database t_user(<br>    id <span class="hljs-type">int</span>,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>),<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>),<br>    phone <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>)<br>);<br></code></pre></td></tr></table></figure></li></ol></li><li>查看表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">describe</span> `表名`;<br></code></pre></td></tr></table></figure>简写：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> `表名`;<br></code></pre></td></tr></table></figure></li><li>Educoder截图<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.1.2.png"></li></ol><h3 id="1-1-3-使用主键约束"><a href="#1-1-3-使用主键约束" class="headerlink" title="1.1.3 使用主键约束"></a>1.1.3 使用主键约束</h3><ol><li><p>在定义列的同时添加主键约束<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.1.3-1.png"></p></li><li><p>在定义完所有列后添加主键约束<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.1.3-2.png"></p></li><li><p>多字段联合主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_emp2(<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>),<br>    deptId <span class="hljs-type">int</span>,<br>    salary <span class="hljs-type">float</span>,<br>    <span class="hljs-keyword">primary</span> key(name,deptId)<br>);<br></code></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> `表名`;<br></code></pre></td></tr></table></figure></li><li><p>Educoder截图<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.1.3-3.png"></p></li></ol><h3 id="1-1-4-外键约束"><a href="#1-1-4-外键约束" class="headerlink" title="1.1.4 外键约束"></a>1.1.4 外键约束</h3><ol><li>添加外部关键字<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">constraint</span> `外键名` <span class="hljs-keyword">foreign</span> key(`字段名`) <span class="hljs-keyword">references</span> `主表名(主键名)`<br></code></pre></td></tr></table></figure></li><li>创建两张表：t_emp和t_dept，并为t_emp添加外键(例子)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_dept(<br>    deptId <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">22</span>),<br>    location <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_emp(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">22</span>),<br>    deptId <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">constraint</span> fk_emp_dept1 <span class="hljs-keyword">foreign</span> key(deptId) <span class="hljs-keyword">references</span> t_dept(deptId)<br>);<br></code></pre></td></tr></table></figure></li><li>Educoder截图<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.1.4.png"></li></ol><h3 id="1-1-5-添加常用约束"><a href="#1-1-5-添加常用约束" class="headerlink" title="1.1.5 添加常用约束"></a>1.1.5 添加常用约束</h3><ol><li>添加唯一约束，即字段的值不能出现相同值，关键词：<code>unique</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_dept(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">unique</span>,<br>    location <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)<br>);<br></code></pre></td></tr></table></figure></li><li>添加非空约束，即字段的值不能为空，关键词：<code>null</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_dept(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    location <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)<br>);<br></code></pre></td></tr></table></figure></li><li>添加默认约束，即字段的值设置默认值，关键词：<code>default</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_emp(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">22</span>),<br>    sex <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;男&#x27;</span><br>) <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure>note: 添加中文默认值需要设置表的字符编码为utf8</li><li>设置表的属性值自动增加，默认自增1，关键词：<code>auto_increment</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_emp(<br>    id <span class="hljs-keyword">primary</span> key auto_increment,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>)<br>);<br></code></pre></td></tr></table></figure></li><li>Educoder截图<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.1.5.png"></li></ol><h2 id="1-2-数据库和表的基本操作（一）"><a href="#1-2-数据库和表的基本操作（一）" class="headerlink" title="1.2 数据库和表的基本操作（一）"></a>1.2 数据库和表的基本操作（一）</h2><h3 id="1-2-1-查看表结构与修改表名"><a href="#1-2-1-查看表结构与修改表名" class="headerlink" title="1.2.1 查看表结构与修改表名"></a>1.2.1 查看表结构与修改表名</h3><ol><li>查看数据表基本结构<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">describe</span> `表名`;<br></code></pre></td></tr></table></figure>其中，该结构中各个字段的含义分别为：</li></ol><ul><li><code>NULL</code>：表示该列是否能存储 NULL 值；</li><li><code>Key</code>：表示该列是否已编制索引；</li><li><code>PRI</code>：表示该列是此表主键的一部分；</li><li><code>UNI</code>：表示该列是 UNIQUE 索引的一部分；</li><li><code>MUL</code>：表示在列中某个给定值允许出现多次；</li><li><code>Default</code>：表示该列是否有默认值，如果有的话值是多少；</li><li><code>Extra</code>：表示可以获取的与给定列有关的附加信息。</li></ul><ol start="2"><li>查看表详细结构：返回建表时的详细语句(<code>\G</code>是可选参数，用以美化输出)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> `表名` \G;<br></code></pre></td></tr></table></figure></li><li>修改表名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `旧表名` rename `新表名`; <br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp rename jd_emp;<br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-keyword">desc</span> jd_emp;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-2-2-修改字段名和字段类型"><a href="#1-2-2-修改字段名和字段类型" class="headerlink" title="1.2.2 修改字段名和字段类型"></a>1.2.2 修改字段名和字段类型</h3><ol><li>修改字段名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `表名` change `旧字段名` `新字段名` `新数据类型`;<br></code></pre></td></tr></table></figure></li><li>修改字段数据类型<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `表名` modify `字段名` `数据类型`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp change Id prod_id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp modify Name <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-2-3-添加和删除字段"><a href="#1-2-3-添加和删除字段" class="headerlink" title="1.2.3 添加和删除字段"></a>1.2.3 添加和删除字段</h3><ol><li>添加字段<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `表名` <span class="hljs-keyword">add</span> `新字段名` `数据类型` `[约束条件]` `[<span class="hljs-keyword">first</span><span class="hljs-operator">|</span>after 已存在字段名]`;<br></code></pre></td></tr></table></figure>[]中内容为可选参数；默认添加字段在最后一列。<br><code>first</code>：指定在第一列<br><code>after 已存在字段名</code>：指定在该字段后</li><li>删除字段<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `表名` <span class="hljs-keyword">drop</span> `字段名`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">add</span> Country <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) after Name;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">drop</span> Salary;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-2-4-修改字段排列位置"><a href="#1-2-4-修改字段排列位置" class="headerlink" title="1.2.4 修改字段排列位置"></a>1.2.4 修改字段排列位置</h3><ol><li>修改字段排列位置<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `表名` modify `字段<span class="hljs-number">1</span>` `数据类型` <span class="hljs-keyword">first</span> <span class="hljs-operator">|</span> after `字段<span class="hljs-number">2</span>`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp modify Name <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">first</span>;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp modify DeptId <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) after Salary;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-2-5-删除表外键约束"><a href="#1-2-5-删除表外键约束" class="headerlink" title="1.2.5 删除表外键约束"></a>1.2.5 删除表外键约束</h3><ol><li>删除表外键约束<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `表名` <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key `外键约束名`;<br></code></pre></td></tr></table></figure></li><li>Educoder 代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_emp <span class="hljs-keyword">drop</span> <span class="hljs-keyword">foreign</span> key emp_dept;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-3-数据库和表的基本操作（二）"><a href="#1-3-数据库和表的基本操作（二）" class="headerlink" title="1.3 数据库和表的基本操作（二）"></a>1.3 数据库和表的基本操作（二）</h2><h3 id="1-3-1-插入数据"><a href="#1-3-1-插入数据" class="headerlink" title="1.3.1 插入数据"></a>1.3.1 插入数据</h3><ol><li>为表的所有字段插入数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> `表名`(`字段名`) <span class="hljs-keyword">values</span>(`内容`);<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_emp(Id,Name,DeptId,Salary) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Nancy&#x27;</span>,<span class="hljs-number">301</span>,<span class="hljs-number">2300.00</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Tod&#x27;</span>,<span class="hljs-number">303</span>,<span class="hljs-number">5600.00</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Carly&#x27;</span>,<span class="hljs-number">301</span>,<span class="hljs-number">3200.00</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-3-2-更新数据"><a href="#1-3-2-更新数据" class="headerlink" title="1.3.2 更新数据"></a>1.3.2 更新数据</h3><ol><li>更新表中指定内容<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> `表名` <span class="hljs-keyword">set</span> `字段名<span class="hljs-number">1</span>`<span class="hljs-operator">=</span>`内容<span class="hljs-number">1</span>`, `字段名<span class="hljs-number">2</span>`<span class="hljs-operator">=</span>`内容<span class="hljs-number">2</span>`, `字段名<span class="hljs-number">3</span>`<span class="hljs-operator">=</span>`内容<span class="hljs-number">3</span>` <span class="hljs-keyword">where</span> `过滤条件`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_emp<br><span class="hljs-keyword">set</span> Name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Tracy&#x27;</span>,DeptId<span class="hljs-operator">=</span><span class="hljs-number">302</span>,Salary<span class="hljs-operator">=</span><span class="hljs-number">4300.00</span><br><span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-3-3-删除数据"><a href="#1-3-3-删除数据" class="headerlink" title="1.3.3 删除数据"></a>1.3.3 删除数据</h3><ol><li>删除表中指定行<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `过滤条件`;<br></code></pre></td></tr></table></figure></li><li>删除表中所有行<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> `表名`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tb_emp<br><span class="hljs-keyword">where</span> salary<span class="hljs-operator">&gt;</span><span class="hljs-number">3000</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-4-单表查询（一）"><a href="#1-4-单表查询（一）" class="headerlink" title="1.4 单表查询（一）"></a>1.4 单表查询（一）</h2><h3 id="1-4-1-基本查询语句"><a href="#1-4-1-基本查询语句" class="headerlink" title="1.4.1 基本查询语句"></a>1.4.1 基本查询语句</h3><ol><li>查询数据表中指定字段的内容<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名`;<br><span class="hljs-keyword">select</span> `字段名<span class="hljs-number">1</span>`,<span class="hljs-string">&#x27;字段名2&#x27;</span> <span class="hljs-keyword">from</span> `表名`;<br></code></pre></td></tr></table></figure></li><li>查询数据表中的所有内容<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `表名`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Name,Salary <span class="hljs-keyword">FROM</span> tb_emp;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-4-2-带IN关键字的查询"><a href="#1-4-2-带IN关键字的查询" class="headerlink" title="1.4.2 带IN关键字的查询"></a>1.4.2 带IN关键字的查询</h3><ol><li>带in关键字的查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">in</span> (`n1`, `n2`, `n3`);<br></code></pre></td></tr></table></figure>括号里的内容必须为int类型</li><li>带 not in关键字的查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (`n1`, `n2`, `n3`);<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Name,Salary <span class="hljs-keyword">FROM</span> tb_emp <span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-4-3-带between-and-的关键字查询"><a href="#1-4-3-带between-and-的关键字查询" class="headerlink" title="1.4.3 带between and 的关键字查询"></a>1.4.3 带between and 的关键字查询</h3><ol><li>带between and关键字的查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">between</span> `n1` <span class="hljs-keyword">and</span> `n2`;<br></code></pre></td></tr></table></figure></li><li>带not between and关键字的查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">not</span> <span class="hljs-keyword">between</span> `n1` <span class="hljs-keyword">and</span> `n2`;<br></code></pre></td></tr></table></figure></li><li>Educoder 代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Name,Salary <span class="hljs-keyword">FROM</span> tb_emp <span class="hljs-keyword">WHERE</span> Salary <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">3000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">5000</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-5-单表查询（二）"><a href="#1-5-单表查询（二）" class="headerlink" title="1.5 单表查询（二）"></a>1.5 单表查询（二）</h2><h3 id="1-5-1-带like的字符匹配查询"><a href="#1-5-1-带like的字符匹配查询" class="headerlink" title="1.5.1 带like的字符匹配查询"></a>1.5.1 带like的字符匹配查询</h3><ol><li>使用通配符%模糊匹配数据内容<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;字符%&#x27;</span>;<br></code></pre></td></tr></table></figure><code>%</code>匹配任意长度字符</li><li>使用通配符_模糊匹配数据内容<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;字符_&#x27;</span>;<br></code></pre></td></tr></table></figure><code>_</code>匹配任意长度字符</li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Name,Salary <span class="hljs-keyword">FROM</span> tb_emp <span class="hljs-keyword">WHERE</span> Name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;C%&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-5-2-查询空值和去除重复结果"><a href="#1-5-2-查询空值和去除重复结果" class="headerlink" title="1.5.2 查询空值和去除重复结果"></a>1.5.2 查询空值和去除重复结果</h3><ol><li>查询空值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure>非空值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `字段名` <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure></li><li>去除重复结果<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> `字段名` <span class="hljs-keyword">from</span> `表名`<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_emp <span class="hljs-keyword">WHERE</span> DeptId <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Name <span class="hljs-keyword">FROM</span> tb_emp;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-5-3-带and和or的多条件查询"><a href="#1-5-3-带and和or的多条件查询" class="headerlink" title="1.5.3 带and和or的多条件查询"></a>1.5.3 带and和or的多条件查询</h3><ol><li>带and关键字的多条件查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `表达式<span class="hljs-number">1</span>` <span class="hljs-keyword">and</span> `表达式<span class="hljs-number">2</span>`;<br></code></pre></td></tr></table></figure></li><li>带or关键字的多条件查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">where</span> `表达式<span class="hljs-number">1</span>` <span class="hljs-keyword">or</span> `表达式<span class="hljs-number">2</span>`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_emp <span class="hljs-keyword">WHERE</span> DeptId<span class="hljs-operator">=</span><span class="hljs-number">301</span> <span class="hljs-keyword">AND</span> Salary<span class="hljs-operator">&gt;</span><span class="hljs-number">3000</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_emp <span class="hljs-keyword">WHERE</span> DeptId <span class="hljs-keyword">in</span> (<span class="hljs-number">301</span>,<span class="hljs-number">303</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-6-单表查询（三）"><a href="#1-6-单表查询（三）" class="headerlink" title="1.6 单表查询（三）"></a>1.6 单表查询（三）</h2><h3 id="1-6-1-对查询结果进行排序"><a href="#1-6-1-对查询结果进行排序" class="headerlink" title="1.6.1 对查询结果进行排序"></a>1.6.1 对查询结果进行排序</h3><ol><li>对查询结果排序<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> `字段名` [<span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>]<br></code></pre></td></tr></table></figure><code>asc</code>和<code>desc</code>关键字对应生升序还是降序，默认为升序。</li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_score <span class="hljs-keyword">WHERE</span> class_id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-6-2-分组查询"><a href="#1-6-2-分组查询" class="headerlink" title="1.6.2 分组查询"></a>1.6.2 分组查询</h3><ol><li>分组查询的单独使用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> `字段名`;<br></code></pre></td></tr></table></figure>查询每个分组值中第一次出现的记录</li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> tb_class<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> class_id;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-6-3-使用limit限制查询结果的数量"><a href="#1-6-3-使用limit限制查询结果的数量" class="headerlink" title="1.6.3 使用limit限制查询结果的数量"></a>1.6.3 使用limit限制查询结果的数量</h3><ol><li>limit的使用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `字段名` <span class="hljs-keyword">from</span> `表名` limit [offest, ] `记录数`;<br></code></pre></td></tr></table></figure><code>offest</code>：偏移量（默认从0开始）<br><code>记录数</code>：返回多少查询结果的条数</li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> tb_score<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">1</span>,<span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-7-连接查询"><a href="#1-7-连接查询" class="headerlink" title="1.7 连接查询"></a>1.7 连接查询</h2><h3 id="1-7-1-内连接查询"><a href="#1-7-1-内连接查询" class="headerlink" title="1.7.1 内连接查询"></a>1.7.1 内连接查询</h3><ol><li>内连接查询<br>将两个表中满足连接条件的行组合起来作为结果集<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">`表<span class="hljs-number">1</span>` [<span class="hljs-keyword">inner</span>] <span class="hljs-keyword">join</span> `表<span class="hljs-number">2</span>` <span class="hljs-keyword">on</span> `表<span class="hljs-number">1</span>`.`字段`<span class="hljs-operator">=</span>`表<span class="hljs-number">2</span>`.`字段`<br></code></pre></td></tr></table></figure></li><li>Educoder上的例子<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.7.1.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> tb_student.name <span class="hljs-keyword">AS</span> studentName,tb_class.name <span class="hljs-keyword">AS</span> className <br><span class="hljs-keyword">FROM</span> tb_student <span class="hljs-keyword">join</span> tb_class<br><span class="hljs-keyword">ON</span> tb_student.class_id <span class="hljs-operator">=</span> tb_class.id;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-7-2-外连接查询"><a href="#1-7-2-外连接查询" class="headerlink" title="1.7.2 外连接查询"></a>1.7.2 外连接查询</h3><ol><li>外连接查询<br>以某张表为主，取出所有内容，然后和另一张表进行连接。不满足条件的行对应字段内容为null<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">`表<span class="hljs-number">1</span>` <span class="hljs-keyword">left</span><span class="hljs-operator">/</span><span class="hljs-keyword">right</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> `表<span class="hljs-number">2</span>` <span class="hljs-keyword">on</span> `表<span class="hljs-number">1</span>`.`字段`<span class="hljs-operator">=</span>`表<span class="hljs-number">2</span>`.`字段`<br></code></pre></td></tr></table></figure><code>left</code>：以左为主；<code>right</code>：以右为主。</li><li>Educoder上的例子<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.7.2.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> tb_student.name <span class="hljs-keyword">AS</span> studentName,tb_class.name <span class="hljs-keyword">AS</span> className<br><span class="hljs-keyword">FROM</span> tb_student <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> tb_class<br><span class="hljs-keyword">ON</span> tb_student.class_id <span class="hljs-operator">=</span> tb_class.id;<br><span class="hljs-keyword">SELECT</span> tb_student.name <span class="hljs-keyword">AS</span> studentName,tb_class.name <span class="hljs-keyword">AS</span> className<br><span class="hljs-keyword">FROM</span> tb_student <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> tb_class<br><span class="hljs-keyword">ON</span> tb_student.class_id <span class="hljs-operator">=</span> tb_class.id;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-7-3-复合条件连接查询"><a href="#1-7-3-复合条件连接查询" class="headerlink" title="1.7.3 复合条件连接查询"></a>1.7.3 复合条件连接查询</h3><ol><li>复合条件连接查询<br>在连接查询过程中添加过滤条件</li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> tb_student.name <span class="hljs-keyword">AS</span> studentName,tb_student.score,tb_class.name <span class="hljs-keyword">AS</span> className<br><span class="hljs-keyword">FROM</span> tb_student <span class="hljs-keyword">JOIN</span> tb_class<br><span class="hljs-keyword">ON</span> tb_student.class_id <span class="hljs-operator">=</span> tb_class.id<br><span class="hljs-keyword">WHERE</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-8-子查询"><a href="#1-8-子查询" class="headerlink" title="1.8 子查询"></a>1.8 子查询</h2><h3 id="1-8-1-带比较运算符的子查询"><a href="#1-8-1-带比较运算符的子查询" class="headerlink" title="1.8.1 带比较运算符的子查询"></a>1.8.1 带比较运算符的子查询</h3><ol><li><p>子查询<br>子查询是指出现在其他SQL语句内的select子句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 <span class="hljs-keyword">where</span> col1<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> col2 <span class="hljs-keyword">from</span> t2);<br></code></pre></td></tr></table></figure></li><li><p>带比较运算符的子查询<br>各种比较运算符</p></li><li><p>Educoder代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name,age <br><span class="hljs-keyword">FROM</span> tb_emp<br><span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">&gt;</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(age)<br><span class="hljs-keyword">FROM</span> tb_emp<br>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-8-2-关键字查询"><a href="#1-8-2-关键字查询" class="headerlink" title="1.8.2 关键字查询"></a>1.8.2 关键字查询</h3><ol><li><p><code>ALL</code>关键字<br><code>ALL</code>必须接在一个比较运算符的后面，表示与子查询返回的所有值比较都为<code>TRUE</code>则返回<code>TRUE</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> col1 <span class="hljs-keyword">from</span> table1 <span class="hljs-keyword">where</span> col1 <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">all</span> (<span class="hljs-keyword">select</span> col2 <span class="hljs-keyword">from</span> table2) <br></code></pre></td></tr></table></figure></li><li><p><code>ANY</code>和<code>SOME</code>关键字<br><code>ANY</code>与比较操作符联合使用，表示与子查询返回的任何值比较为<code>TRUE</code>，则返回<code>TRUE</code>。<br><code>SOME</code>是<code>ANY</code>的别名，一般用的比较少。</p></li><li><p><code>IN</code>关键字<br><code>IN</code>的意思就是指定的一个值是否在这个集合中，如果在就返回<code>TRUE</code>；否则就返回<code>FALSE</code>了，同<code>IN(项1，项2，...)</code>；<br><code>IN</code>是<code>= ANY</code>的别名，二者相同，但<code>NOT IN</code>的别名却不是<code>&lt;&gt; ANY</code>而是<code>&lt;&gt; SOME</code></p></li><li><p>Educoder代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> position, salary<br><span class="hljs-keyword">from</span> tb_salary<br><span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">all</span>(<br>    <span class="hljs-keyword">select</span> salary<br>    <span class="hljs-keyword">from</span> tb_salary<br>    <span class="hljs-keyword">where</span> position<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Java&#x27;</span><br>);<br><br><span class="hljs-keyword">select</span> position, salary<br><span class="hljs-keyword">from</span> tb_salary<br><span class="hljs-keyword">where</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">any</span>(<br>    <span class="hljs-keyword">select</span> salary<br>    <span class="hljs-keyword">from</span> tb_salary<br>    <span class="hljs-keyword">where</span> position<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Java&#x27;</span><br>);<br><br><span class="hljs-keyword">select</span> position, salary<br><span class="hljs-keyword">from</span> tb_salary<br><span class="hljs-keyword">where</span> position<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Java&#x27;</span>;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="1-9-复杂查询（一）"><a href="#1-9-复杂查询（一）" class="headerlink" title="1.9 复杂查询（一）"></a>1.9 复杂查询（一）</h2><h3 id="1-9-1-交换工资"><a href="#1-9-1-交换工资" class="headerlink" title="1.9.1 交换工资"></a>1.9.1 交换工资</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.9.1.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> tb_Salary <span class="hljs-keyword">set</span> sex<span class="hljs-operator">=</span>(<br>    if(sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-9-2-换座位"><a href="#1-9-2-换座位" class="headerlink" title="1.9.2 换座位"></a>1.9.2 换座位</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.9.2.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> if(id<span class="hljs-operator">%</span><span class="hljs-number">2</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>, id<span class="hljs-number">-1</span>, if(id<span class="hljs-operator">=</span><span class="hljs-number">5</span>,id,id<span class="hljs-operator">+</span><span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> id, name<br><span class="hljs-keyword">from</span> tb_Seat<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-9-3-分数排名"><a href="#1-9-3-分数排名" class="headerlink" title="1.9.3 分数排名"></a>1.9.3 分数排名</h3><ol><li><p>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.9.3.png"></p></li><li><p>Educoder代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Score, (<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> Score)<br>    <span class="hljs-keyword">from</span> score<br>    <span class="hljs-keyword">where</span> score<span class="hljs-operator">&gt;=</span>s.score<br>) <span class="hljs-keyword">as</span> Rank <br><span class="hljs-keyword">from</span> score s<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> Score <span class="hljs-keyword">desc</span>;<br><br><span class="hljs-keyword">select</span> Score, (<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(Score)<span class="hljs-operator">+</span><span class="hljs-number">1</span><br>    <span class="hljs-keyword">from</span> score<br>    <span class="hljs-keyword">where</span> score<span class="hljs-operator">&gt;</span>s.score<br>) <span class="hljs-keyword">as</span> Rank<br><span class="hljs-keyword">from</span> score s<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> Score <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-9-4-体育馆的人流量"><a href="#1-9-4-体育馆的人流量" class="headerlink" title="1.9.4 体育馆的人流量"></a>1.9.4 体育馆的人流量</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.9.4.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> g1.id, g1.date, g1.visitors_flow<br><span class="hljs-keyword">FROM</span> gymnasium g1<br><span class="hljs-keyword">WHERE</span> <br>    (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>     <span class="hljs-keyword">FROM</span> gymnasium g2<br>     <span class="hljs-keyword">WHERE</span> g2.id <span class="hljs-keyword">BETWEEN</span> g1.id<span class="hljs-number">-2</span> <span class="hljs-keyword">AND</span> g1.id<br>     <span class="hljs-keyword">AND</span> g2.visitors_flow <span class="hljs-operator">&gt;=</span> <span class="hljs-number">100</span>) <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">OR</span><br>    (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>     <span class="hljs-keyword">FROM</span> gymnasium g3<br>     <span class="hljs-keyword">WHERE</span> g3.id <span class="hljs-keyword">BETWEEN</span> g1.id<span class="hljs-number">-1</span> <span class="hljs-keyword">AND</span> g1.id<span class="hljs-operator">+</span><span class="hljs-number">1</span><br>     <span class="hljs-keyword">AND</span> g3.visitors_flow <span class="hljs-operator">&gt;=</span> <span class="hljs-number">100</span>) <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br><span class="hljs-keyword">OR</span><br>    (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>     <span class="hljs-keyword">FROM</span> gymnasium g4<br>     <span class="hljs-keyword">WHERE</span> g4.id <span class="hljs-keyword">BETWEEN</span> g1.id <span class="hljs-keyword">AND</span> g1.id<span class="hljs-operator">+</span><span class="hljs-number">2</span><br>     <span class="hljs-keyword">AND</span> g4.visitors_flow <span class="hljs-operator">&gt;=</span> <span class="hljs-number">100</span>) <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-9-5-统计总成绩"><a href="#1-9-5-统计总成绩" class="headerlink" title="1.9.5 统计总成绩"></a>1.9.5 统计总成绩</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.9.5.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    c.classname,<br>    <span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> s.chinese <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span> <span class="hljs-keyword">THEN</span> s.chinese <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> chinese,<br>    <span class="hljs-built_in">SUM</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> s.maths <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span> <span class="hljs-keyword">THEN</span> s.maths <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span> <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> maths<br><span class="hljs-keyword">FROM</span> <br>    tb_score s<br><span class="hljs-keyword">JOIN</span> <br>    tb_class c <span class="hljs-keyword">ON</span> s.name <span class="hljs-operator">=</span> c.stuname<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <br>    c.classname;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-10-复杂查询（二）"><a href="#1-10-复杂查询（二）" class="headerlink" title="1.10 复杂查询（二）"></a>1.10 复杂查询（二）</h2><h3 id="1-10-1-查询学生平均分"><a href="#1-10-1-查询学生平均分" class="headerlink" title="1.10.1 查询学生平均分"></a>1.10.1 查询学生平均分</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.10.1.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> stu.s_id,stu.s_name,round(<span class="hljs-built_in">avg</span>(if(sco.s_score <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>,<span class="hljs-number">0.00</span>, sco.s_score)),<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> avg_score<br><span class="hljs-keyword">from</span> student stu <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> score sco<br><span class="hljs-keyword">on</span> stu.s_id<span class="hljs-operator">=</span>sco.s_id<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stu.s_id,stu.s_name<br><span class="hljs-keyword">having</span> avg_score<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-10-2-查询修课相同学生信息"><a href="#1-10-2-查询修课相同学生信息" class="headerlink" title="1.10.2 查询修课相同学生信息"></a>1.10.2 查询修课相同学生信息</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.10.2.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s_id,s_name,s_sex<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> s_id <span class="hljs-keyword">in</span> (<br>    <span class="hljs-keyword">select</span> s_id <span class="hljs-keyword">from</span> score<br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s_id<br>    <span class="hljs-keyword">having</span> s_id<span class="hljs-operator">!=</span><span class="hljs-string">&#x27;01&#x27;</span> <span class="hljs-keyword">and</span> <br>    group_concat(c_id <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c_id)<br>    <span class="hljs-operator">=</span>(<br>        <span class="hljs-keyword">select</span> group_concat(c_id <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> c_id) <span class="hljs-keyword">as</span> str2<br>        <span class="hljs-keyword">from</span> score<br>        <span class="hljs-keyword">where</span> s_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;01&#x27;</span><br>    )<br>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-10-3-查询各科成绩并排序"><a href="#1-10-3-查询各科成绩并排序" class="headerlink" title="1.10.3 查询各科成绩并排序"></a>1.10.3 查询各科成绩并排序</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.10.3.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span> ,<span class="hljs-built_in">count</span>(b.s_score)<span class="hljs-operator">+</span><span class="hljs-number">1</span> rank <span class="hljs-keyword">from</span> score a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> score b <span class="hljs-keyword">on</span> a.c_id <span class="hljs-operator">=</span> b.c_id <span class="hljs-keyword">and</span> a.s_score <span class="hljs-operator">&lt;</span> b.s_score<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a.c_id,a.s_id<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.s_id,a.c_id,a.s_score,<span class="hljs-built_in">count</span>(b.s_score);<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-10-4-查询张老师课程成绩最高的学生信息"><a href="#1-10-4-查询张老师课程成绩最高的学生信息" class="headerlink" title="1.10.4 查询张老师课程成绩最高的学生信息"></a>1.10.4 查询张老师课程成绩最高的学生信息</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.10.4.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s.s_id,st.s_name,st.s_sex,s.s_score,c.c_id,c.c_name <span class="hljs-keyword">from</span>  student st,course c<br><span class="hljs-keyword">join</span> score s<br><span class="hljs-keyword">on</span> c.c_id <span class="hljs-operator">=</span> s.c_id<br><span class="hljs-keyword">where</span> t_id <span class="hljs-operator">=</span>(<br><span class="hljs-keyword">select</span> t_id <span class="hljs-keyword">from</span> teacher<br><span class="hljs-keyword">where</span> t_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>) <span class="hljs-keyword">having</span> <span class="hljs-built_in">max</span>(s.s_score) <br></code></pre></td></tr></table></figure></li></ol><h3 id="1-10-5-查询两门课程不及格同学信息"><a href="#1-10-5-查询两门课程不及格同学信息" class="headerlink" title="1.10.5 查询两门课程不及格同学信息"></a>1.10.5 查询两门课程不及格同学信息</h3><ol><li>任务描述<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.10.5.png"></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> stu.s_id,stu.s_name,round(<span class="hljs-built_in">avg</span>(s_score),<span class="hljs-number">0</span>) avg_score<br><span class="hljs-keyword">from</span> student stu <span class="hljs-keyword">join</span> score sco <span class="hljs-keyword">on</span> stu.s_id<span class="hljs-operator">=</span>sco.s_id<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> stu.s_id<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> s_score<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-11-使用聚合函数查询"><a href="#1-11-使用聚合函数查询" class="headerlink" title="1.11 使用聚合函数查询"></a>1.11 使用聚合函数查询</h2><h3 id="1-11-1-COUNT-函数"><a href="#1-11-1-COUNT-函数" class="headerlink" title="1.11.1 COUNT()函数"></a>1.11.1 COUNT()函数</h3><ol><li>count()函数的基本使用<br>统计记录的总条数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span><span class="hljs-operator">/</span>`字段名`) <span class="hljs-keyword">from</span> `数据表`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tb_class;<br><span class="hljs-keyword">select</span> classid, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> classid<span class="hljs-operator">=</span><span class="hljs-number">367</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-11-2-SUM-函数"><a href="#1-11-2-SUM-函数" class="headerlink" title="1.11.2 SUM()函数"></a>1.11.2 SUM()函数</h3><ol><li>sum()函数的基本使用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(`字段名`) <span class="hljs-keyword">from</span> `数据表`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> tb_class;<br><span class="hljs-keyword">select</span> course,<span class="hljs-built_in">sum</span>(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;语文&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-11-3-AVG函数"><a href="#1-11-3-AVG函数" class="headerlink" title="1.11.3 AVG函数"></a>1.11.3 AVG函数</h3><ol><li>avg()函数的基本使用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(`字段名`) <span class="hljs-keyword">from</span> `数据表`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> course, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;语文&#x27;</span>;<br><span class="hljs-keyword">select</span> course, <span class="hljs-built_in">avg</span>(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-11-4-MAX-函数"><a href="#1-11-4-MAX-函数" class="headerlink" title="1.11.4 MAX()函数"></a>1.11.4 MAX()函数</h3><ol><li>max()函数的基本使用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(`字段名`) <span class="hljs-keyword">from</span> `数据表`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> course, <span class="hljs-built_in">max</span>(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;语文&#x27;</span>;<br><span class="hljs-keyword">select</span> course, <span class="hljs-built_in">max</span>(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-11-4-MIN-函数"><a href="#1-11-4-MIN-函数" class="headerlink" title="1.11.4 MIN()函数"></a>1.11.4 MIN()函数</h3><ol><li>min()函数的基本使用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(`字段名`) <span class="hljs-keyword">from</span> `数据表`;<br></code></pre></td></tr></table></figure></li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> course, <span class="hljs-built_in">min</span>(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;语文&#x27;</span>;<br><span class="hljs-keyword">select</span> course, <span class="hljs-built_in">min</span>(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-12-其他函数的使用"><a href="#1-12-其他函数的使用" class="headerlink" title="1.12 其他函数的使用"></a>1.12 其他函数的使用</h2><h3 id="1-12-1-字符函数"><a href="#1-12-1-字符函数" class="headerlink" title="1.12.1 字符函数"></a>1.12.1 字符函数</h3><ol><li><p>常用字符函数</p><table><thead><tr><th align="center">函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>concat()</code></td><td align="center">字符串的拼接</td></tr><tr><td align="center"><code>concat_ws()</code></td><td align="center">使用指定的字符将目标字符串进行拼接</td></tr><tr><td align="center"><code>format()</code></td><td align="center">数字格式化</td></tr><tr><td align="center"><code>lower()</code></td><td align="center">字符串全部转换为小写</td></tr><tr><td align="center"><code>upper()</code></td><td align="center">字符串全部转换为大写</td></tr><tr><td align="center"><code>left()</code></td><td align="center">获取左侧的字符串</td></tr><tr><td align="center"><code>right()</code></td><td align="center">获取右侧的字符串</td></tr><tr><td align="center"><code>length()</code></td><td align="center">计算字符串的长度</td></tr><tr><td align="center"><code>ltrim()</code></td><td align="center">删除前导的空格</td></tr><tr><td align="center"><code>rtrim()</code></td><td align="center">删除后续的空格</td></tr><tr><td align="center"><code>trim()</code></td><td align="center">删除前导和后续的空格</td></tr><tr><td align="center"><code>substring()</code></td><td align="center">字符串截取</td></tr><tr><td align="center"><code>substring_index()</code></td><td align="center">分隔字符串</td></tr><tr><td align="center"><code>replace()</code></td><td align="center">字符串替换</td></tr><tr><td align="center"><code>[not] like</code></td><td align="center">模式匹配</td></tr></tbody></table></li><li><p><code>concat()</code>与<code>concat_ws()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-concat.png"><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-concat_ws.png"></p></li><li><p><code>left()</code>与<code>right()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-left_right.png"></p></li><li><p><code>ltrim()</code>、<code>rtrim()</code>与<code>trim()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-trim_1.png"><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-trim_2.png"></p></li><li><p><code>substring()</code>、<code>substring_index()</code>与<code>replace()</code></p></li></ol><ul><li>replace:<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-replace.png"><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-replace_1.png"></li><li>substring:<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-substring.png"></li><li>substring_index:<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.1-substring_index.png"></li></ul><ol start="6"><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> concat(<span class="hljs-built_in">upper</span>(<span class="hljs-keyword">left</span>(Name,<span class="hljs-number">1</span>)),<span class="hljs-built_in">lower</span>(<span class="hljs-keyword">right</span>(Name,<span class="hljs-number">2</span>))) <span class="hljs-keyword">as</span> Name <span class="hljs-keyword">from</span> employee;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-12-2-数学函数"><a href="#1-12-2-数学函数" class="headerlink" title="1.12.2 数学函数"></a>1.12.2 数学函数</h3><ol><li>数值运算符</li></ol><ul><li>“加减乘除”即常用的数值运算符<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-1.png"></li><li>运算函数<table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>ceil()</code></td><td align="center">进一（向上）取整</td></tr><tr><td align="center"><code>floor()</code></td><td align="center">舍一（向下）取整</td></tr><tr><td align="center"><code>power()</code></td><td align="center">幂运算</td></tr><tr><td align="center"><code>sqrt()</code></td><td align="center">平方根运算</td></tr><tr><td align="center"><code>round()</code></td><td align="center">四舍五入</td></tr><tr><td align="center"><code>abs()</code></td><td align="center">绝对值计算</td></tr><tr><td align="center"><code>rand()</code></td><td align="center">生产0-1的随机数</td></tr><tr><td align="center"><code>truncate()</code></td><td align="center">数字截取</td></tr><tr><td align="center"><code>div()</code></td><td align="center">整数除法</td></tr><tr><td align="center"><code>mod()</code></td><td align="center">取余数(取模)</td></tr></tbody></table></li><li><code>ceil()</code>和<code>floor()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-2.png"></li><li><code>div()</code>和<code>mod()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-3.png"><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-4.png"></li><li><code>round()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-5.png"></li><li><code>power()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-6.png"></li><li><code>sqrt()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-7.png"></li><li><code>truncate()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-8.png"></li></ul><ol start="2"><li>比较运算符<table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>[not] between...and..</code></td><td align="center">[不]在范围内</td></tr><tr><td align="center"><code>[not] in()</code></td><td align="center">[不]在列出值范围内</td></tr><tr><td align="center"><code>is [not] null</code></td><td align="center">[不]为空</td></tr></tbody></table></li></ol><ul><li><code>between...and...</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-9.png"></li><li><code>in()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-10.png"></li><li><code>is_null()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.2-11.png"></li></ul><ol start="3"><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> Score <span class="hljs-keyword">set</span> s_score<span class="hljs-operator">=</span><span class="hljs-keyword">truncate</span>(s_score<span class="hljs-operator">-</span>round(<span class="hljs-built_in">sqrt</span>((<span class="hljs-built_in">power</span>(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)<span class="hljs-operator">-</span><span class="hljs-built_in">power</span>(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<span class="hljs-operator">/</span><span class="hljs-built_in">power</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)),<span class="hljs-number">2</span>),<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-12-3-日期时间函数和流程控制类函数"><a href="#1-12-3-日期时间函数和流程控制类函数" class="headerlink" title="1.12.3 日期时间函数和流程控制类函数"></a>1.12.3 日期时间函数和流程控制类函数</h3><ol><li>日期函数<table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>now()</code></td><td align="center">当前日期和时间</td></tr><tr><td align="center"><code>curdate()</code></td><td align="center">当前日期</td></tr><tr><td align="center"><code>curtime()</code></td><td align="center">当前时间</td></tr><tr><td align="center"><code>date_add()</code></td><td align="center">日期变化</td></tr><tr><td align="center"><code>datediff()</code></td><td align="center">日期差值</td></tr><tr><td align="center"><code>date_format()</code></td><td align="center">日期格式化</td></tr><tr><td align="center"><code>year()</code></td><td align="center">返回日期的年份</td></tr><tr><td align="center"><code>month()</code></td><td align="center">返回日期的月份</td></tr><tr><td align="center"><code>week()</code></td><td align="center">返回日期的周号</td></tr></tbody></table></li></ol><ul><li><code>now()</code>、<code>curdate()</code>和<code>curtime()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-1.png"><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-2.png"></li><li><code>date_add()</code>、<code>datediff()</code>和<code>date_format()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-3.png"><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-4.png"><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-5.png"><br>format常用说明符<table><thead><tr><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>%d</code></td><td align="center">月的天，数值（00-31）</td></tr><tr><td align="center"><code>%H</code></td><td align="center">小时 （00-23）</td></tr><tr><td align="center"><code>%h</code></td><td align="center">小时 （01-12）</td></tr><tr><td align="center"><code>%m</code></td><td align="center">月，数值（00-12）</td></tr><tr><td align="center"><code>%p</code></td><td align="center">AM 或 PM</td></tr><tr><td align="center"><code>%s</code></td><td align="center">秒（00-59）</td></tr><tr><td align="center"><code>%T</code></td><td align="center">时间，24-小时（hh:mm:ss）</td></tr><tr><td align="center"><code>%Y</code></td><td align="center">年，4 位</td></tr></tbody></table></li><li><code>year()</code>和<code>month()</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-6.png"></li></ul><ol start="2"><li>流程控制类函数<table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>if()</code></td><td align="center">判断，流程控制</td></tr><tr><td align="center"><code>ifnull()</code></td><td align="center">字段值是否为空</td></tr><tr><td align="center"><code>case()</code></td><td align="center">搜索语句</td></tr></tbody></table></li></ol><ul><li><code>if()</code>：<code>if(a,b,c)</code>如果<code>a</code>为真返回<code>b</code>，否则返回<code>c</code>;<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-7.png"></li><li><code>ifnull()</code>：<code>ifnull(a,b)</code>如果<code>a</code>不为<code>null</code>返回<code>a</code>，否则返回<code>b</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-8.png"></li><li><code>case()</code>：<code>case when a then b end</code>如果<code>a</code>为真返回<code>b</code><br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.12.3-9.png"></li></ul><ol start="3"><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">year</span>(s_birth) <span class="hljs-keyword">as</span> <span class="hljs-keyword">year</span>, (<span class="hljs-keyword">year</span>(<span class="hljs-string">&#x27;2019-01-01&#x27;</span>)<span class="hljs-operator">-</span><span class="hljs-keyword">year</span>(s_birth)) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;年龄&#x27;</span> <span class="hljs-keyword">from</span> Student;<br><br><span class="hljs-keyword">select</span><br>    c.c_id <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;课程id&#x27;</span>, <br>    c.c_name <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;课程名&#x27;</span>,<br>    <span class="hljs-built_in">max</span>(s.s_score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最高分&#x27;</span>,<br>    <span class="hljs-built_in">min</span>(s.s_score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最低分&#x27;</span>,<br>    round(<span class="hljs-built_in">avg</span>(s.s_score),<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;平均分&#x27;</span>,<br>    round(<span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> s.s_score<span class="hljs-operator">&gt;=</span><span class="hljs-number">60</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>)<span class="hljs-operator">/</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">*</span><span class="hljs-number">100</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;及格率&#x27;</span><br><span class="hljs-keyword">from</span><br>    Course c<br><span class="hljs-keyword">join</span><br>    Score s <span class="hljs-keyword">on</span> s.c_id<span class="hljs-operator">=</span>c.c_id<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>    c.c_id<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>    c.c_id <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-12-4-自定义函数"><a href="#1-12-4-自定义函数" class="headerlink" title="1.12.4 自定义函数"></a>1.12.4 自定义函数</h3><ol><li>自定义函数<br>参数：不一定要有<br>返回值：一定要有<br>创建自定义函数:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 　#如果函数体只有一条语句, <span class="hljs-keyword">begin</span>和<span class="hljs-keyword">end</span>可以省略, 同时delimiter也可以省略<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> `函数名`(`形参列表`) <span class="hljs-keyword">returns</span> `返回类型` #注意是retruns<br><span class="hljs-keyword">begin</span><br>    `函数体`    #函数内定义的变量如：<span class="hljs-keyword">set</span> <span class="hljs-variable">@x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; 变量x为全局变量，在函数外面也可以使用<br>    `返回值`<br><span class="hljs-keyword">end</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br></code></pre></td></tr></table></figure>例子：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> f2(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">return</span> a <span class="hljs-operator">+</span> b;<br><span class="hljs-keyword">end</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br></code></pre></td></tr></table></figure></li><li>删除自定义函数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">function</span> [if <span class="hljs-keyword">exists</span>] function_name;<br></code></pre></td></tr></table></figure></li><li>定义全局变量并赋值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> @`用户变量名`<span class="hljs-operator">=</span>`值`;<br><span class="hljs-keyword">set</span> @`用户变量名`:<span class="hljs-operator">=</span>`值`;<br></code></pre></td></tr></table></figure></li><li>定义局部变量</li></ol><ul><li>声明<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> `变量名` `类型`;<br><span class="hljs-keyword">declare</span> `变量名` `类型` <span class="hljs-keyword">default</span> `值`;<br></code></pre></td></tr></table></figure></li><li>赋值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> `变量名`<span class="hljs-operator">=</span>`值`;<br><span class="hljs-keyword">set</span> `变量名`:<span class="hljs-operator">=</span>`值`;<br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li>流程控制</li></ol><ul><li><code>if</code>语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF search_condition <span class="hljs-keyword">THEN</span> statement_list<br>   [ELSEIF search_condition <span class="hljs-keyword">THEN</span> statement_list] ...<br>   [<span class="hljs-keyword">ELSE</span> statement_list]<br><span class="hljs-keyword">END</span> IF;<br></code></pre></td></tr></table></figure></li><li><code>case</code>语句</li><li><code>where</code>语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">[begin_label:] WHILE search_condition DO<br>statement_list<br><span class="hljs-keyword">END</span> WHILE [end_label]<br></code></pre></td></tr></table></figure></li></ul><ol start="6"><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> fn_three_max(param_1 <span class="hljs-type">int</span>, param_2 <span class="hljs-type">int</span>, param_3 <span class="hljs-type">int</span>) <span class="hljs-keyword">returns</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">declare</span> max_value <span class="hljs-type">int</span>;<br>    <span class="hljs-keyword">set</span> max_value<span class="hljs-operator">=</span>param_1;<br>    if param_2<span class="hljs-operator">&gt;</span>max_value <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">set</span> max_value<span class="hljs-operator">=</span>param_2;<br>    <span class="hljs-keyword">end</span> if;<br>    if param_3<span class="hljs-operator">&gt;</span>max_value <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">set</span> max_value<span class="hljs-operator">=</span>param_3;<br>    <span class="hljs-keyword">end</span> if;<br>    <span class="hljs-keyword">return</span> max_value;<br><span class="hljs-keyword">end</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-13-分组选择数据"><a href="#1-13-分组选择数据" class="headerlink" title="1.13 分组选择数据"></a>1.13 分组选择数据</h2><h3 id="1-13-1-GROUP-BY-与聚合函数"><a href="#1-13-1-GROUP-BY-与聚合函数" class="headerlink" title="1.13.1 GROUP BY 与聚合函数"></a>1.13.1 GROUP BY 与聚合函数</h3><ol><li>group by与聚合函数的使用<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [聚合函数] 字段名 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 查询条件]　[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 字段名]<br></code></pre></td></tr></table></figure></li><li>group by中select指定的字段限制<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> category,<span class="hljs-built_in">sum</span>(count),disgest <span class="hljs-keyword">from</span> info <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> category;<br></code></pre></td></tr></table></figure>将报错，因为<code>disgest</code>字段既不在聚合函数里面，也不在group函数里面。</li><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> gradeId,sex,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> gradeId <span class="hljs-keyword">in</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gradeId,sex;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-13-2-使用HAVING-和-ORDER-BY"><a href="#1-13-2-使用HAVING-和-ORDER-BY" class="headerlink" title="1.13.2 使用HAVING 和 ORDER BY"></a>1.13.2 使用HAVING 和 ORDER BY</h3><ol><li>使用having子句进行分组筛选<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [聚合函数] 字段名 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 查询条件]　[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 字段名] [<span class="hljs-keyword">having</span> 字段名 筛选条件]<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>Having与Where的区别<br>  where子句都可以用having代替，区别在于where过滤行，having过滤分组；</p><ul><li><p>where子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，where条件中不能包含聚组函数，使用where条件过滤出特定的行；</p></li><li><p>having子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having条件过滤出特定的组，也可以使用多个分组标准进行分组。</p></li></ul></li></ul><p><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.13.2-1.png"><br>2. Group by和Order by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [聚合函数] 字段名 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 查询条件]　[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 字段名] [<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段名 排序方向]<br></code></pre></td></tr></table></figure><p>示例：<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.13.2-2.png"><br>若分组字段和排序字段一样时，可不需要<code>order by</code>关键字，则只需告知排序方向，即可简写成：<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/1.13.2-3.png"><br>3. Educoder 代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> tb_grade<br><span class="hljs-keyword">where</span> score<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(score)<br><span class="hljs-keyword">from</span> tb_grade<br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span>(<br>    <span class="hljs-keyword">select</span> sno<br>    <span class="hljs-keyword">from</span> tb_grade<br>    <span class="hljs-keyword">where</span> pno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;语文&#x27;</span> <span class="hljs-keyword">and</span> score<span class="hljs-operator">&gt;=</span><span class="hljs-number">95</span><br><br><br><br>)<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">avg</span>(score)<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><h1 id="2-MySQL数据管理技术实战"><a href="#2-MySQL数据管理技术实战" class="headerlink" title="2. MySQL数据管理技术实战"></a>2. MySQL数据管理技术实战</h1><h2 id="2-1-视图"><a href="#2-1-视图" class="headerlink" title="2.1 视图"></a>2.1 视图</h2><h3 id="2-1-1-视图"><a href="#2-1-1-视图" class="headerlink" title="2.1.1 视图"></a>2.1.1 视图</h3><ol><li>视图的定义<blockquote><p>视图（view）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。通过视图，可以展现基表（用来创建视图的表）的部分数据；视图数据来自定义视图的查询表。</p></blockquote></li><li>创建视图<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE] [ALGORITHM <span class="hljs-operator">=</span> &#123;UNDEFINED <span class="hljs-operator">|</span> <span class="hljs-keyword">MERGE</span> <span class="hljs-operator">|</span> TEMPTABLE&#125;]<br>    <span class="hljs-keyword">VIEW</span> view_name [(column_list)]<br>    <span class="hljs-keyword">AS</span> select_statement<br>   [<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> OPTION]<br></code></pre></td></tr></table></figure>参数说明：</li></ol><ul><li><p><code>OR REPLACE</code>：表示替换已有视图；</p></li><li><p><code>ALGORITHM</code>：表示视图选择算法，默认算法是<code>UNDEFINED</code>(未定义的)： MySQL 自动选择要使用的算法 ；<code>merge</code>合并；<code>temptable</code>临时表；</p></li><li><p><code>column_list</code>：可选参数，指定视图中各个属性的名词，默认情况下与<code>select</code>语句中查询的属性相同；</p></li><li><p><code>select_statement</code>：表示<code>select</code>语句；</p></li><li><p><code>[WITH [CASCADED | LOCAL] CHECK OPTION]</code>：表示视图在更新时保证在视图的权限范围之内；<code>cascade</code>是默认值，表示更新视图的时候，要满足视图和表的相关条件；<code>local</code>表示更新视图的时候，要满足该视图定义的一个条件即可。</p></li></ul><p>示例1：<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.1.1-1.png"><br>示例2：<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.1.1-2.png"><br>以上两个示例可以看出，虽然两个视图的字段名不同，但是，数据是相同的，因为两个视图引用的是同一个表中的数据，并且，<code>as</code>后的创建视图的语句也相同。</p><p>在实际开发中，用户可以根据自己的需求，通过视图的方式，获取基本表中自己需要的数据，这样既能满足用户的需求，也不会破坏基本表原来的结构，从而保证了基本表中数据的安全性。</p><ol start="3"><li>操作视图<br>视图是逻辑表，也就是说视图不是真实的表，但操作视图和操作普通表的语法是一样的。</li></ol><p>用户可以在视图中无条件地使用<code>select</code>语句查询数据。但使用<code>insert</code>、<code>update</code>和<code>delete</code>操作需要在创建视图时满足以下条件（满足以下条件的视图称为可更新视图）：</p><ul><li><p><code>from</code>子句中只能引用有1个表（真实表或可更新视图）；</p></li><li><p>不能包含 <code>with</code>、<code>distinct</code>、<code>group by</code>、<code>having</code>、<code>limit</code>等子句；</p></li><li><p>不能使用复合查询，即不能使用<code>union</code>、<code>intersect</code>、<code>except</code>等集合操作；</p></li><li><p><code>select</code>子句的字段列表不能包含聚合、窗口函数、集合返回函数。</p></li></ul><p>我们仍使用之前示例中的数据来操作视图：<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.1.1-3.png"><br>4. 删除视图<br>若视图不再被需要，我们可以将其删除，且视图的删除并不影响源表中的数据。</p><p>删除视图的 SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_name;<br></code></pre></td></tr></table></figure><p>示例：<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.1.1-4.png"></p><ol start="5"><li>Educoder代码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">1.</span>创建单表视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_view <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> math,chinese,math<span class="hljs-operator">+</span>chinese<br><span class="hljs-keyword">from</span> student;<br><br>#<span class="hljs-number">2.</span>创建多表视图<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> stu_classes <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> student.stu_id,student.name,stu_info.classes<br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">join</span> stu_info<br><span class="hljs-keyword">on</span> student.stu_id<span class="hljs-operator">=</span>stu_info.stu_id;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2-索引"><a href="#2-2-索引" class="headerlink" title="2.2 索引"></a>2.2 索引</h2><h3 id="2-2-1-索引"><a href="#2-2-1-索引" class="headerlink" title="2.2.1 索引"></a>2.2.1 索引</h3><ol><li><p>索引是什么<br>数据库索引是一种提高数据库系统性能的方法。索引能让数据库服务器更快地查找和获取表中指定的行。<br>例如，为了方便读者快速查找书中的术语，很多书籍在最后附加了索引页，术语按字母排序，同时给出页码。这样读者可以根据术语名，快速获取页码，而不用翻阅整本书。<br>但是索引也给数据库系统带来了一定的开销，所以我们应该谨慎地使用它们。<br>例如现在有一张简单的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test<br>(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    content <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>)<br></code></pre></td></tr></table></figure><p>在这张表中假设存了1000条数据（id依次递增且不重复），我们要查询表中id&#x3D;234的数据，sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">234</span>;<br></code></pre></td></tr></table></figure><p>一般情况，在没有索引下，数据库系统必须扫描整个表（一行一行地检查），才能获取到所有满足条件的行，很明显这种方法的效率是非常低的。<br>那么肯定有优化的方法，就是 索引 了！在id字段上添加索引，这样 MySQL 就只需要扫描一行数据就可以了。</p></li><li><p>索引的分类<br>索引大体可分为单列索引（普通索引，唯一索引，主键索引）、组合索引、全文索引、空间索引四类。本实训我们主要介绍单例索引和组合索引：</p></li></ol><ul><li>单例索引：一个索引只包含单个列，但一个表中可以有多个单列索引；<ul><li>普通索引：仅加速查询 最基本的索引，没有任何限制，是我们大多数情况下使用到的索引；</li><li>唯一索引：索引列中的值必须是唯一的，但允许为空值；</li><li>主键索引：是一种特殊的唯一索引，不允许有空值。</li></ul></li><li>组合索引：在表的多个字段上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。</li></ul><ol start="3"><li>索引的创建和删除<br><strong>创建索引</strong><br>创建索引有两种方式，一种是在建表时创建，另一种是建表后创建：</li></ol><ul><li><p>普通索引：</p><ol><li>创表时创建普通索引： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span> mytable(<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    INDEX [indexName] (username)<br>);<br></code></pre></td></tr></table></figure></li><li>建表后创建普通索引：</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> INDEX 索引名称 <span class="hljs-keyword">on</span> 表名(字段名);<br>#或者<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> INDEX 索引名称 (字段名);<br></code></pre></td></tr></table></figure></li><li><p>唯一索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX 索引名称 <span class="hljs-keyword">ON</span> 表名(字段名);<br>#或者<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> (字段名);<br></code></pre></td></tr></table></figure></li><li><p>主键索引：主键索引一般在建表时创建，会设为<code>int</code>而且是<code>AUTO_INCREMENT</code>自增类型的，例如一般表的<code>id</code>字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable (<br>  id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br></code></pre></td></tr></table></figure></li><li><p>组合索引：组合索引就是在多个字段上创建一个索引。（应用场景：当表的行数远远大于索引键的数目时，使用这种方式可以明显加快表的查询速度）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX 索引名称 <span class="hljs-keyword">ON</span> 表名(字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>，字段<span class="hljs-number">3</span>);<br>#或者<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> INDEX 索引名称(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>，字段<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p><strong>删除索引</strong><br>同样，删除索引也有两种方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#使用<span class="hljs-keyword">drop</span>删除索引<br><span class="hljs-keyword">drop</span> index index_name <span class="hljs-keyword">on</span> table_name ;<br>#使用<span class="hljs-keyword">alter</span>删除索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">drop</span> index index_name ;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key ; #删除主键索引<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>查询索引<br>查询索引 SQL：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure>如下图：<br><img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.2.1-1.png"><br>查询结果部分字段解释：</li></ol><table><thead><tr><th align="center">字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Table</td><td align="center">创建索引的表</td></tr><tr><td align="center">Non_unique</td><td align="center">表示索引非唯一，1代表非唯一索引，0代表唯一索引，意思就是该索引是不是唯一索引</td></tr><tr><td align="center">Key_name</td><td align="center">索引名称</td></tr><tr><td align="center">Seq_in_index</td><td align="center">表示该字段在索引中的位置，单列索引的话该值为1，组合索引为每个字段在索引定义中的顺序(只需要知道单列索引该值就为1，组合索引为别的)</td></tr><tr><td align="center">Column_name</td><td align="center">表示定义索引的列字段</td></tr><tr><td align="center">Sub_part</td><td align="center">表示索引的长度</td></tr><tr><td align="center">Null</td><td align="center">表示该字段是否能为空值</td></tr><tr><td align="center">Index_type</td><td align="center">表示索引类型</td></tr><tr><td align="center">5. Educoder代码</td><td align="center"></td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">1.</span>创建名为pk_student的主键索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>    stu_id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    sex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    classes <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    grade <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-keyword">primary</span> key(stu_id)<br>);<br><br>#<span class="hljs-number">2.</span>创建名为idx_age的普通索引<br><span class="hljs-keyword">create</span> index idx_age <span class="hljs-keyword">on</span> student(age);<br><br>#<span class="hljs-number">3.</span>创建名为uniq_classes的唯一索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index uniq_classes <span class="hljs-keyword">on</span> student(classes); <br><br>#<span class="hljs-number">4.</span>创建名为idx_group的组合索引<br><span class="hljs-keyword">create</span> index idx_group <span class="hljs-keyword">on</span> student(name,sex,grade);<br><br></code></pre></td></tr></table></figure><h2 id="2-3-分页和索引"><a href="#2-3-分页和索引" class="headerlink" title="2.3 分页和索引"></a>2.3 分页和索引</h2><h3 id="2-3-1-MySQL分页查询"><a href="#2-3-1-MySQL分页查询" class="headerlink" title="2.3.1 MySQL分页查询"></a>2.3.1 MySQL分页查询</h3><ol><li><p>什么是分页查询<br> 当一个表中有很多符合查询条件的数据的时候，我们往往不需要把他们全部一次性取出来，那样对查询效率或者服务器性能来说都会是一个极大的挑战:例如最简单的商城，假设商城中有一万个数据，但我们在前端可能只会每次看到一页10个左右的数据，当我们浏览完这十个商品后，点击下一页浏览其他的商品，这样的分页浏览，对实际存储商品数据的 MySQL 数据库来说，实际上就是使用了 MySQL 的分页查询功能。</p><p> 那么我们该怎么实现分页查询呢？</p></li><li><p>limit 和 offset 实现的分页查询<br> limit在之前的学习中应该有学习到，它可以返回符合条件的<code>limit</code>条数据：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p> 输出： 检索记录行符合条件的10条数据</p><p> 那么我们也可以利用<code>limit</code>和<code>offset</code>来进行分页查询:</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">10</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p> 输出：检索记录行符合条件的11-20条数据</p><p> <code>limit</code>之后的数字代表偏移量，<code>offset</code>代表返回记录的最大值，可以通俗的理解为，从<code>table</code>中取出第<code>limit+1</code>行到<code>limit+offset+1</code>行数据( MySQL 偏移值从0开始计算)。</p><p> 在实际使用中，我们可以直接把offset直接省略掉：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">10</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p> 该语句效果与带<code>offset</code>实际上是一模一样的。</p><p> 通过分页查询，我们可以精确的定位到行数直接取出符合条件的多条数据，但是这也同样存在着性能问题。</p></li><li><p>大数据量下分页查询优化</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">100</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">1000</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">10000</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">100000</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; limit <span class="hljs-number">1000000</span>,<span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p> 以上语句在实际使用中实际上查询速度会是越来越慢的，这是因为分页查询方式会从数据库第一条记录开始扫描，所以越往后，查询速度越慢，而且查询的数据越多，也会拖慢总查询速度。</p><p> 如果可以直接定位到偏移量所在记录，那么查询速度肯定能得到一个巨大的提升，所以可以考虑添加一个嵌套子查询，先查询到偏移量位置，再进行分页：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot; <span class="hljs-keyword">and</span> <br>id<span class="hljs-operator">&gt;=</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx<span class="hljs-operator">=</span>&quot;xxx&quot;limit <span class="hljs-number">100000</span>,<span class="hljs-number">1</span>)<br>limit <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">1.</span>分页查询<br><span class="hljs-keyword">select</span> prod_id <span class="hljs-keyword">from</span> products limit <span class="hljs-number">5</span>,<span class="hljs-number">5</span>;<br><br>#<span class="hljs-number">2.</span>用子查询优化分页查询语句<br><span class="hljs-keyword">select</span> prod_id <span class="hljs-keyword">from</span> products<br><span class="hljs-keyword">where</span> prod_id<span class="hljs-operator">&gt;=</span>(<br>    <span class="hljs-keyword">select</span> prod_id <span class="hljs-keyword">from</span> products<br>    limit <span class="hljs-number">10</span>,<span class="hljs-number">1</span><br>) limit <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-3-2-索引（单列索引）"><a href="#2-3-2-索引（单列索引）" class="headerlink" title="2.3.2 索引（单列索引）"></a>2.3.2 索引（单列索引）</h3><ol><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    score <span class="hljs-type">int</span>(<span class="hljs-number">10</span>),<br>    <span class="hljs-keyword">primary</span> key(id)<br>);<br><br>#<span class="hljs-number">2.</span>对name建立唯一索引<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index name_index <span class="hljs-keyword">on</span> student(name);<br><br>#<span class="hljs-number">3.</span>对score建立普通索引<br><span class="hljs-keyword">create</span> index score_index <span class="hljs-keyword">on</span> student(score);<br><br><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-3-3-索引（组合索引）"><a href="#2-3-3-索引（组合索引）" class="headerlink" title="2.3.3 索引（组合索引）"></a>2.3.3 索引（组合索引）</h3><ol><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">1.</span>增加组合索引<br><span class="hljs-keyword">create</span> index name_city_score <span class="hljs-keyword">on</span> person(name,age,address);<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-4-存储过程"><a href="#2-4-存储过程" class="headerlink" title="2.4 存储过程"></a>2.4 存储过程</h2><h3 id="2-4-1-存储过程"><a href="#2-4-1-存储过程" class="headerlink" title="2.4.1 存储过程"></a>2.4.1 存储过程</h3><ol><li><p>存储过程的定义<br> <strong>存储过程</strong>（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。</p><p> 存储过程是为了完成特定功能的 SQL 语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数（需要时）来调用执行。</p><p> 存储过程思想上很简单，就是数据库 SQL 语言层面的代码<strong>封装与重用</strong>。</p><p> 简单的说存储过程就是具有名字的一段代码，用来完成一个特定的功能。</p></li><li><p>存储过程的创建和查询<br> 创建存储过程：<code>create procedure 存储过程名(参数)</code> </p><ul><li>下面我们来创建第一个存储过程</li></ul><p> 每个存储的程序都包含一个由 SQL 语句组成的主体。此语句可能是由以分号（;）字符分隔的多个语句组成的复合语句。例如：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc1()<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><br> 在命令行客户端中，如果有一行命令以分号结束，那么回车后，MySQL 将会执行该命令，但在创建存储过程中我们并不希望 MySQL 这么做。</p><p> MySQL 本身将分号识别为语句分隔符，因此必须临时重新定义分隔符以使 MySQL 将整个存储的程序定义传递给服务器。</p><p> 要重新定义 MySQL 分隔符，请使用该<code>delimiter</code>命令。使用<code>delimiter</code>首先将结束符定义为&#x2F;&#x2F;，完成创建存储过程后，使用&#x2F;&#x2F;表示结束，然后将分隔符重新设置为分号（;）：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">DELIMITER <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> proc1()<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>DELIMITER ;<br></code></pre></td></tr></table></figure><br> 注意：&#x2F;也可以换成其他符号，例如$;</p><ul><li>执行存储过程：<code>call 存储过程名</code><br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.4.1-1.png"></li><li>创建带有参数的存储过程 存储过程的参数有三种：<ul><li><code>IN</code>：输入参数，也是默认模式，表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回；</li><li><code>OUT</code>：输出参数，该值可在存储过程内部被改变，并可返回；</li><li><code>INOUT</code>：输入输出参数，调用时指定，并且可被改变和返回。<br> <code>IN</code>参数示例：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.4.1-2.png"><br> <code>OUT</code>参数示例：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.4.1-3.png"><br> <code>INOUT</code>参数示例：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.4.1-4.png"></li></ul></li></ul></li><li><p>存储过程的查询和删除<br> 我们如何在数据库中查询我们已经创建过的存储过程呢：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">PROCEDURE</span> STATUS <span class="hljs-keyword">WHERE</span> db<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库名&#x27;</span>;<br></code></pre></td></tr></table></figure><p> 查看存储过程的详细定义信息：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 数据库.存储过程名;<br></code></pre></td></tr></table></figure><p> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.4.1-5.png"><br> 当我们不再需要某个存储过程时，我们可以使用：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> [IF <span class="hljs-keyword">EXISTS</span>] 数据库名.存储过程名;<br></code></pre></td></tr></table></figure><p> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.4.1-6.png"></p></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> GetCustomerLevel(<span class="hljs-keyword">in</span> p_customNumber <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<span class="hljs-keyword">out</span> p_customerLevel <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">declare</span> creditlim <span class="hljs-type">int</span>(<span class="hljs-number">11</span>);<br>    <span class="hljs-keyword">select</span> creditlimit <span class="hljs-keyword">into</span> creditlim <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> customerNumber<span class="hljs-operator">=</span>p_customNumber;<br>    if creditlim<span class="hljs-operator">&gt;</span><span class="hljs-number">10000</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">set</span> p_customerLevel<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PLATINUM&#x27;</span>;<br>    elseif creditlim<span class="hljs-operator">&gt;=</span><span class="hljs-number">5000</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">set</span> p_customerLevel<span class="hljs-operator">=</span><span class="hljs-string">&#x27;GOLD&#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">set</span> p_customerLevel<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SILVER&#x27;</span>;<br>    <span class="hljs-keyword">end</span> if;<br>    <span class="hljs-keyword">select</span> p_customNumber <span class="hljs-keyword">as</span> customerNumber,p_customerLevel;<br><span class="hljs-keyword">end</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span><br>delimiter ;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-5-事务"><a href="#2-5-事务" class="headerlink" title="2.5 事务"></a>2.5 事务</h2><h3 id="2-5-1-事务"><a href="#2-5-1-事务" class="headerlink" title="2.5.1 事务"></a>2.5.1 事务</h3><ol><li><p>什么是事务<br> 可以把一系列要执行的操作称为<strong>事务</strong>，而事务管理就是管理这些操作要么完全执行，要么完全不执行。</p><p> 经典的事务举例：A要给B转钱，首先A的钱减少了，但是突然的数据库断电了，导致无法给B加钱，然后由于丢失数据，B不承认收到A的钱；在这里事务就是确保加钱和减钱两个都完全执行或完全不执行，如果加钱失败，那么不会发生减钱。</p><p> 事务管理的意义：<strong>保证数据操作的完整性</strong>；</p><p> 事务的特性；</p><ul><li><p>原子性：事务的整个操作是一个整体，不可以分割，要么全部成功，要么全部失败；</p></li><li><p>一致性：事务操作的前后，数据表中的数据没有变化（按示例中解释为A转钱给B的前后两个人钱的总金额不会改变）；</p></li><li><p>隔离性：事务操作是相互隔离不受影响的；</p></li><li><p>持久性：数据一旦提交，不可改变，永久的改变数据表数据</p></li></ul></li><li><p>事务的开启与提交<br> 在 MySQL 命令行的默认下，事务采用<strong>自动提交</strong>（autocommit&#x3D;1）模式。意味着，当你执行一个修改sql语句，MySQL会立刻更新存储到磁盘中。也就是会立马执行<code>commit</code>操作。<br> 因此开启一个手动事务必须使用<code>begin</code>，<code>start transaction</code>或者<code>set autocommit=0</code>：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span>;<br>#或者<br><span class="hljs-keyword">start</span> TRANSACTION;<br>#或者<br><span class="hljs-keyword">set</span> autocommit<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p> <code>commit</code>表示提交事务，即提交事务的所有操作。具体地说，就是将事务中所有对数据库的更新写回到磁盘上的物理数据库中，事务正常结束。<br> 提交事务也有对应的三种方式：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span>;<br>#或者<br><span class="hljs-keyword">commit</span> TRANSACTION;<br>#或者<br><span class="hljs-keyword">commit</span> WORK;<br></code></pre></td></tr></table></figure><p> 提交事务，意味着将事务开始以来所执行的所有数据修改成为数据库的永久部分，因此也标志着一个事务的结束。一旦执行了该命令，将不能回滚事务。只有在所有修改都准备好提交给数据库时，才执行这一操作。<br> 下面使用两个连接举例说明：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.5.1-1.png"><br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.5.1-2.png"></p></li><li><p>回滚事务<br> <code>rollback</code>表示事务回滚，即在事务运行的过程中发生了某种故障，事务不能继续执行，系统将事务中对数据库的所有已完成的操作（对数据库的更新操作）全部撤销，回滚到事务开始时的状态，同时，系统将释放由事务控制的资源。因此，这条语句也标志着事务的结束。<br> 示例：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.5.1-3.png"></p></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改存储过程 ———— 向 t_emp 表中插入数据（注意请勿修改提供的代码框架） <br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">procedure</span> if <span class="hljs-keyword">exists</span> mydb.proc_insert;<br>delimiter $$<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> proc_insert()<br><span class="hljs-keyword">Begin</span> <br> <span class="hljs-keyword">declare</span> err <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">declare</span> continue handler <span class="hljs-keyword">for</span> <span class="hljs-keyword">sqlexception</span> <span class="hljs-keyword">set</span> err<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br> #开启事务<br> <span class="hljs-keyword">start</span> transaction ;<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_emp <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-number">302</span>,<span class="hljs-number">4800</span>);<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_emp <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;Tony&#x27;</span>,<span class="hljs-number">302</span>,<span class="hljs-number">5900</span>);<br> <span class="hljs-keyword">update</span> t_emp <span class="hljs-keyword">set</span> salary<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br> <span class="hljs-keyword">update</span> t_emp <span class="hljs-keyword">set</span> salery<span class="hljs-operator">=</span><span class="hljs-number">8000</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br> #事务提交<br>    if err<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">rollback</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">commit</span>;<br>    <span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">END</span> $$<br>delimiter ;<br><br>#<span class="hljs-number">1.</span>向 t_emp 表中插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_emp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Nancy&#x27;</span>,<span class="hljs-number">301</span>,<span class="hljs-number">2300</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_emp <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Tod&#x27;</span>,<span class="hljs-number">303</span>,<span class="hljs-number">5600</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_emp <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Carly&#x27;</span>,<span class="hljs-number">301</span>,<span class="hljs-number">3200</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-6-并发控制"><a href="#2-6-并发控制" class="headerlink" title="2.6 并发控制"></a>2.6 并发控制</h2><h3 id="2-6-1-表锁"><a href="#2-6-1-表锁" class="headerlink" title="2.6.1 表锁"></a>2.6.1 表锁</h3><ol><li><p>MySQL存储引擎<br> 引擎：数据存在数据库中不同的格式和方法。<br> MySQL最常用引擎：<code>MyISAM</code>和<code>InnoDB</code>，在MySQL 5.5.5以前，默认的存储引擎为<code>MyISAM</code>，之后版本默认为<code>InnoDB</code>。<code>InnoDB</code>对事物完整性更好以及有更高的并发性，下面了解一下他们之间的区别：</p><table><thead><tr><th align="center">对比项</th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="center">主外键</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">事务</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">行表锁</td><td align="center">锁。操作一条记录也会锁住整个表</td><td align="center">行锁。操作时只锁某一行</td></tr><tr><td align="center">缓存</td><td align="center">只缓存索引，不缓存真实数据</td><td align="center">不仅缓存索引，还缓存真实数据</td></tr><tr><td align="center">表空间</td><td align="center">小</td><td align="center">大</td></tr><tr><td align="center">关注点</td><td align="center">性能</td><td align="center">事务</td></tr><tr><td align="center">默认安装</td><td align="center">是</td><td align="center">是</td></tr></tbody></table></li><li><p>锁机制<br> 问：锁是什么，有什么用？<br> 答：锁的主要作用是管理共享资源的并发访问，锁可以用于实现事务的隔离。<br> 问：为什么要加锁？<br> 答：为了避免多个事务同时操作数据库导致数据异常，一般会通过锁机制解决。<br> 锁的分类：</p><ul><li>从对数据操作的类型（读&#x2F;写）分类：共享锁（读锁）、排它锁（写锁）；</li><li>从对数据操作的粒度分：表锁、行锁。<br> 下面用一张图说明所之间的关系：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.1-1.png"><br> <strong>加锁原则</strong>：对于MySQL的InnoDB引擎来说，insert、update、delete等操作，会自动给涉及的数据加排他锁；对于一般的select语句，InnoDB不会加任何锁，但在事务可以通过指定SQL语句给显示加共享锁或排他锁。</li></ul></li><li><p>表锁<br> 偏向<code>MyISAM</code>存储引擎，开销小，加锁快，无死锁，锁定粒度大，发送锁冲突的概率最高，并发度最低。</p></li><li><p>乐观锁和悲观锁的概念<br> 乐观锁是指操作数据库时（更新操作），想法很乐观，认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了。<br> 悲观锁就是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，因此悲观锁需要耗费较多的时间。<br> 悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。<br> 说到这里，由悲观锁涉及到的另外两个锁概念就出来了，它们就是读锁与写锁。下面就让我们一起来学习表锁如何添加读写锁。</p></li><li><p>如何给表添加读写锁<br> 为什么要给表添加锁呢？<br> 不加锁，若同事两个人修改同一张表的数据，当再次查询时，其中一个总会发现莫名其妙表数据被修改了。因此我们需要添加锁。<br> 在给表添加锁之前，我们首先要创建一张使用<code>MyISAM</code>存储引擎的mylock表：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> mylock(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>)engine myisam;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> mylock(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;a&#x27;</span>),(<span class="hljs-string">&#x27;b&#x27;</span>),(<span class="hljs-string">&#x27;c&#x27;</span>),(<span class="hljs-string">&#x27;d&#x27;</span>),(<span class="hljs-string">&#x27;e&#x27;</span>);<br></code></pre></td></tr></table></figure><p> 我们通过<code>show open tables</code>查看数据库中有没有加锁的表：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.1-2.png"><br> 查询结果中In_use列中值全为0，说明没有表被锁，我们手动给表增加锁：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">lock <span class="hljs-keyword">table</span> 表名 read(write),表名<span class="hljs-number">2</span> read(write)，其他；<br></code></pre></td></tr></table></figure><p> 下面给数据库中的<code>account</code>表上写锁，给<code>mylock</code>上读锁:<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.1-3.png"><br> 发现In_use均为1，那么要怎么解锁呢？<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.1-4.png"><br> 下面我们具体来看添加锁的作用：<br> ① 添加读锁后的特征：多个连接对于同一数据都能访问，但是只能读不能修改，要想修改除非开启锁的连接将锁关闭。<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.1-5.gif"><br> 但是这种方式会是性能变的很慢，当我们还有多个连接也在等待修改时，会消耗很多时间。<br> ② 添加写锁后的特征：多个连接对于同一数据不能同时访问，但加锁的连接中可以更新表数据，另一个连接要想访问数据，必须解锁。<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.1-6.gif"></p></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">78</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Lucy&#x27;</span>,<span class="hljs-number">97</span>,<span class="hljs-number">95</span>);<br>lock <span class="hljs-keyword">table</span> student read;<br><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> math<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">where</span> stu_id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br>unlock tables;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-6-2-事务隔离级别"><a href="#2-6-2-事务隔离级别" class="headerlink" title="2.6.2 事务隔离级别"></a>2.6.2 事务隔离级别</h3><ol><li><p>事务并发下出现的问题<br> 通常事务并发会出现几种现象：1.脏读；2.不可重复读；3.幻读。</p><ul><li>脏读<br> 一个事务 A 读取了另一个并行事务 B 未最终提交的写数据, 那事务A的这次读取就是脏读。<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.2-1.png"></li><li>不可重复读<br> 假设“脏读”问题完全解决了，那就意味着事务中每次读取到的数据都是“持久性”的数据（被别的事务最终“提交&#x2F;回滚”完成后的数据）。<br> 但是解决了脏读问题, 只是能保证你在事务中每次读到的数据都是持久性的数据而已!<br> 如果在 一个事务 中多次读取同一个数据，正好在两次读取之间，另外一个事务确实已经完成了对该数据的修改并提交，那问题就来了，可能会出现 多次读取结果不一致 的现象，这种现象也就被称为不可重复读：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.2-2.png"></li><li>幻读<br> 事务 A 在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时事务 B 执行了新增数据的操作并提交后，这个时候事务 A 读取的数据总量和之前统计的不一样，就像产生了幻觉一样，平白无故的多了几条数据，这种现象就称为幻读：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.2-3.png"></li></ul></li><li><p>事务隔离级别<br> 针对上面所出现的问题，数据库提出了对应的解决方案，就是事务的隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读（Read uncommitted）</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>已提交读（Read committed）</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复度（Repeatable read）</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>可串行化（Serializable）</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><p> 未提交读：就是一个事务可以读取另一个未提交事务的数据。<br> 已提交读：就是一个事务要等另一个事务提交后才能读取数据。（ O\fracle 数据库的默认级别）<br> 可重复读：就是在开始读取数据（事务开启）时，不再允许修改操作，也是 MySQL 数据库的默认隔离级别。<br> 可串行化：意思是说这个事务执行的时候不允许别的事务 并发写 操作的执行。这是事务隔离的最高级别，虽然最安全最省心，但是效率太低，一般不会用。</p><ol><li>查询事务级别<br> 查询事务级别的 SQL如下： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@tx_isolation</span>;<br></code></pre></td></tr></table></figure> 例如，查询 MySQL 的默认级别：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.2-4.png"></li><li>修改数据库的事务级别<br> 事务级别是可以被修改了，那么修改的 SQL 如下： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL 事务级别；<br></code></pre></td></tr></table></figure> 例如，我们将 MySQL 的事务级别修改成未提交读：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.2-5.png"></li></ol></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">1.</span>修改隔离级别<br><span class="hljs-keyword">set</span> session transaction isolation level read uncommitted;<br>#<span class="hljs-number">2.</span>查询隔离级别<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@tx_isolation</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-6-3-行锁"><a href="#2-6-3-行锁" class="headerlink" title="2.6.3 行锁"></a>2.6.3 行锁</h3><ol><li>丢失更新的定义及产生原因<br> 如果两事务都在对数据进行修改则会导致另外的问题：丢失更新。<br> 丢失更新就是两个不同的事务在某一时刻对同一数据进行读取后，先后进行修改，导致第一次操作数据丢失：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.3-1.gif"><br> 该问题和之前事务并发出现的几个问题需要区分开, 因为解决方案不是一类！此类问题，只能用最高隔离级别 Serializable 或者手动使用锁来解决，本关我们就一起学习如何使用锁来解决。</li><li>如何解决丢失更新问题<br> 由第一关介绍存储引擎后，我们知道 InnoDB 存储引擎才支持事务，因此我们使用 行锁 来解决，我们还介绍了行锁包括悲观锁和乐观锁，悲观锁包含了读锁和写锁，下面我们就使用悲观锁的两种方式来解决。<ol><li><p>使用共享锁<br> 共享锁（S），又称为读锁，获得共享锁之后，针对同一份数据，多个读操作可以同时进行，互不影响，但无法修改和删除数据。<br> 例如：我在客户端 A 给数据 C 添加了共享锁，此时我在客户端 B 只能添加共享锁进行查看，没有修改的权利，如果我想要在客户端 B 进行修改，我只能在 A 处commit才能进行修改。<br> 在查询语句后面增加<code>LOCK IN SHARE MODE</code>，MySQL 会对查询结果中的每行都加共享锁：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ... lock <span class="hljs-keyword">in</span> share mode;<br></code></pre></td></tr></table></figure><p> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.3-2.gif"></p></li><li><p>使用派他锁<br> 排他锁（X），又称为写锁、独占锁。获得排他锁后，在当前写操作没有完成前，它会阻断其他写锁和读锁。<br> 排它锁就是我在客户端 A 给数据 C 添加了排它锁，那么我在客户端 B 只能在客户端 A commit之后，才能select数据。<br> 换句话说，只要我在客户端 B 用锁进行了查询，那我我都需要等待 A commit之后，如果此时我客户端 B 不加锁，我是可以查询到的。<br> 添加排它锁的方式：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ... <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;<br></code></pre></td></tr></table></figure><p> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.3-3.gif"></p></li></ol></li><li>Educoder截图<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.3-a.png"><br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.6.3-b.png"></li></ol><h2 id="2-7-行列转换"><a href="#2-7-行列转换" class="headerlink" title="2.7 行列转换"></a>2.7 行列转换</h2><h3 id="2-7-1-使用case语句实现行列转换"><a href="#2-7-1-使用case语句实现行列转换" class="headerlink" title="2.7.1 使用case语句实现行列转换"></a>2.7.1 使用case语句实现行列转换</h3><ol><li>统计打怪数问题<br> 观察下面数据，我们需要将左边<code>hunt</code>表中的信息转换成右边<code>info</code>表，那么我们应该如何编写SQL来实现呢？<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.1-1.png"></li><li>SQL分析<br> 现<code>hunt</code>表结构如下：<table><thead><tr><th align="center">字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">姓名</td></tr><tr><td align="center">kills</td><td align="center">打怪数</td></tr><tr><td align="center">要转换成右边<code>info</code>表格式，我们首先需要两个步骤：</td><td align="center"></td></tr></tbody></table><ul><li>数据汇总<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.1-2.png"></li><li>行转列<br> 现在我们得到的数据和最终数据还存在差异，那么我们要怎么进行转换呢？我们其实可以获取单独的每个人的打怪总数：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.1-3.png"><br> 那么我们只要能将三组数据合并成一组数据并按行的形式来显示，不就可以得到右边<code>info</code>表了吗。<br> 现在是不是都想到了使用<code>inner join</code>来将SQL进行连接，再将得到的<code>sum(kills)</code>字段名改成对应的名称就完美了。<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.1-4.png"><br> 注意：效果我们虽然达到了，但是同学们也都发现了使用这种方式来进行行转列是有缺点的。<br> 例如，我们的连接次数会随着<code>name</code>的增加而增加，用户数量越多我们需要连接的表也就越多，总的来说效率不高，且也会给我们编写SQL带来复杂性。</li></ul></li><li>SQL编写<br> 下面我们来看另外一种方式，相当于<code>inner join</code>来说使用<strong>CASE语句来进行行列转换会更加通用简洁</strong>，下面我们就一起来看看如何使用CASE语句转换：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.1-5.png"><br> 那么为什么要使用<code>SUM</code>聚合函数呢？那就来看看我们去掉<code>SUM</code>后的结果：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.1-6.png"><br> 看了上面的查询结果，应该会猜到原因，执行SQL时，查询表中第一条记录时，<code>name</code>为孙悟空，<code>kills</code>为20，然后就被<code>case</code>语句转成<code>kills</code>即20。那么后面两个<code>case</code>因为在这一行中没被匹配到，因此都输出<code>NULL</code>。<br> 或者我们还可以使用<code>IF</code>函数：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.1-7.png"></li><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s_name,<br><span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> c_name <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;语文&#x27;</span> <span class="hljs-keyword">then</span> s_score <span class="hljs-keyword">end</span>) <span class="hljs-string">&#x27;语文&#x27;</span>,<br><span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> c_name <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;数学&#x27;</span> <span class="hljs-keyword">then</span> s_score <span class="hljs-keyword">end</span>) <span class="hljs-string">&#x27;数学&#x27;</span>,<br><span class="hljs-built_in">sum</span>(<span class="hljs-keyword">case</span> c_name <span class="hljs-keyword">when</span> <span class="hljs-string">&#x27;英语&#x27;</span> <span class="hljs-keyword">then</span> s_score <span class="hljs-keyword">end</span>) <span class="hljs-string">&#x27;英语&#x27;</span><br><span class="hljs-keyword">from</span> score<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> s_name;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-7-2-序列化表的方法实现列转行（一）"><a href="#2-7-2-序列化表的方法实现列转行（一）" class="headerlink" title="2.7.2 序列化表的方法实现列转行（一）"></a>2.7.2 序列化表的方法实现列转行（一）</h3><ol><li><p>问题<br> 列转行有两种情况，一种是源数据只有一列并通过某种符号分隔的字符串，我们需要将字符串分成多行显示；另一种是表本身是多列的数据，我们需要转成多行。</p></li><li><p>情景一<br> 首先我们来看第一种情况，有上表转换成下表：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.2-1.png"></p></li><li><p>SQL分析及编写<br> 这种类型问题我们如何进行列转行呢？可以利用序列化表来解决。所谓序列表，顾名思义就是存着序列号的一张表（表中的数量需要和你），如下<code>sequence</code>表：</p><table><thead><tr><th align="center">id</th></tr></thead><tbody><tr><td align="center">1</td></tr><tr><td align="center">2</td></tr><tr><td align="center">3</td></tr><tr><td align="center">…</td></tr></tbody></table><p> 下面就是利用序列化实现的SQL：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.2-2.png"></p><ul><li>首先我们来看看子查询做了些什么：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.2-3.png"><br> 这个查询的目的很简单，就是通过计算<code>mobile</code>列中,的个数+1来得到有多少个电话号码。</li><li>使用序列化表<code>inner join</code>来对上面结果集进行关联，注意关联条件<code>a.id&lt;=b.size</code>，也就对应每个<code>user_name</code>的<code>size</code>行数，例如不进行数据的截取，直接输出的结果如下：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.2-4.png"></li><li>那么得到如下数据后，最后的结果输出就简单了，只要进行字符串的截取我们就大功告成了。</li></ul></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> b.name,<br>substring_index(replace(<span class="hljs-built_in">substring</span>(substring_index(b.scores,<span class="hljs-string">&#x27;,&#x27;</span>,s.id),<span class="hljs-keyword">char_length</span>(substring_index(b.scores,<span class="hljs-string">&#x27;,&#x27;</span>,s.id<span class="hljs-number">-1</span>))<span class="hljs-operator">+</span><span class="hljs-number">1</span>),<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>),<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-number">1</span>) course,<br>substring_index(replace(<span class="hljs-built_in">substring</span>(substring_index(b.scores,<span class="hljs-string">&#x27;,&#x27;</span>,s.id),<span class="hljs-keyword">char_length</span>(substring_index(b.scores,<span class="hljs-string">&#x27;,&#x27;</span>,s.id<span class="hljs-number">-1</span>))<span class="hljs-operator">+</span><span class="hljs-number">1</span>),<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>),<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-number">-1</span>) score<br><span class="hljs-keyword">from</span> tb_sequence s <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> <br>(<span class="hljs-keyword">select</span> name,scores <span class="hljs-keyword">as</span> course,scores,length(scores)<span class="hljs-operator">-</span>length(replace(scores,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>))<span class="hljs-operator">+</span><span class="hljs-number">1</span> size<br><span class="hljs-keyword">from</span> tb_score) b <br><span class="hljs-keyword">on</span> s.id <span class="hljs-operator">&lt;=</span> b.size;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-7-3-序列化表的方法实现列转行（二）"><a href="#2-7-3-序列化表的方法实现列转行（二）" class="headerlink" title="2.7.3 序列化表的方法实现列转行（二）"></a>2.7.3 序列化表的方法实现列转行（二）</h3><ol><li>情景二<br> 接着上一章节，现在我们来看第二种情况，表中本身就有多列数据，需要你将其转为多行：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-1.png"></li><li>SQL分析<br> 首先我们将问题简单化一下，若我们不需要这么多列，只需要将其中某列数据转成行的形式，下面以取出每个人<code>mobile1</code>的电话为例，则SQL如下：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-2.png"><br> 但是这个显示中我们并不能看出是<code>mobile1</code>的值，为了和所需更接近，我们需要再添加一列：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-3.png"><br> 以此类推，我们同样可以将<code>mobile2</code>和<code>mobile3</code>列表，那么我们是不是只需要将这三组数据成一个就能实现列转行的转换了，我们就使用<code>union</code>来进行连接为了达到和我们预期的结果一样，我们通过姓名排序得到最终结果：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-4.png"><br> 观察SQL我们可能都发现了，使用<code>union</code>的方式实现列转行并不太方便，如果还有更多的<code>mobilen</code>的话，我们所需要连接的表就会随着增加，长度不好控制。    </li><li>SQL编写<br> 那么我们是否可以使用上一章节中提到过的序列化表来实现呢？显然是可以的，下面我们就一起来使用序列化表的方式实现一行转三行。<ul><li>首先，我们需要通过序列表进行笛卡尔积连接，这里我们只需要将一行转成三行，因此使用id&lt;&#x3D;3即可，为了使大家更清晰观察数据我们通过姓名进行排序；<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-5.png"></li><li>但是上面表中的三条数据我们对每个用户都只需要其中的一条，然后进行组装就行，那么这个时候就要用到我们的<code>CASE</code>语句了；<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-6.png"></li><li>那么接下来我们就可以使用<code>coalesce()</code>函数来只取非空值；<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-7.png"></li><li>此时和我们所要的结果就比较相近了，只差一列数据，我们仍使用<code>CASE</code>语句来进行最后一列的SQL编写。<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.7.3-8.png"></li></ul></li><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> s_name,<br><span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> a.id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;语文&#x27;</span> <br><span class="hljs-keyword">when</span> a.id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;英语&#x27;</span> <br><span class="hljs-keyword">when</span> a.id<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;数学&#x27;</span> <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">as</span> s_cource,<br><span class="hljs-built_in">coalesce</span>(<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> a.id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">then</span> chinese <span class="hljs-keyword">end</span>,<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> a.id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">then</span> english <span class="hljs-keyword">end</span>,<br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> a.id<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">then</span> math <span class="hljs-keyword">end</span><br>) <span class="hljs-keyword">as</span> s_score<br><span class="hljs-keyword">from</span> tb_score <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tb_sequence a <span class="hljs-keyword">where</span> a.id<span class="hljs-operator">&lt;=</span><span class="hljs-number">3</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> s_name;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-8-删除重复数据"><a href="#2-8-删除重复数据" class="headerlink" title="2.8 删除重复数据"></a>2.8 删除重复数据</h2><h3 id="2-8-1-利用主键删除"><a href="#2-8-1-利用主键删除" class="headerlink" title="2.8.1 利用主键删除"></a>2.8.1 利用主键删除</h3><ol><li>重复数据<br> 下面我们来看一组数据，users表结构及数据如下：<table><thead><tr><th align="center">id（主键）</th><th align="center">user_name</th><th align="center">user_pwd</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">user1</td><td align="center">123</td></tr><tr><td align="center">2</td><td align="center">user2</td><td align="center">456</td></tr><tr><td align="center">3</td><td align="center">user3</td><td align="center">789</td></tr><tr><td align="center">4</td><td align="center">user1</td><td align="center">111</td></tr><tr><td align="center">5</td><td align="center">user1</td><td align="center">222</td></tr><tr><td align="center">6</td><td align="center">user1</td><td align="center">333</td></tr></tbody></table> 上面<code>users</code>表中出现了相同用户名的重复数据，我们需要将其重复的删除，首先我们将重复用户查出来：<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.8.1-1.png"><br> 找到重复的用户后我们要怎么删除呢？又要怎么选择保留的数据呢？</li><li>解题思路<br> 假设我们要保留的数据为先注册的账号，我们可将思路拟定如下：<ul><li>确定了保留先注册的账号，也就等同保留的数据为id较小的，我们可利用 聚合函数 得到重复数据中的最小id用户；</li><li>使用表关联，将重复数据中最小id用户与源users表中的id进行对比，删除users表中id比重复数据中的最小id 大 的记录，删除后表中的数据就是先注册用户的数据了。</li></ul></li><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<br>        <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_name <span class="hljs-keyword">in</span>(<br>            <span class="hljs-keyword">select</span> user_name <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_name <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><br>        ) <span class="hljs-keyword">and</span> id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<br>            <span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(id) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> user_name <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><br>        ) <br>    ) <span class="hljs-keyword">as</span> user_copy<br>);<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-8-2-复杂重复数据删除"><a href="#2-8-2-复杂重复数据删除" class="headerlink" title="2.8.2 复杂重复数据删除"></a>2.8.2 复杂重复数据删除</h3><ol><li>重复数据<br> 下面我们继续看一组数据，仍用上一章节的<code>users</code>表，现在多一列<code>mobile</code>数据：<table><thead><tr><th align="center">id（主键）</th><th align="center">user_name</th><th align="center">user_pwd</th><th align="center">mobile</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">user1</td><td align="center">123</td><td align="center">18212345678,18201234567,18212345678</td></tr><tr><td align="center">2</td><td align="center">user2</td><td align="center">456</td><td align="center">18266666666,18288888888</td></tr><tr><td align="center">3</td><td align="center">user3</td><td align="center">789</td><td align="center">18268686868,18278787878,18268686868,18278787878</td></tr></tbody></table></li><li>解题思路<br> 遇到这种情况要将数据去重，我们的解题思路基本就可以拟定为把数据拆开后去重再将数据重新组合。<br> 下面我们细分成几个小步骤来看：<ul><li>统计mobile列中各用户的电话数量；<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.8.2-1.png"></li><li>拆分数据（连接序列化表）；<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.8.2-2.png"></li><li>截取数据；<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.8.2-3.png"></li><li>最后一步我们只需要将数据去重，然后再分组进行组合就大功告成了。</li></ul></li><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> users b<br><span class="hljs-keyword">JOIN</span> (<br>    <span class="hljs-keyword">SELECT</span> user_name,<br>        GROUP_CONCAT(<span class="hljs-keyword">DISTINCT</span> SUBSTRING_INDEX(SUBSTRING_INDEX(mobile, <span class="hljs-string">&#x27;,&#x27;</span>, t.id), <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-number">-1</span>)) <span class="hljs-keyword">AS</span> mobile<br>    <span class="hljs-keyword">FROM</span> (<br>        <span class="hljs-keyword">SELECT</span> user_name,<br>            mobile,<br>            LENGTH(CONCAT(mobile, <span class="hljs-string">&#x27;,&#x27;</span>)) <span class="hljs-operator">-</span> LENGTH(REPLACE(mobile, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-keyword">AS</span> size<br>        <span class="hljs-keyword">FROM</span> users<br>    ) a<br>    <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> tb_sequence t <span class="hljs-keyword">ON</span> a.size <span class="hljs-operator">&gt;=</span> t.id<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> a.user_name<br>) c <span class="hljs-keyword">ON</span> b.user_name <span class="hljs-operator">=</span> c.user_name<br><span class="hljs-keyword">SET</span> b.mobile <span class="hljs-operator">=</span> c.mobile;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-9-批量数据入库及检索"><a href="#2-9-批量数据入库及检索" class="headerlink" title="2.9 批量数据入库及检索"></a>2.9 批量数据入库及检索</h2><h3 id="2-9-1-MySQL数据库连接"><a href="#2-9-1-MySQL数据库连接" class="headerlink" title="2.9.1 MySQL数据库连接"></a>2.9.1 MySQL数据库连接</h3><ol><li><p>任务描述<br> <code>Python</code>可以通过<code>MySQLdb</code>库连接MySQL数据库，但<code>Python3</code>之后不再支持MySQLdb库，需要通过<code>pymysql</code>库连接。<br> <code>pymysql</code>通过<code>connect</code>方法连接数据库，如：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>,passwd=<span class="hljs-string">&#x27;123456&#x27;</span>,charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>相关知识<br> connect方法的参数含义如下：</p> <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">host：数据库主机名，默认是用本地主机<br>user：数据库登陆名，默认是当前用户<br>passwd：数据库登陆的密码，默认为空<br><span class="hljs-symbol">charset:</span>连接时的编码格式，要求与数据库的编码一致<br></code></pre></td></tr></table></figure><p> 在安装MySQL数据库环境时，会选择默认编码格式，建议选择<code>utf8</code>格式；若登录名或密码错误时，返回如下错误<br> <code>pymysql.err.OperationalError: (1045, &quot;Access denied for user &#39;a&#39;@&#39;localhost&#39; (using password: YES)&quot;)</code></p></li><li><p>Educoder代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,user=<span class="hljs-string">&#x27;root&#x27;</span>,passwd=<span class="hljs-string">&#x27;123123&#x27;</span>,charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-9-2-数据库与数据表创建"><a href="#2-9-2-数据库与数据表创建" class="headerlink" title="2.9.2 数据库与数据表创建"></a>2.9.2 数据库与数据表创建</h3><ol><li>任务描述<br> 在MySQL中创建属于自己的数据库，根据需求在库中创建相应的表，将数据存入表中，方便对数据的管理与查询。如汽车零售商将汽车信息存入数据库中方便管理，可创建数据库： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">cursor.execute(<span class="hljs-string">&#x27;create database carinfo&#x27;</span>)<br></code></pre></td></tr></table></figure> 与汽车相关的信息可能包括汽车购入信息和汽车出售信息，可以分别在carinfo库中建立对应的表： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">cursor.execute(<span class="hljs-string">&#x27;create table ininfo (indata data,inNum int, brand varchar(255))&#x27;</span>)<br>cursor.execute(<span class="hljs-string">&#x27;create table outinfo (outdata data,outNum int, brand varchar(255))&#x27;</span>)<br></code></pre></td></tr></table></figure> 本关任务是，创建enroll数据库，并在enroll创建nudt表。</li><li>相关知识<ol><li>获取游标<br> 前面已经介绍过如何获取数据库连接对象，但是不能在这个对象上直接对数据库进行操作， 还需要获取对应的操作游标才能进行数据库的操作： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor = conn.cursor()<br></code></pre></td></tr></table></figure> 游标是一种数据访问对象，可用于创建数据库和数据表，也可用于在表中迭代一组行或者向表中插入新行。</li><li>确定使用的数据库<br> MySQL中可能同时存在多个数据库，为了对指定的数据库进行操作，可使用： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dbName = 你的数据库名称<br>conn.select_db(dbName)<br></code></pre></td></tr></table></figure> 当然，如果在创建数据库连接对象时指定了连接的数据库时，就不需要再指定数据库对象： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dbName = 你的数据库名称<br>conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>,passwd=<span class="hljs-string">&#x27;123456&#x27;</span>,charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,db=dbName)<br></code></pre></td></tr></table></figure></li><li>数据表的创建<br> MySQL是使用SQL语句对数据库进行操作，创建表可使用： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tablename (字段名 字段属性，字段名 字段属性，……)<br></code></pre></td></tr></table></figure> MySQL支持的字段属性包括：</li><li>日期和时间数据类型。 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">data</span>：<span class="hljs-number">3</span>字节，日期，格式：<span class="hljs-number">2014</span>-<span class="hljs-number">09</span>-<span class="hljs-number">18</span><br><span class="hljs-attribute">time</span>：<span class="hljs-number">3</span>字节，时间，格式：<span class="hljs-number">08</span>:<span class="hljs-number">42</span>:<span class="hljs-number">30</span><br><span class="hljs-attribute">datetime</span>：<span class="hljs-number">8</span>字节，日期时间，格式：<span class="hljs-number">2014</span>-<span class="hljs-number">09</span>-<span class="hljs-number">18</span> <span class="hljs-number">08</span>:<span class="hljs-number">42</span>:<span class="hljs-number">30</span><br><span class="hljs-attribute">timestamp</span>：<span class="hljs-number">4</span>字节，自动存储记录修改的时间<br><span class="hljs-attribute">year</span>：<span class="hljs-number">1</span>字节，年份<br></code></pre></td></tr></table></figure></li><li>数值数据类型。 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tinyint</span>：<span class="hljs-number">1</span>字节，范围（-<span class="hljs-number">128</span>~<span class="hljs-number">127</span>）<br><span class="hljs-attribute">smallint</span>：<span class="hljs-number">2</span>字节，范围（-<span class="hljs-number">32768</span>~<span class="hljs-number">32767</span>）<br><span class="hljs-attribute">mediumint</span>：<span class="hljs-number">3</span>字节，范围（-<span class="hljs-number">8388608</span>~<span class="hljs-number">8388607</span>）<br><span class="hljs-attribute">int</span>： <span class="hljs-number">4</span>字节，范围（-<span class="hljs-number">2147483648</span>~<span class="hljs-number">2147483647</span>）<br><span class="hljs-attribute">bigint</span>：<span class="hljs-number">8</span>字节，范围（+-<span class="hljs-number">9</span>.<span class="hljs-number">22</span>*<span class="hljs-number">10</span>的<span class="hljs-number">18</span>次方）<br></code></pre></td></tr></table></figure></li><li>浮点型。 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">float</span><span class="hljs-params">(m, d)</span></span>：<span class="hljs-number">4</span>字节，单精度浮点型，m总个数，d小数位<br><span class="hljs-function"><span class="hljs-title">double</span><span class="hljs-params">(m, d)</span></span>：<span class="hljs-number">8</span>字节，双精度浮点型，m总个数，d小数位<br><span class="hljs-function"><span class="hljs-title">decimal</span><span class="hljs-params">(m, d)</span></span>：decimal是存储为字符串的浮点数<br></code></pre></td></tr></table></figure></li><li>字符串数据类型。 <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">char</span>(n)：固定长度，最多<span class="hljs-number">255</span>个字符<br><span class="hljs-attribute">varchar</span>(n)：可变长度，最多<span class="hljs-number">65535</span>个字符<br><span class="hljs-attribute">tinytext</span>：可变长度，最多<span class="hljs-number">255</span>个字符<br><span class="hljs-attribute">text</span>：可变长度，最多<span class="hljs-number">65535</span>个字符<br><span class="hljs-attribute">mediumtext</span>：可变长度，最多<span class="hljs-number">2</span>的<span class="hljs-number">24</span>次方-<span class="hljs-number">1</span>个字符<br><span class="hljs-attribute">longtext</span>：可变长度，最多<span class="hljs-number">2</span>的<span class="hljs-number">32</span>次方-<span class="hljs-number">1</span>个字符<br></code></pre></td></tr></table></figure></li></ol></li><li>Educoder代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 连接数据库，建立游标cursor</span><br><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>():<br>    conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&#x27;123123&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    cursor = conn.cursor()<br>    <span class="hljs-comment"># -----------Begin----------</span><br>    <span class="hljs-comment"># 创建enroll数据库</span><br>    cursor.execute(<span class="hljs-string">&#x27;create database enroll&#x27;</span>)<br>    conn.select_db(<span class="hljs-string">&#x27;enroll&#x27;</span>)<br>    <span class="hljs-comment"># 创建nudt数据表</span><br>    cursor.execute(<span class="hljs-string">&#x27;create table nudt(year int,province varchar(20),firstBatch int, gcMax int, gcMean int, xlMax int, xlMin int, xlMean int)&#x27;</span>)<br>    <span class="hljs-comment"># ------------End-----------</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-9-3-批量数据入库及检索"><a href="#2-9-3-批量数据入库及检索" class="headerlink" title="2.9.3 批量数据入库及检索"></a>2.9.3 批量数据入库及检索</h3><ol><li>任务描述<br> 数据表创建好之后，可以将数据存入表中方便之后对数据进行分析。SQL中插入语句为insert，如往ininfo表中存入汽车购入信息： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;insert into %s (indata, inNum, brand) values (&#x27;%s&#x27;, &#x27;%s&#x27;, &#x27;%s&#x27;)&quot; <span class="hljs-operator">%</span> (tablename, <span class="hljs-string">&#x27;2017-8-19&#x27;</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;Chevrolet&#x27;</span>)<br>cursor.execute(<span class="hljs-keyword">sql</span>)<br></code></pre></td></tr></table></figure> 数据插入后可以去数据库中查询，判断数据是否正确插入：   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;select * from %s&#x27;</span> <span class="hljs-operator">%</span> tablename<br>cursor.execute(<span class="hljs-keyword">sql</span>)<br>records <span class="hljs-operator">=</span> cursor.fetchall()<br></code></pre></td></tr></table></figure> 本关任务是，向nudt表中存入国防科技大学2014在各省的录取分数线以及最高分、最低分和平均分。</li><li>相关知识 <ol><li>格式化字符串<br> 插入数据时使用insert语句，需要指定每个字段的值，如： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sql = <span class="hljs-string">&quot;insert into %s (indata, inNum, brand) values (&#x27;%s&#x27;, &#x27;%s&#x27;, &#x27;%s&#x27;)&quot;</span> % (tablename, <span class="hljs-string">&#x27;2017-8-19&#x27;</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;Chevrolet&#x27;</span>)<br></code></pre></td></tr></table></figure> python中可以用<code>%</code>对字符串进行格式化操作，%s是优先用<code>str()</code>函数进行字符串转化，<code>%</code>左侧的字符串称为格式化字符串，右侧是希望格式化的值，格式化字符串的<code>%s</code>部分称为转换说明符，标记了需要插入转换值的位置</li><li>利用游标接收返回值<br> Python执行完select语句后可以从数据库中获取到数据，但需要执行fetchxxx语句后才能将数据取回本地进行操作。fetchxxx语句包括： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fetchall()：接收全部的返回结果行<br>fetchmany(size=<span class="hljs-literal">None</span>)：接收size条返回结果行<br>fetchone()：返回一条结果行<br></code></pre></td></tr></table></figure> 另外还可以用下面的方法移动游标： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scroll(value, mode=<span class="hljs-string">&#x27;relative&#x27;</span>)：指针移动value条<br></code></pre></td></tr></table></figure></li><li>事务提交与关闭连接<br> 在完成插入之后需要将插入事务提交，否则会导致相应的表死锁： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conn.commit()<br></code></pre></td></tr></table></figure> 在对数据库的所有操作完成之后，需要关闭与数据库之间的连接： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conn.close()<br></code></pre></td></tr></table></figure> 虽然不主动关闭连接也会过期，但是会较长时间占用mysql宝贵的连接资源。</li></ol></li><li>Educoder代码 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">year,province,firstBatch,gcMax,gcMin,gcMean,xlMax,xlMin,xlMean</span>):<br>    conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&#x27;123123&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    cursor = conn.cursor()<br>    conn.select_db(<span class="hljs-string">&#x27;enroll&#x27;</span>)<br>    <span class="hljs-comment"># -----------Begin----------</span><br>    <span class="hljs-comment"># 请在下面输入插入数据的语句，完成相应功能</span><br>    <span class="hljs-keyword">if</span> xlMax == <span class="hljs-string">&quot;NULL&quot;</span>:<br>        xlMax = <span class="hljs-number">0</span><br>        xlMin = <span class="hljs-number">0</span><br>        xlMean = <span class="hljs-number">0</span><br><br>    sql = <span class="hljs-string">f&quot;insert into nudt (year,province,firstBatch,gcMax,gcMin,gcMean,xlMax,xlMin,xlMean) values (&#x27;<span class="hljs-subst">&#123;year&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;province&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;firstBatch&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;gcMax&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;gcMin&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;gcMean&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;xlMax&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;xlMin&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;xlMean&#125;</span>&#x27;)&quot;</span><br>    cursor.execute(sql)<br>    <span class="hljs-comment"># ------------End-----------</span><br><br>    <span class="hljs-comment"># 提交数据到数据库</span><br>    conn.commit()<br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    cursor.close() <br>    conn.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">select</span>():<br>    conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&#x27;123123&#x27;</span>, charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    cursor = conn.cursor()<br>    conn.select_db(<span class="hljs-string">&#x27;enroll&#x27;</span>)<br>    <span class="hljs-comment"># -----------Begin----------</span><br>    <span class="hljs-comment"># 请在下面输入查询数据的语句，完成相应功能</span><br>    sql = <span class="hljs-string">&#x27;select * from nudt&#x27;</span><br>    cursor.execute(sql)<br>    <span class="hljs-comment"># 请在下面输入获取数据的语句，完成相应功能</span><br>    records = cursor.fetchall()<br>    <span class="hljs-comment"># ------------End-----------</span><br>    <span class="hljs-keyword">for</span> record <span class="hljs-keyword">in</span> records:<br>        record = <span class="hljs-built_in">list</span>(record)<br>        <span class="hljs-keyword">if</span> record[<span class="hljs-number">6</span>] == <span class="hljs-number">0</span>:<br>            record[<span class="hljs-number">6</span>] = record[<span class="hljs-number">7</span>] = record[<span class="hljs-number">8</span>] = <span class="hljs-literal">None</span><br>        record = <span class="hljs-built_in">tuple</span>(record)<br>        <span class="hljs-built_in">print</span>(record)<br><br>    <span class="hljs-comment"># 关闭数据库连接</span><br>    cursor.close() <br>    conn.close()<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-9-4-多表创建与连接查询"><a href="#2-9-4-多表创建与连接查询" class="headerlink" title="2.9.4 多表创建与连接查询"></a>2.9.4 多表创建与连接查询</h3><ol><li>任务描述<br> 在存储信息时可能出现不能将所有信息存入同一张表中的情况，如汽车购入记录和汽车出售记录，为了查询汽车剩余数量，就需要同时获取汽车购入记录及对应的出售记录。汽车购入记录中有一个字段为brand，汽车销售记录中同样有一个brand字段，则可通过该字段将两表关联起来，获取汽车剩余数量： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> A.brand, A.inNum <span class="hljs-operator">-</span> B.outNum <span class="hljs-keyword">from</span> ininfo A, outinfo B <span class="hljs-keyword">where</span> A.brand <span class="hljs-operator">=</span> B.brand<br></code></pre></td></tr></table></figure> 这种查询方式即为关联查询，brand为两表的共有字段。<br> 本关任务是，在enroll库中创建provincialEntryScore（各省分数线表），nudtTechScore（科大技术类分数线表），nudtMilScore（科大指挥类分数线表）三张表，往表中插入数据，并根据要求查询。</li><li>相关知识<ol><li>多表直接汇总<br> 在多表查询时，可直接将每张表中的数据全部取出汇总： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ininfo, outinfo<br>这种查询会使得表中的一条记录出现多次，如ininfo表中有两条记录a、b，outinfo表中有两条记录c、d，则查询结果为：<br></code></pre></td></tr></table></figure> a c<br> a d<br> b c<br> b d<br> 另外，这种查询方式会将ininfo，outinfo两张表中的全部字段取出汇总，上述查询语句得到的结果为： <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`indata`，`inNum`，`brand`，`outdata`，`outNum`，`brand`<br></code></pre></td></tr></table></figure> 当两张表没有共有字段时这种操作方式没问题，但是如果表与表之间有共有字段，如ininfo，outinfo表中的brand字段，这种查询方式会使结果中出现重复字段。</li><li>等值连接<br> 这种查询方式会将两张表中共有字段相同的记录连接前来输出，这种查询方式只适合于表与表之间有共有字段，即表与表之间存在关联。查询方式为： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ininfo A, outinfo B <span class="hljs-keyword">where</span> A.brand <span class="hljs-operator">=</span> B.brand<br></code></pre></td></tr></table></figure> 如ininfo中a的brand为Chevrolet，outinfo中b的brand为Chevrolet，则等值连接的结果为： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">a.indata，a.inNum，a.brand，b.indata，b.outNum，b.brand<br></code></pre></td></tr></table></figure> 这种查询方式同样存在共有字段多次输出的问题。</li><li>自然连接<br> 自然连接查询保证多表之间的共有字段只输出一次，如： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> A.brand, A.indata, A.inNum, B.outdata, B.outNum <span class="hljs-keyword">from</span> ininfo A, outinfo B<br></code></pre></td></tr></table></figure> 查询结果如下： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">a.brand， a.indata， a.inNum， b.outdata， b.outNum<br></code></pre></td></tr></table></figure></li></ol></li><li>Educoder代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">cursor</span>):<br>     <span class="hljs-comment"># -----------Begin----------</span><br>     <span class="hljs-comment"># 创建provincialEntryScore表</span><br>     sql = <span class="hljs-string">&quot;create table provincialEntryScore(year int, province varchar(100),entryScore int)&quot;</span><br>     cursor.execute(sql)<br>     <span class="hljs-comment"># 创建nudtTechScore表</span><br>     sql = <span class="hljs-string">&quot;create table nudtTechScore(year int,province varchar(100),techMax int,techMin int, techMean int)&quot;</span><br>     cursor.execute(sql)<br>     <span class="hljs-comment"># 创建nudtMilScore表</span><br>     sql = <span class="hljs-string">&quot;create table nudtMilScore(year int,province varchar(100), MilMax int, MilMin int, MilMean int)&quot;</span><br>     cursor.execute(sql)<br>     <span class="hljs-comment"># ------------End-----------</span><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">cursor,year,province,entryScore,techMax,techMin,techMean,milMax,milMin,milMean</span>):<br>     <span class="hljs-comment"># -----------Begin----------</span><br>     <span class="hljs-comment"># 请在下面输入将数据插入provincialEntryScore表中的语句</span><br>     sql = <span class="hljs-string">f&quot;insert into provincialEntryScore values (&#x27;<span class="hljs-subst">&#123;year&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;province&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;entryScore&#125;</span>&#x27;)&quot;</span><br>     cursor.execute(sql)<br>     <span class="hljs-comment"># 请在下面输入将数据插入nudtTechScore表中的语句</span><br>     sql = <span class="hljs-string">f&quot;insert into nudtTechScore values (&#x27;<span class="hljs-subst">&#123;year&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;province&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;techMax&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;techMin&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;techMean&#125;</span>&#x27;)&quot;</span><br>     cursor.execute(sql)<br>     <span class="hljs-comment"># 请在下面输入将数据插入nudtMilScore表中的语句</span><br>     sql = <span class="hljs-string">f&quot;insert into nudtMilScore values (&#x27;<span class="hljs-subst">&#123;year&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;province&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;milMax&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;milMin&#125;</span>&#x27;,&#x27;<span class="hljs-subst">&#123;milMean&#125;</span>&#x27;)&quot;</span><br>     cursor.execute(sql)<br>     <span class="hljs-comment"># ------------End-----------</span><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">selectAll</span>(<span class="hljs-params">cursor</span>):<br>     <span class="hljs-comment"># -----------Begin----------</span><br>     <span class="hljs-comment"># 请在下面输入多表直接汇总的语句</span><br>     sql = <span class="hljs-string">&quot;select * from provincialEntryScore,nudtTechScore,nudtMilScore&quot;</span><br>     cursor.execute(sql)<br>     records = cursor.fetchall()<br>     <span class="hljs-keyword">return</span> records<br>     <span class="hljs-comment"># ------------End-----------</span><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">selectEqual</span>(<span class="hljs-params">cursor</span>):<br>     <span class="hljs-comment"># -----------Begin----------</span><br>     <span class="hljs-comment"># 请在下面输入等值连接的语句</span><br>     sql = <span class="hljs-string">&quot;select * from provincialEntryScore a,nudtTechScore b,nudtMilScore c where a.province=b.province and a.province=c.province&quot;</span><br>     cursor.execute(sql)<br>     records = cursor.fetchall()<br>     <span class="hljs-keyword">return</span> records<br>     <span class="hljs-comment"># ------------End-----------</span><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">selectNatural</span>(<span class="hljs-params">cursor</span>):<br>     <span class="hljs-comment"># -----------Begin----------</span><br>     <span class="hljs-comment"># 请在下面输入自然连接的语句</span><br>     sql = <span class="hljs-string">&quot;select a.year,a.province,a.entryScore,b.techMax,b.techMin,b.techMean,c.MilMax,c.MilMin,c.MilMean from provincialEntryScore a,nudtTechScore b,nudtMilScore c where a.province=b.province and a.province=c.province&quot;</span><br>     cursor.execute(sql)<br>     records = cursor.fetchall()<br>     <span class="hljs-keyword">return</span> records<br>     <span class="hljs-comment"># ------------End-----------</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="2-10-查询、索引和完整性"><a href="#2-10-查询、索引和完整性" class="headerlink" title="2.10 查询、索引和完整性"></a>2.10 查询、索引和完整性</h2><h3 id="2-10-1-基本查询的学习"><a href="#2-10-1-基本查询的学习" class="headerlink" title="2.10.1 基本查询的学习"></a>2.10.1 基本查询的学习</h3><ol><li>查询语句select<br> 以下是MySQL数据库中查询数据通用的SELECT语法： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name1,column_name2 <span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">WHERE</span> Clause] [<span class="hljs-keyword">OFFSET</span> M ] [LIMIT N]<br></code></pre></td></tr></table></figure><ul><li>查询语句中可以指定一个或者多个表，表之间使用逗号,分割，并使用WHERE语句来设定查询条件</li><li>SELECT命令可以读取一条或者多条记录</li><li>可以使用星号*来代替字段，返回表所有字段的数据</li><li>可以使用LIMIT属性来设定返回的记录数。</li></ul></li><li>命令行的操作</li><li>子查询的使用<br> 所谓子查询，即在查询语句中内嵌其他查询语句。下面，我们仍继续在命令行的操作中学习。<br> 查找在cwb工作的雇员情况： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> did<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cwb&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li>连接查询的使用<br> 比如查询每个雇员的薪水情况，但是我们要返回雇员的姓名，而在sal表中没有雇员姓名，这个时候就需要我们通过员工编号连接emp和sal两张表。 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> emp.ename,sal.income <span class="hljs-keyword">from</span> emp,sal <span class="hljs-keyword">where</span> emp.eid<span class="hljs-operator">=</span>sal.eid;<br></code></pre></td></tr></table></figure></li><li>一些关键字<ul><li>any关键字：<br> 假设any内部的查询语句返回的结果个数是三个，那么： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ...<span class="hljs-keyword">from</span> ... <span class="hljs-keyword">where</span> a <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">any</span>(...)<br></code></pre></td></tr></table></figure> 等价于 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ...<span class="hljs-keyword">from</span> ... <span class="hljs-keyword">where</span> a <span class="hljs-operator">&gt;</span> result1 <span class="hljs-keyword">or</span> a <span class="hljs-operator">&gt;</span> result2 <span class="hljs-keyword">or</span> a <span class="hljs-operator">&gt;</span> result3<br></code></pre></td></tr></table></figure> ALL关键字与any关键字类似，但其含义不同，相当于上面的or改成and。some关键字和any关键字是一样的功能。</li><li>IN运算符用于WHERE表达式中，以列表项的形式支持多个选择 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">column</span> <span class="hljs-keyword">IN</span> (value1,value2,...)<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">column</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (value1,value2,...)<br></code></pre></td></tr></table></figure> 当IN前面加上NOT运算符时，表示与IN相反的意思，即不在这些列表项内选择。</li><li>UNION操作符用于连接两个以上的SELECT语句的结果组合到一个结果集合中 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> expression_1,expression_2,...,expression_n <span class="hljs-keyword">FROM</span> tables [<span class="hljs-keyword">WHERE</span> conditions]<br><span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DISTINCT</span>]<br><span class="hljs-keyword">SELECT</span> expression_1,expression_2,...,expression_n <span class="hljs-keyword">FROM</span> tables[<span class="hljs-keyword">WHERE</span> conditions];<br></code></pre></td></tr></table></figure> 参数expression_1, expression_2, … expression_n是要检索的列，tables是要检索的数据表，WHERE conditions是检索条件，DISTINCT是删除结果集中重复的数据。默认情况下 UNION操作符已经删除了重复数据，所以DISTINCT修饰符对结果没啥影响。而ALL可以返回所有结果集，包含重复数据。</li></ul></li><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面补齐查询一的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">select</span> ename,eid,sex <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span>   <br>did <span class="hljs-keyword">in</span> (<br>    <span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cwb&#x27;</span><br>)<br><span class="hljs-comment">/*********end*********/</span><br>    <span class="hljs-keyword">and</span><br>    birth<span class="hljs-operator">&lt;=</span><span class="hljs-keyword">all</span><br>        (<span class="hljs-keyword">select</span> birth <span class="hljs-keyword">from</span> emp<br>            <span class="hljs-keyword">where</span> did <span class="hljs-keyword">in</span><br>                (<span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept<br>                    <span class="hljs-keyword">where</span> dname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;yfb&#x27;</span><br>                )<br>        );<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入查询二的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">select</span> emp.ename,sal.income,sal.outcome <span class="hljs-keyword">from</span> emp,sal<br><span class="hljs-keyword">where</span> emp.eid<span class="hljs-operator">=</span>sal.eid <span class="hljs-keyword">and</span> emp.did <span class="hljs-keyword">in</span> (<br>    <span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cwb&#x27;</span><br>) <span class="hljs-keyword">and</span> sal.income<span class="hljs-operator">&gt;</span><span class="hljs-number">5200</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-10-2-深入学习查询语句"><a href="#2-10-2-深入学习查询语句" class="headerlink" title="2.10.2 深入学习查询语句"></a>2.10.2 深入学习查询语句</h3><ol><li>MySQL聚集函数<table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">COUNT()</td><td align="center">返回某列的行数</td></tr><tr><td align="center">MAX()</td><td align="center">返回某列最大值</td></tr><tr><td align="center">MIN()</td><td align="center">返回某列最小值</td></tr><tr><td align="center">AVG()</td><td align="center">返回某列平均值</td></tr><tr><td align="center">SUM()</td><td align="center">返回某列值之和</td></tr></tbody></table> 求财务部雇员的平均收入： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(income) <span class="hljs-keyword">as</span> avgincome<br>    <span class="hljs-keyword">from</span> sal<br>    <span class="hljs-keyword">where</span> eid <span class="hljs-keyword">in</span><br>        (<span class="hljs-keyword">select</span> eid<br>            <span class="hljs-keyword">from</span> emp<br>                <span class="hljs-keyword">where</span> did<span class="hljs-operator">=</span><br>                    (<span class="hljs-keyword">select</span> did<br>                        <span class="hljs-keyword">from</span> dept<br>                            <span class="hljs-keyword">where</span> dname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cwb&#x27;</span>));<br></code></pre></td></tr></table></figure></li><li>group by和order by子句的使用<br> GROUP BY语句根据一个或多个列对结果集进行分组。 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, <span class="hljs-keyword">function</span>(column_name) <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> column_name operator <span class="hljs-keyword">value</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;<br></code></pre></td></tr></table></figure> 如果我们需要对读取的数据进行排序，我们就可以使用MySQL的ORDER BY子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> field1, field2,...,fieldN table_name1,table_name2..., <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> field1,[field2...] [<span class="hljs-keyword">ASC</span> [<span class="hljs-keyword">DESC</span>]]<br></code></pre></td></tr></table></figure><ul><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC （升序）或 DESC（降序） 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。</li></ul></li><li>Educoder代码 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入查询一的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> did <span class="hljs-keyword">in</span> (<br>    <span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cwb&#x27;</span><br>);<br><br><span class="hljs-comment">/*********end*********/</span><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入查询二的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> did;<br><br><span class="hljs-comment">/*********end*********/</span><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入查询三的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><br><span class="hljs-keyword">select</span> emp.ename <span class="hljs-keyword">from</span> emp,sal <span class="hljs-keyword">where</span> emp.eid<span class="hljs-operator">=</span>sal.eid <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal.income ;<br><br><span class="hljs-comment">/*********end*********/</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-10-3-视图的创建和使用"><a href="#2-10-3-视图的创建和使用" class="headerlink" title="2.10.3 视图的创建和使用"></a>2.10.3 视图的创建和使用</h3><ol><li><p>相关知识<br> 限制查看雇员的某些情况：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> cx_emp<br><span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> eid,ename,birth,sex,did<br>        <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p> 创建该视图后，我们可以在数据库中查看所有的表，是不是变成了下面这样？<br> <img src="/../img/Educoder_MySQL%E5%AD%A6%E4%B9%A0/2.10.3-1.png"><br> 接下来我们输入下面的命令来查看该视图：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> cx_emp;<br></code></pre></td></tr></table></figure><p> 为了了解视图的特性，我们向视图cx_emp中插入一条记录：</p><table><thead><tr><th align="center">eid</th><th align="center">ename</th><th align="center">birth</th><th align="center">sex</th><th align="center">did</th></tr></thead><tbody><tr><td align="center">888</td><td align="center">zhj</td><td align="center">1983-09-25</td><td align="center">1</td><td align="center">3</td></tr></tbody></table><p> 现在，我们查看一下emp表，你是不是已经成功把这条记录插入到emp表中了呢？这就是视图，原表和视图之间是同步的。<br> 接下来请你尝试以下操作。<br> 将zhj从经理办公室（部门编号3）转到市场部（部门编号为5）：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> cx_emp <span class="hljs-keyword">set</span> did<span class="hljs-operator">=</span><span class="hljs-string">&#x27;5&#x27;</span><br>    <span class="hljs-keyword">where</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;zhj&#x27;</span>;<br></code></pre></td></tr></table></figure><p> 请你再次查看emp表核查是否修改成功。</p></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入创建cx_sal的视图的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> cx_sal <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> emp.ename,sal.income,sal.outcome<br><span class="hljs-keyword">from</span> emp,sal<br><span class="hljs-keyword">where</span> emp.eid<span class="hljs-operator">=</span>sal.eid;<br><br><span class="hljs-comment">/*********end*********/</span><br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入查询财务部雇员薪水情况视图的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> cx_sal;<br><span class="hljs-comment">/*********end*********/</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-10-4-索引和完整性"><a href="#2-10-4-索引和完整性" class="headerlink" title="2.10.4 索引和完整性"></a>2.10.4 索引和完整性</h3><ol><li><p>索引<br> 索引是根据表中一列或若干列按照一定的顺序建立的列值与记录行之间的对应关系表。在列上创建了索引之后，查找数据是可以直接根据该列上的索引找到对应行的位置，从而快速找到数据。<br> 索引类型分成下列几个：</p><ul><li>普通索引（INDEX）：基本索引类型</li><li>唯一性索引（UNIQUE）：该列的所有值没有重复</li><li>主键（PRIMARY KEY）：一种唯一性索引，一个表只能有一个主键</li><li>全文索引（FLLTEXT）：只能在varchar或text类型上创建</li></ul><p> 语法格式：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建<br><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">UNIQUE</span><span class="hljs-operator">|</span>FULLTEXT<span class="hljs-operator">|</span>SPATIAL] INDEX 索引名称 <span class="hljs-keyword">ON</span> 表名&#123;字段名称[(长度)] [<span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>]&#125;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tbl_name <span class="hljs-keyword">ADD</span> [<span class="hljs-keyword">UNIQUE</span><span class="hljs-operator">|</span>FULLTEXT<span class="hljs-operator">|</span>SPATIAL] INDEX索引名称(字段名称[(长度)][<span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>]);<br></code></pre></td></tr></table></figure><br> 在创建好整个数据库的基础上，对YGGL数据库的emp表的ename列建立索引：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index emp_name_idx<br>    <span class="hljs-keyword">on</span> emp(ename);<br></code></pre></td></tr></table></figure><br> 查看是否创建成功：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><br> 重命名索引：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> index emp_name_idx<br>    rename <span class="hljs-keyword">to</span> emp_idx;<br></code></pre></td></tr></table></figure><br> 删除索引：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index emp_idex;<br></code></pre></td></tr></table></figure></p></li><li><p>数据完整性<br> 为了防止不合规定的数据进入基表中，我们定义完整性规则。分为：域完整性、实体完整性和参照完整性。</p><ol><li>域完整性<br> 域完整性又叫列完整性，主要是对一列的数据进行约束。比如emp中限定sex的值只能为1和2中的一个，可以在创建表时将sex做以下定义： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sex <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">check</span>(sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br></code></pre></td></tr></table></figure> 或者在所有字段定义完成后加一句： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">constraint</span> ch_sex <span class="hljs-keyword">check</span>(sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>)<br></code></pre></td></tr></table></figure> 下面，我们在命令行中通过修改表的方式创建约束： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">add</span>(<span class="hljs-keyword">constraint</span> ch_sex <span class="hljs-keyword">check</span>(sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>));<br></code></pre></td></tr></table></figure> 删除约束： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">drop</span> <span class="hljs-keyword">constraint</span> ch_sex;<br></code></pre></td></tr></table></figure></li><li>实体完整性<br> 又叫行完整性，要求每一行都有一个唯一的标识符。比如emp中的员工eid是唯一的，才能唯一确定某一个人。通过unique约束和primary key约束可以实现实体完整性。<br> 同样的，在创建表时对tel创建约束应该将tel定义为： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">tel    <span class="hljs-type">char</span>(<span class="hljs-number">12</span>)     <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">constraint</span> un_tel <span class="hljs-keyword">unique</span>,<br></code></pre></td></tr></table></figure> 下面我们在命令行中通过修改表的方式创建约束： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> un_tel <span class="hljs-keyword">unique</span>(tel);<br></code></pre></td></tr></table></figure></li><li>参照完整性<br> 又叫引用完整性，它保证主表和从表中的数据一致性，实现方式是定义外键与主键。例如emp和sal表，eid在emp中是外键，而在sal中eid定义为主键。</li></ol><ul><li>从表不能引用主表不存在的键值</li><li>主表中的值更改了，则从表中所有引用都也要修改</li><li>若要删除主表中的记录，应先删除从表中匹配的记录<br> 如果在创建sal表时想创建参照完整性使emp表中所有eid都要出现在sal中,可以在定义emp的eid时这样定义： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">eid    <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">references</span> sal(eid),<br></code></pre></td></tr></table></figure> 下面我们在命令行中通过修改表的方式定义： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> sal_id <span class="hljs-keyword">foreign</span> key(eid)<br>        <span class="hljs-keyword">references</span> sal(eid);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Educoder代码</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入创建索引的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">create</span> index pk_xs_bak <span class="hljs-keyword">on</span> emp(eid);<br><span class="hljs-comment">/*********end*********/</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入实现域完整性的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br><span class="hljs-keyword">add</span> (<span class="hljs-keyword">constraint</span> ch_tel <span class="hljs-keyword">check</span>(tel <span class="hljs-keyword">between</span> <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9</span>));<br><span class="hljs-comment">/*********end*********/</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入实现实体完整性的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> dept<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> undept <span class="hljs-keyword">unique</span>(dname);<br><span class="hljs-comment">/*********end*********/</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>请在下面输入实现参照完整性的MySQL语句<br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> fk_emp <span class="hljs-keyword">foreign</span> key(did)<br><span class="hljs-keyword">references</span> dept(did);<br><span class="hljs-comment">/*********end*********/</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Educoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一阶段结果</title>
    <link href="/2024/09/19/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/"/>
    <url>/2024/09/19/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="一、摘要"><a href="#一、摘要" class="headerlink" title="一、摘要"></a>一、摘要</h2><p>本文主要展示项目第一阶段静态路由中环境搭建后的三种服务的功能验证，证明本人能够搭建邮件服务器、文件传输服务器以及实现双人实时视频。</p><span id="more"></span><h2 id="二、网络拓扑"><a href="#二、网络拓扑" class="headerlink" title="二、网络拓扑"></a>二、网络拓扑</h2><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/topo.jpg"></p><ul><li>树莓派S02:<ul><li>eth0: 192.168.0.2     –&gt;     联网ip</li><li>eth1: 10.0.6.2        –&gt;     内网ip</li></ul></li><li>树莓派S03:<ul><li>eth0: 192.168.0.3     –&gt;     联网ip</li><li>eth1: 10.0.7.2        –&gt;     内网ip</li></ul></li></ul><h2 id="三、邮件服务器"><a href="#三、邮件服务器" class="headerlink" title="三、邮件服务器"></a>三、邮件服务器</h2><h3 id="3-1-简要介绍"><a href="#3-1-简要介绍" class="headerlink" title="3.1 简要介绍"></a>3.1 简要介绍</h3><p>postfix+dovecot+mysql搭建的邮件服务器（搭建过程参考：<a href="https://www.cnblogs.com/renweihang/p/7988591.html">Postfix+Dovecot+MySQL搭建邮件服务器</a>），部署树莓派S02；同时树莓派S02和S03上安装有邮件客户端Thunderbird，双方通过Thunderbird与邮件服务器通信，通过内网（即core的虚拟网络）收发邮件。</p><h3 id="3-2-收发邮件结果"><a href="#3-2-收发邮件结果" class="headerlink" title="3.2 收发邮件结果"></a>3.2 收发邮件结果</h3><p>S02连接到邮件服务器并且收发邮件<br><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/mail.jpg"><br>相应的网络流量是走中间的n3的路由</p><h2 id="四、ftp服务器"><a href="#四、ftp服务器" class="headerlink" title="四、ftp服务器"></a>四、ftp服务器</h2><h3 id="4-1-简要介绍"><a href="#4-1-简要介绍" class="headerlink" title="4.1 简要介绍"></a>4.1 简要介绍</h3><p>参考：<a href="https://blog.csdn.net/2201_75288693/article/details/139508726">保姆级讲解 Linux下FTP服务器的搭建、配置与管理</a>，使用本地用户的方式。配置了两个本地用户：ftpuser1和ftpuser2。</p><h3 id="4-2上传和下载文件："><a href="#4-2上传和下载文件：" class="headerlink" title="4.2上传和下载文件："></a>4.2上传和下载文件：</h3><p>S02连接到ftp服务器并进行文件操作：<br><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/ftp.png"><br>相应的网络流量是走上面的n2的路由</p><h2 id="五、视频通话"><a href="#五、视频通话" class="headerlink" title="五、视频通话"></a>五、视频通话</h2><h3 id="5-1-简要介绍"><a href="#5-1-简要介绍" class="headerlink" title="5.1 简要介绍"></a>5.1 简要介绍</h3><p>起初是用webrt实现视频通话的，但是webrtc无法实现指定树莓派进行视频传输的端口。后面又用gstreamer在两个树莓派上进行推流和拉流，虽然可以指定传输端口，但是音频接收出现问题。</p><h3 id="5-2-视频通话结果"><a href="#5-2-视频通话结果" class="headerlink" title="5.2 视频通话结果"></a>5.2 视频通话结果</h3><ol><li><p>webrtc:</p><p><img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/w_s02.video.jpg"><br>相应的视频流是走最上面的n2的路由（默认的）</p></li><li><p>gstreamer：</p><ul><li>S02:<br> <img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/g_s02_video.jpg"></li><li>S03:<br> <img src="/../img/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E7%BB%93%E6%9E%9C/g_s03_video.jpg"></li><li>相应的流量是走下面的n4的路由</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows系统安装MySQL</title>
    <link href="/2024/09/18/Windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85MySQL/"/>
    <url>/2024/09/18/Windows%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85MySQL/</url>
    
    <content type="html"><![CDATA[<h2 id="一、摘要"><a href="#一、摘要" class="headerlink" title="一、摘要"></a>一、摘要</h2><p>参考知士荟大学计算机基础空间文章<a href="https://www.learnerhub.net/#/spaces/422/resources-docs/21946">Windows系统安装MySQL</a>，记录本人安装MySQL的过程。下文中提到的“文章”均指代该链接对应的文章。</p><span id="more"></span><h2 id="二、安装过程"><a href="#二、安装过程" class="headerlink" title="二、安装过程"></a>二、安装过程</h2><h3 id="2-1-下载MySQL安装包"><a href="#2-1-下载MySQL安装包" class="headerlink" title="2.1 下载MySQL安装包"></a>2.1 下载MySQL安装包</h3><p>文章下载的是8.2版本，那我也下载8.2版本，但是在<a href="https://dev.mysql.com/downloads/mysql/">官网</a>，默认没有8.2。那就点击Archives，然后选择对应版本下载，如下：<br><img src="/../img/windows+install+MySQL/MySQL_download.png"></p><h3 id="2-2-安装MySQL"><a href="#2-2-安装MySQL" class="headerlink" title="2.2 安装MySQL"></a>2.2 安装MySQL</h3><p>点击下载好的msi文件，开始安装。按照文章安装即可，基本就是点next，只是需要修改安装路径为<code>D:\MySQL Server8.2\</code>即可，安装完成后进入配置。<br>配置中也只是填了一个密码，然后一路next,finish即可。</p><h3 id="2-3-验证安装"><a href="#2-3-验证安装" class="headerlink" title="2.3 验证安装"></a>2.3 验证安装</h3><ol><li>windows11下直接用导航栏搜索mysql，选择命令行客户端即可<br><img src="/../img/windows+install+MySQL/get_mysql.png"><br>但是，我运行只是命令行一闪而过，并没有要我输入密码。</li><li>没办法，我直接到mysql的安装位置，鼠标右键，选择在终端打开。然后使用命令登录：<code>.\mysql.exe -u root -p</code>。然后输入密码，成功了，如下:<br><img src="/../img/windows+install+MySQL/mysql_terminal_login.png"><br>这说明我的mysql没有问题，那应该是MySQL 8.2 Command Line Client的问题</li><li>查看一下MySQL 8.2 Command Line Client的属性，发现它的目标是<code>&quot;D:\MySQL Server 8.2\bin\mysql.exe&quot; &quot;--defaults-file=D:\MySQL Server 8.2\my.ini&quot; &quot;-uroot&quot; &quot;-p&quot;</code><br>但是，奇怪的是，我的<code>D:\MySQL Server 8.2\</code>目录下并没有<code>my.ini</code>配置文件。<br>这么说的话，应该是这个快捷方式出了问题，修改方法：将<code>&quot;--defaults-file=D:\MySQL Server 8.2\my.ini&quot;</code>删除，应用并确定。</li><li>重新点击MySQL 8.2 Command Line Client，OK没有问题，输入密码然后显示数据库，结果如下<br><img src="/../img/windows+install+MySQL/MySQL_8.2_Command_Line_Client.png"></li></ol><h3 id="2-4-添加环境变量"><a href="#2-4-添加环境变量" class="headerlink" title="2.4 添加环境变量"></a>2.4 添加环境变量</h3><ol><li>添加环境变量<br><img src="/../img/windows+install+MySQL/mysql_path.png"></li><li>验证：<br><img src="/../img/windows+install+MySQL/mysql_login_end.png"></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学计算基础</tag>
      
      <tag>环境搭建</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下安装使用Anaconda</title>
    <link href="/2024/09/18/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Anaconda/"/>
    <url>/2024/09/18/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Anaconda/</url>
    
    <content type="html"><![CDATA[<h2 id="一、摘要"><a href="#一、摘要" class="headerlink" title="一、摘要"></a>一、摘要</h2><p>参考知士荟大学计算机基础空间文章<a href="https://www.learnerhub.net/#/spaces/422/resources-docs/22046">Windows下安装使用Anaconda</a>，记录本人安装和使用Anacond的过程。下文中提到的“文章”均指代该链接对应的文章。</p><span id="more"></span><h2 id="二、下载和安装Anaconda"><a href="#二、下载和安装Anaconda" class="headerlink" title="二、下载和安装Anaconda"></a>二、下载和安装Anaconda</h2><h3 id="2-1-操作系统位数"><a href="#2-1-操作系统位数" class="headerlink" title="2.1 操作系统位数"></a>2.1 操作系统位数</h3><p>一般来说，现在新买笔记本的话的操作系统都是64位的。毕竟64位操作系统的内存就更大呀，32位操作系统只有4GB，新的笔记本一般都会预装64位的操作系统。展示一下我的笔记本，Windows 11直接在设置-&gt;系统-&gt;系统信息中查看：<br><img src="/../img/windows+install+Anaconda/system_info.png"></p><h3 id="2-2-下载Anaconda"><a href="#2-2-下载Anaconda" class="headerlink" title="2.2 下载Anaconda"></a>2.2 下载Anaconda</h3><p>文章推荐是下载2023-7的版本，但是我看了一下，<a href="https://repo.anaconda.com/archive/">官网</a>里给出的对应版本也没有32位（对应x86）的呀，只有x86_64（算是默认前面的操作系统位数一定是64位了）。直接点击下载对应的exe文件：<br><img src="/../img/windows+install+Anaconda/Anaconda_download.png"></p><h3 id="2-3-安装Anaconda"><a href="#2-3-安装Anaconda" class="headerlink" title="2.3 安装Anaconda"></a>2.3 安装Anaconda</h3><p>点击下载好的exe-&gt;next-&gt;I Agree-&gt;next，到了安装位置这里，推荐不安装到c盘，我直接将”C”改成”D”，如下：<br><img src="/../img/windows+install+Anaconda/Anaconda_install_D.png"><br>然后继续next-&gt;install即可，显示Complete后点击next-&gt;Finish(这里两个勾选框是启动Anaconda包管理器和查看相关文档，不想看就取消勾选，本文对此没有要求)</p><h2 id="三、使用Spyder"><a href="#三、使用Spyder" class="headerlink" title="三、使用Spyder"></a>三、使用Spyder</h2><h3 id="3-1-修改主题"><a href="#3-1-修改主题" class="headerlink" title="3.1 修改主题"></a>3.1 修改主题</h3><ol><li>在windows下方导航栏，直接搜索spyder，然后打开。</li><li>默认是暗黑色主题，需要修改按照文章修改即可：<code>Tools-&gt;Preference-&gt;Appearance</code>，然后修改<code>Interface theme</code>为<code>light</code>，<code>Syntax highlight theme</code>为<code>Spyder</code>，然后Spyder提示你要重启，点击yes确认。重启后的Spyder界面如下：<br><img src="/../img/windows+install+Anaconda/Spyder_light.png"></li></ol><h3 id="3-2-运行测试程序"><a href="#3-2-运行测试程序" class="headerlink" title="3.2 运行测试程序"></a>3.2 运行测试程序</h3><ol><li>将文章中的测试程序复制到左边的窗口:<code>temp.py</code>，<code>crtl+s</code>保存一下，按<code>F5</code>运行或者点击上面的Run file按钮，得到的结果可以在右下角的Console控制台输出中查看。</li><li>然而，我没有得到预期的图像，反而得到了一个error，如下<br><img src="/../img/windows+install+Anaconda/test_err.png"></li><li>搜索一下这个TypeError的内容，得到修改方法：将代码里面的<code>gca</code>改成<code>add_subplot</code>。</li><li>重新保存文件并运行，Console中出现一个Important提示，图像已经在plots中展示了。</li><li>要看到图像的话，就在右上的窗口下面，点击<code>Plots</code>，即可看到程序绘制的3D图像。</li><li>展示一下最后的结果：<br><img src="/../img/windows+install+Anaconda/results.png"></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学计算基础</tag>
      
      <tag>环境搭建</tag>
      
      <tag>Anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络交换原理和系统设计实验报告</title>
    <link href="/2024/09/18/%E7%BD%91%E7%BB%9C%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2024/09/18/%E7%BD%91%E7%BB%9C%E4%BA%A4%E6%8D%A2%E5%8E%9F%E7%90%86%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><h4 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h4><ol><li>软件定义网络（SDN）：<ol><li>定义：软件定义网络（SDN）是一种新兴的网络架构，它将网络控制层与数据转发层分离。传统网络架构中，这两者紧密耦合，导致网络配置和管理复杂且灵活性不足。而在SDN中，网络控制由一个集中化的软件控制器管理，这使得网络管理员能够通过编程方式动态地控制网络行为。</li><li>核心特点：网络虚拟化、集中管理和开放接口，使得网络资源的配置、监控和管理更加高效和灵活。</li><li>计量（meter）表：在OpenFlow 1.3中，软件定义网络（SDN）引入了meter的概念，使得控制器能够根据特定的匹配字段和优先级对流量进行限速。meter表可以计算流速，当速率超过设置的限制时，对流应用不同的操作。</li></ol></li><li>服务质量（Qos）：<ol><li>定义：服务质量（QoS）是指网络在数据传输过程中所提供的性能保证，主要包括带宽、延迟、抖动和丢包率等指标，是一种可以根据不同流的优先级对其进行区别对待的机制。服务质量最初由国际电信联盟 (ITU) 于 1994 年定义（国际电信联盟 (ITU)，2008），它的目标是确保网络能够根据不同类型的流量需求进行有效管理，以满足用户和应用的性能要求。</li><li>应用：在现代网络中，随着实时应用（如视频会议、在线游戏和VoIP等）的普及，对QoS的要求日益提高。这些应用通常对延迟和带宽的需求非常敏感，因此需要网络能够提供高质量的服务。</li><li>方法：传统上，QoS 使用两种主要方法实现：集成服务（IntServ）和差异化服务（DiffServ）。IntServ 提供对系统的细粒度基于流的控制，并要求从源到目标的路径中的每个路由器都实现 IntServ。另一方面，DiffServ 是一个粗粒度的基于类的控制系统，用于将数据包分类和标记为特定类。</li></ol></li></ol><h4 id="1-2-论文概述"><a href="#1-2-论文概述" class="headerlink" title="1.2 论文概述"></a>1.2 论文概述</h4><ol><li>论文信息<ul><li>论文标题：Adaptive quality of service for packet loss reduction using OpenFlow meters.</li><li>论文作者：Krishneel Deo, Kaylash Chaudhary and Mansour Assaf</li><li>论文发表年份：April 4, 2024</li><li>论文出处：<a href="https://peerj.com/articles/cs-1848/">https://peerj.com/articles/cs-1848/</a></li><li>DOI：10.7717&#x2F;peerj-cs.1848</li></ul></li><li>论文内容<ul><li>主要目标：解决OpenFlow Meter如何实现每条流上带宽分配和重分发的问题，重点关注在最为拥塞的、具有突发流量的交换机（例如：边缘路由器，edge router）上的流量，尝试最小化Qos流的丢包，并且通过利用其他流没有使用的带宽来满足高优先级流的要求。</li><li>提出的算法或方法：针对最高拥塞交换机（例如边缘路由器）处的突发流的带宽分配和重新分配算法（AFQos）。在链路总带宽够用时，为借出带宽的流预留带宽，能够带宽重分配；在链路总带宽不够时，从BE流中获取带宽，分配给Qos流。</li><li>实验简述：和AQos算法进行对比，试验了三种情况：链路没有完全利用、链路接近完全利用、链路拥塞，得到了两种算法在一定时间的带宽分配情况和吞吐量比值。</li></ul></li></ol><h3 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2. 相关工作"></a>2. 相关工作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;SDN已经解决了许多网络编程问题并且为管理网络提供了一个灵活的方法。例如，将SDN应用于一些场景下的负载均衡技术，使用SDN实现各种流量监控组件等。随着SDN的引入，Qos领域的研究工作也越来越丰富，下面介绍一些使用SDN解决Qos领域相关问题的工作。</p><h4 id="2-1-文献综述"><a href="#2-1-文献综述" class="headerlink" title="2.1 文献综述"></a>2.1 文献综述</h4><p>下面列出了一部分参考文献的主要工作，具体内容参考原论文。</p><ol><li>针对特定应用的工作<ol><li>提出一种在云平台上确保多用户的端到端Qos保证的方法，展示了一种从云提供商到用户的流量路径选择方式。</li><li>提出一种编程网络设备来为多媒体应用提供相关的Qos需求的SDN框架，提供了优先级流的带宽保证和一种监控网络状态和资源等级的机制。</li><li>提出一种带宽分配机制，使用机器学习对不同的流量进行分类，优先考虑数据中心的游戏流，以确保延迟敏感的游戏应用。</li><li>推出一种解决方案，用于增强在OpenFlow网络中流式传输任务关键型视频数据的QoS性能。</li></ol></li><li>将流量看作一个整体提供Qos方案<ol><li>提出了一种提高数据中心网络之间链路利用率的方法。控制着流量的量、类型以及发送的频率。</li><li>在SDN中实现了加权公平排队(WFQ)机制,以尝试减少网络拥塞；使用缓冲区来决定是否将数据包放入队列以实现流畅的流量</li><li>提出了一个连接所有谷歌数据中心的专用广域网的设计和实现。通过根据优先级为不同应用进程分配带宽来解决带宽管理问题,目的是最大化平均带宽</li><li>提出了一种带宽分配机制，通过用户定义的公平分配空闲带宽来最大化网络链路利用率。它使用最小-最大方案保证公平性。</li></ol></li></ol><ul><li>2中工作与要复现论文的区别：复现的论文使用meter表实现如何将带宽分配给单个设备上的每个流，并在需要更多带宽时收回带宽，同时确保每个 QoS 类别的数据包丢失最少。</li><li>与要复现论文最相近的论文：“Adaptive QoS for data transfers using software-defined networking.”论文中提出的AQos算法同样允许需要更多带宽的流获取其他流的空闲带宽，同时借出去的带宽也能在需要时返回。</li><li>要复现论文的算法与AQos的区别：被借的流不会借用所有的带宽；未被借用的带宽分配给自己，即预留一些可增长的空间。</li></ul><h3 id="3-算法描述"><a href="#3-算法描述" class="headerlink" title="3. 算法描述"></a>3. 算法描述</h3><p>对于每个Qos类，</p><ul><li><p>如果当前速率小于预先配置的速率并且所有Qos类的当前速率之和小于预先配置速率之和，分配所有Qos类速率为预先配置的速率</p></li><li><p>如果当前速率大于预先配置的速率并且所有Qos类的当前速率之和大于预先配置速率之和，分配所有Qos类速率为预先配置的速率</p></li><li><p>如果某个Qos类当前速率大于预先配置的速率，存在另一个Qos类当前速率小于预先配置的速率，将另一个Qos类的空闲带宽分给该Qos类，即提升该Qos类的速率</p></li></ul><h4 id="3-1-算法细节"><a href="#3-1-算法细节" class="headerlink" title="3.1 算法细节"></a>3.1 算法细节</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;所提出的算法是使用 Ryu SDN 控制器作为控制器应用程序来设计和构建的，控制器使用 OFPFlowStatsRequest API 查询交换机并分析响应以计算速率并确定最佳分配速率。然后将所提出的算法应用于各个流量，以计算每个 QoS 类别的新速率。</p><ol><li>算法1： <code>meterAllocation()</code>。使用从交换机中得到的数据计算每条流的当前速率，同时还设置了每条流的预定速率，这两个速率作为算法1的输入。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">meterAllocation(allocated, current):<br>need = unused = &#123;&#125;<br><br><span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> allocated:<br>   <span class="hljs-keyword">if</span> current[ids] &gt;= allocated[ids]:<br>      need[ids] = current[ids] - allocated[ids] <br>   <span class="hljs-keyword">else</span> <br>      need[ids] = <span class="hljs-number">0</span><br>   <span class="hljs-keyword">if</span> current[ids] &lt; allocated[ids]:<br>      unused[ids] = allocated[ids] - current[ids]<br>   <span class="hljs-keyword">else</span><br>      unused [ids] = <span class="hljs-number">0</span><br>   end <span class="hljs-keyword">else</span><br>end <span class="hljs-keyword">for</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(need) &lt;= <span class="hljs-built_in">sum</span>(unused):<br>   new_rate = allocUnder(allocated, current, need, unused)<br><span class="hljs-keyword">else</span><br>   new_rate = allocOver(allocated, current, need, unused)<br>end <span class="hljs-keyword">else</span><br><br><span class="hljs-keyword">return</span> new_rate<br></code></pre></td></tr></table></figure>解释：先计算每条流需要的带宽<code>need</code>和没有使用的带宽<code>unused</code>，如果<code>need</code>之和小于<code>unused</code>之和，则进入<code>allocUnder()</code>函数，否则进入<code>allocOver()</code>函数。算法返回每条流的新的配置速率<code>new_rate</code>。</li><li>算法2：<code>allocOver()</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">allocOver(allocated, current, need, unused)<br><span class="hljs-keyword">global</span> be<br>new_rate = p_need = &#123;&#125;<br>total_need = <span class="hljs-built_in">sum</span>(need) – need[be]<br><br><span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> need:<br>   new_rate[ids] = <span class="hljs-built_in">min</span>(allocated[ids], current[ids])<br>   <span class="hljs-keyword">if</span> total_need == <span class="hljs-number">0</span>: <br>      p_need[ids] = <span class="hljs-number">0</span><br>   <span class="hljs-keyword">else</span> <br>      p_need[ids] = need[ids] / total_need<br>end <span class="hljs-keyword">for</span><br><br>total_unused = rem_unused = <span class="hljs-built_in">sum</span>(unused)<br>[need, new_rate, rem_unused] = allocation(need, new_rate, be, p_need, total_unused, rem_unused)<br>total_need = <span class="hljs-built_in">sum</span>(need) – need[be]<br><br><span class="hljs-keyword">if</span> total_need &gt; <span class="hljs-number">0</span>:<br>   be_available = allocated[be] - unused[be]<br>   <span class="hljs-keyword">if</span> total_need &gt;= be_available:<br>      new_rate[be] = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> need:<br>         <span class="hljs-keyword">if</span> total_need == <span class="hljs-number">0</span>: <br>            p_need[ids] = <span class="hljs-number">0</span><br>         <span class="hljs-keyword">else</span> <br>         p_need[ids] = need[ids] / total_need<br>      end <span class="hljs-keyword">for</span><br>      total_unused = be_available<br>      rem_unused = be_available<br>      [need, new_rate, rem_unused] = allocation (need, new_rate, be, p_need, total_unused, rem_unused)<br>   <span class="hljs-keyword">else</span><br>      new_rate[be] = allocated[be] - total_need<br>      <span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> need:<br>         <span class="hljs-keyword">if</span> ids != be: <br>            new_rate[ids] += need[ids]<br>      end <span class="hljs-keyword">for</span><br>   end <span class="hljs-keyword">else</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> rem_unused &gt; <span class="hljs-number">0</span>:<br>   new_rate[be] += <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(rem_unused, current[be]), need[be])<br>end <span class="hljs-keyword">else</span><br><br><span class="hljs-keyword">return</span> new_rate<br></code></pre></td></tr></table></figure>解释：<ol><li><code>be</code>代表BE流的index。因为需要的带宽大于没有使用的带宽，因此先不考虑BE流需要的带宽，即<code>total_need = sum(need) – need[be]</code>。<code>new_rate</code>初始化allocated和current中较小的值。计算每个流需要的带宽占总需要带宽的比值<code>p_need</code>，注意判断<code>total_need</code>是否为0。接下来使用<code>allocation()</code>函数进行带宽分配，更新<code>need</code>、<code>new_rate</code>、<code>rem_unused</code>值。更新<code>total_need</code>值。</li><li>如果此时<code>total_need</code>值大于0，说明还有Qos流没有满足，因此将BE流占用带宽分配给Qos流。计算BE流的可用带宽<code>be_available</code>（<code>unused[be]</code>在前面的<code>allocation()</code>函数中已经被分配了，但直接使用<code>current[be]</code>是不是更好呢？），<ol><li>如果<code>total_need &gt;= be_available</code>，那么BE流的带宽也不够满足Qos流，因此根据每个qos流需要进行按比例分配，计算出<code>p_need</code>。然后再次调用<code>allocation()</code>函数得到<code>new_rate</code></li><li>否则：将BE流中<code>total_need</code>部分取出，为需要的Qos流增加其需要带宽。</li></ol></li><li>如果<code>total_need</code>等于0，并且<code>rem_unused</code>大于0（感觉一定等于0，这个分支应该不会执行，后面在算法4<code>allocation()</code>中解释），说明Qos流得到满足，但是还有剩余带宽可以分配。更新<code>new_rate[be]</code>，但是这个min表达式我觉得有点问题。我觉得可以直接<code>new_rate[be] = rem_unused + current[be]</code></li></ol></li><li>算法3：<code>allocUnder()</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">allocUnder(allocated, current, need, unused)<br>new_rate = &#123;&#125;<br>ratio = <span class="hljs-built_in">sum</span>(need) / <span class="hljs-built_in">sum</span>(unused)<br><br><span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> need:<br>   new_rate[ids] = <span class="hljs-built_in">max</span>(allocated[ids], current[ids])<br>   <span class="hljs-keyword">if</span> unused[ids] &gt; <span class="hljs-number">0</span>:<br>      new_rate[ids] = allocated[ids] - ratio * unused[ids]<br>   end <span class="hljs-keyword">if</span><br>end <span class="hljs-keyword">for</span><br><br><span class="hljs-keyword">return</span> new_rate<br></code></pre></td></tr></table></figure>解释：初始化<code>new_rate</code>,<code>ratio</code>。对所有的流，<code>new_rate</code>赋值为预分配带宽和当前带宽中较大值，如果该流的<code>unused</code>值大于0，暗示其<code>new_rate</code>赋值为了<code>allocated</code>，将其<code>new_rate</code>值减小<code>ratio * unused</code>，这部分减小的带宽就是借出去的带宽，同时因为<code>ratio &lt; 1</code>，所以其带宽还是比<code>current</code>大，这部分多的带宽空间，可以应对突发流量的增长。</li><li>算法4：<code>allocation()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">allocation (need, new_rate, be, p_need, total_unused, rem_unused)<br><span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> need:<br>   <span class="hljs-keyword">if</span> ids == be:<br>      <span class="hljs-keyword">continue</span><br>   end <span class="hljs-keyword">if</span><br>   given = p_need[ids] * total_unused<br>   need[ids] -= given<br>   new_rate[ids] += given<br>   rem_unused -= given<br>end <span class="hljs-keyword">for</span><br><br><span class="hljs-keyword">return</span> [need, new_rate, rem_unused]<br></code></pre></td></tr></table></figure>解释：<ul><li><code>allocation()</code>函数是<code>allocOver()</code>函数调用的子函数，其中参数：<code>need</code>：每条流需要的带宽；<code>new_rate</code>：每条流预分配带宽和当前带宽的较小值；<code>be</code>：BE流的index；<code>p_need</code>：每条流需要带宽占<code>total_need</code>的比例；<code>total_unused</code>和<code>rem_unused</code>初始化为每条流没有使用的带宽。算法遍历除BE流以外的每条流，从<code>total_unused</code>中取出<code>p_need</code>比例的流，赋值为<code>given</code>，将<code>given</code>填充给<code>need</code>，以增加<code>new_rate</code>，同时更新剩余可用带宽<code>rem_unused</code>。遍历结束后，返回<code>[need, new_rate, rem_unused]</code>。</li><li>注意到除BE流以外的<code>p_need</code>加起来等于1（在<code>allocOver()</code>函数中，<code>p_need</code>的分母<code>total_need</code>就是除BE流以外需要的带宽，因此除BE流以外的流的<code>p_need</code>之和就等于1），因此遍历结束后，减去的<code>given</code>之和就等于<code>total_unused</code>，所以<code>rem_unused</code>一定为0。</li></ul></li><li>算法时间复杂度<table><thead><tr><th align="center">算法名称</th><th align="center">时间复杂度</th></tr></thead><tbody><tr><td align="center">meterAllocation</td><td align="center">O(n)</td></tr><tr><td align="center">allocOver</td><td align="center">O(n)</td></tr><tr><td align="center">allocUnder</td><td align="center">O(n)</td></tr><tr><td align="center">allocation</td><td align="center">O(n)</td></tr></tbody></table></li></ol><h3 id="4-实验设置"><a href="#4-实验设置" class="headerlink" title="4. 实验设置"></a>4. 实验设置</h3><h4 id="4-1-实验环境"><a href="#4-1-实验环境" class="headerlink" title="4.1 实验环境"></a>4.1 实验环境</h4><ol><li>硬件配置：一台联想小新pro14的windows笔记本<ul><li>处理器：AMD Ryzen 7 7840HS with Radeon 780M Graphics 3.80 GHz</li><li>内存：32.0GB</li><li>硬盘：1024GB</li><li>系统类型：64位操作系统，基于x64的处理器</li><li>Window版本：Window11 23H2</li></ul></li><li>软件工具<ul><li>VMware Workstation 17 Pro：创建ubuntu虚拟环境</li><li>Ryu 4.34：控制器</li><li>Mininet 2.3.0：创建虚拟网络拓扑</li></ul></li></ol><h4 id="4-2-实验设计"><a href="#4-2-实验设计" class="headerlink" title="4.2 实验设计"></a>4.2 实验设计</h4><ol><li>下载代码<br>在文章出处可以找到下载链接：<a href="https://zenodo.org/records/10184077%EF%BC%8C">https://zenodo.org/records/10184077，</a> 进入该网页后，找到对应的msc_code-main.zip下载即可。<br>解压后对应的目录树如下，每个文件的功能可以在README.md中查看。<br><img src="/../img/wljhylyxtsj/tree.png" alt="tree"><ul><li><code>research_code</code>包含了实验所需代码，<code>afqos.py</code>是带宽分配算法，<code>flow_rate.py</code>是带宽近似算法，<code>qostopo.py</code>是拓扑代码。</li><li><code>production_code/allocation_app.py</code>则是经过测试的可以作为完整功能的Ryu应用。</li></ul></li><li>配置mysql，因为<code>flow_rate.py</code>和<code>afqos.py</code>都使用了mysql来存储流量信息，因此需要先安装并配置mysql。可以参考 <a href="https://blog.csdn.net/LogosTR_/article/details/125602116">https://blog.csdn.net/LogosTR_/article/details/125602116</a> 。然后需要将对应的用户名和密码进行修改，创建一个新的数据库grafana，我的结果如下。<br><img src="/../img/wljhylyxtsj/mysql.png" alt="mysql"></li><li>运行代码。<ol><li>因为<code>qostopo.py</code>使用了Ryu的REST API，因此需要运行<code>ryu/ryu/app/ofctl_rest.py</code>，可以将其复制到<code>research_code</code>目录下，同时需要修改<code>qostopo.py</code>的IP地址位ubuntu的IP。启动ryu控制器:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ryu-manager afqos.py ofctl_rest.py<br></code></pre></td></tr></table></figure><img src="/../img/wljhylyxtsj/ryu-manager.png" alt="ryu-manager"></li><li>运行拓扑：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> python3 qostopo.py<br></code></pre></td></tr></table></figure><img src="/../img/wljhylyxtsj/qostopo.png" alt="qostopo"></li><li>代码每一次测试需要5min，每次对交换机2（模拟边缘路由器）进行meter表限速(实际拓扑如下)。<br><img src="/../img/wljhylyxtsj/topo.png"></li><li>试了一下，对于<code>qostopo.py</code>有两个问题：首先h2到h6的iperf测试出现问题，h2似乎将h7的IP作为h6的IP；然后在测试后半段，传输的数据都变成了0。对于<code>afqos.py</code>有一个问题：数据库里面并没有任何流信息。</li></ol></li><li>debug：<ol><li>我尝试直接输出每个主机的IP，然后发现确实h6和h7的IP是一样的，查看前面的代码发现，原来作者将h6的IP设置错了，应该是192.168.0.132才对。其实从前面的ping测试h7有问题也应该想到的，不知道作者做实验的时候发现没有。修改了一下，h6果然有了输出。</li><li>然后就是，测试后半段的时候，iperf得到的输出显示的带宽很低，我就感觉是meter表限速的问题，应该是把速度限制的太低了。查看<code>ofctl_rest.py</code>，里面就有meter表配置限速的REST API地址。查看发现，meter表的限速的确十分不合理。<img src=../img/wljhylyxtsj/meterconfig_2_1.png width="50%"></li><li>后面试着修改了一下<code>qostopo.py</code>，只测一次60s时间，然后把client端的带宽都记录下，用作和server端对比。后来理解了，原来是因为client每2s发一次请求，后面的请求比如58-60s的请求，前面0-58s就没有数据，但是iperf还是显示了0-58s的传输带宽，这部分当然是0了。因此，每一次请求实际的测出来的带宽应该是最后2s显示的带宽，而不是整个时间的带宽。</li><li>但是，meter表的带宽限速还是有问题，这个需要看<code>afqos.py</code>，具体分析带宽分配算法的运行过程。分析后发现，默认是aqos算法，而且初始的带宽分配也和<code>qostopo.py</code>不同，修改一下，重新运行。得到的meter表就比较合理，最后meter表的限速也变成了最初的配置。但是每条流实际的需要带宽和测出的带宽还有差距，感觉算法应该存在一定问题。</li><li>研究了一下<code>afqos.py</code>，发现还是有点问题，比如数据库的表前面是qos，后面又有个flow，我就统一改成了qos。而且表初始化时没有bw列，但是插入数据时又有bw列，我后面就加了上去。总体来看，应该是作者在测试时，配置的数据库不同，（<code>afqos.py</code>是qos表，<code>flow_rate.py</code>是flow表）代码打包上传后，没有仔细修改查看。</li></ol></li><li>最后，也是在数据库中看到了afqos算法在带宽分配为8000，6000，4000，2000时的数据。<br><img src="/../img/wljhylyxtsj/qos_table_test.png" alt="qos_table_test"></li><li>考虑了一下，还是直接试试<code>production_code/allocation_app.py</code>，毕竟作者说这部分代码是经过测试了的。但是这个代码是没有其他数据的（比如，s2实际的传输字节），只能通过iperf查看测试的带宽情况。所以后面的结果展示用的还是<code>afqos.py</code>的结果。</li></ol><h3 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5. 实验结果"></a>5. 实验结果</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;由于缺乏合理的数据分析手段，得到的数据结果（有iperf的测试数据，数据库保存的各个流的流速信息），还有就是算法实际分配的带宽（这部分难以实时收集，或者对应每一秒的流速，因为REST API的内容是实时更新的，而且最后的结果显示的预配置的结果）。我虽然可以收集这些信息，但是要想作者一样进行前4s的带宽分配对比，还是比较困难。同时吞吐量的对比我也没想到怎么做，因为要知道预期的吞吐量和实际的吞吐量，这两个应该对应于meter表配置的流速和实际的流速，前面说过了，因为实验测试很快，我无法得到meter表每一秒的流速。</p><h4 id="5-1-结果展示"><a href="#5-1-结果展示" class="headerlink" title="5.1 结果展示"></a>5.1 结果展示</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;这部分只能展示一下iperf测试的数据结果、数据库保存的流速信息、交换机2上的meter表的某个时间的限速信息。<br><strong>note</strong>：修改了一下<code>afqos.py</code>，把数据库里一些空字段（这个是用在<code>flow_rate.py</code>里面的）删除了。<br>实验中各个流预分配带宽均为：8000，6000，4000，2000；各个流的实际流速是根据大致流速和实验时间的最小二乘算法估计值，在预设置的大致流速左右波动。</p><ol><li>各个流的大致流速：7000，5000，3000，1000<ol><li>aqos算法， <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/iperf_7_5_3_1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/mysql_7_5_3_1.png"></div><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/meter_7_5_3_1.png"></div></div></div></li><li>afqos算法，<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/iperf_f_7_5_3_1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/mysql_f_7_5_3_1.png"></div><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/meter_f_7_5_3_1.png"></div></div></div></li></ol></li><li>各个流的大致流速：8000，6000，4000，2000<ol><li>aqos算法<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/iperf_8_6_4_2.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/mysql_8_6_4_2.png"></div><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/meter_8_6_4_2.png"></div></div></div></li><li>afqos算法<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/iperf_f_8_6_4_2.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/mysql_f_8_6_4_2.png"></div><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/meter_f_8_6_4_2.png"></div></div></div></li></ol></li><li>各个流的大致流速：9000，7000，5000，3000<ol><li>aqos算法<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/iperf_9_7_5_3.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/mysql_9_7_5_3.png"></div><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/meter_9_7_5_3.png"></div></div></div></li><li>afqos算法<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/iperf_f_9_7_5_3.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/mysql_f_9_7_5_3.png"></div><div class="group-image-wrap"><img src="/../img/wljhylyxtsj/meter_f_9_7_5_3.png"></div></div></div></li></ol></li></ol><h4 id="5-2-结果分析"><a href="#5-2-结果分析" class="headerlink" title="5.2 结果分析"></a>5.2 结果分析</h4><ol><li>在带宽较为充足时，从上面meter表中可以很清楚的发现aqos算法和afqos算法的一个明显区别：aqos算法只是分配需要的带宽，而afqos算法将可用带宽尽可能分配。比如在7000，5000，3000，1000的实验中，aqos算法某一时刻分配的带宽为：6478、4259、3211、897，总分配带宽为14845；而aqos算法因为所有流都没有超过预定带宽，所以分配的带宽几乎在实验过程中一直保持：8000、6000、4000、2000，总分配带宽为20000。</li><li>再看可用带宽较为充分利用时，因为无法看到同一时刻的流速和对应的实时meter表，只能从总分配带宽中看出一些信息。某一时刻，aqos算法总分配带宽是19078，某一时刻，afqos算法总分配带宽19998。可以理解出来，这就是作者说的，为借用带宽的流留下一些空隙，也就是实际上会比需要的多分配一些带宽，以防突发的流量，从而减少丢包，提升吞吐量。</li><li>最后是可用带宽不足的情况，两种算法都自然而然的选择从BE流中获取带宽，导致BE流的meter表限速非常低，但是在sql表中测量的4的流速也有2000-3000的部分，是否代码哪部分出现问题了呢？哦，实际上的限速发生在出了交换机2之后，所以2的速度没有明显改变，应该是看交换机3的流速，重新看了一下，确实没问题。关于mysql的图片已更新，更新之后，其实第一个看不出什么，几乎是switch2多少流速，switch3就多少流速；第二个情况下，afqos算法的mysql图片可以看出确实限速了，而aqos算法可能因为生成的流速比较小，导致限速不明显。</li></ol><h3 id="6-讨论和总结"><a href="#6-讨论和总结" class="headerlink" title="6. 讨论和总结"></a>6. 讨论和总结</h3><h4 id="6-1-复现的挑战"><a href="#6-1-复现的挑战" class="headerlink" title="6.1 复现的挑战"></a>6.1 复现的挑战</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;复现这篇论文，我觉得最大的挑战，还是环境和运行方法。因为作者在README中只是简单结束了各个文件的内容和作用，并没有给出她测试时的详细环境和配置，以及测试方法，所以当时我尝试了很久，也遇到了很多报错。比如，作者的数据库配置没有介绍清楚，我只能根据代码摸索，自己建立数据库，建表，添加字段等；作者没有提到她的Ryu APP需要REST API的支持，我是自己发现然后添加的。当然，还有一些代码上的小错误，比如虚拟主机的IP写错了，数据库的表名称其实前后冲突了，算法的选择需要手动配置等。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;解决了这些问题，在就是数据的处理问题。得到的meter表限速没有保存，更新太快，难以和数据库的流速信息对应，只能大致比较一下；还有iperf工具得到的带宽数据不好分析，而且其带宽结果在测试后期明显偏低，和数据库的保存的流速信息不符，只能作为参考，难以利用。缺乏这些数据，没有办法像作者一样，得出不同情况下前四秒的带宽分配图，只有吞吐量图，由于iperf测试出的实际带宽明显不合理，和理论带宽的比值甚至不足50%，因此不能参考。</p><h4 id="6-2-改进建议"><a href="#6-2-改进建议" class="headerlink" title="6.2 改进建议"></a>6.2 改进建议</h4><ol><li>我希望作者能够考虑将她的测试环境（作者提到的window主机和ubuntu主机环境）发布到网上，方便复现；同时配上复现方法的文档，这样可以省去读者复现时摸索的时间</li><li>我希望作者优化一下<code>research_code</code>，里面存在一些小错误，而且没有办法实现自动化的测试，每测试一种情况，都需要重新配置，十分麻烦。</li><li>作者没有提供良好的数据分析处理功能，手动分析没有可行性，可以参考前面提到的问题进行修改。</li><li>最后就是算法方面，我在分析算法时提到算法2其实最后一部分代码不可能执行，希望作者可以优化代码逻辑，能确实为BE流考虑。</li></ol><h4 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a>6.3 总结</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;这篇论文的背景和研究问题是比较容易理解的，就是在SDN架构下利用实现流量的Qos配置，实现方法是用meter表进行限速来对不同类型流量进行带宽分配和重分发。和其他研究的区别在于，研究对象是边缘路由器，流量比较拥塞，可能有突发流量，而且没有使用其他技术（仅用到了meter表）。论文在实验部分大致设置了三种情况：流量较小，流量适中，流量较大；当前流速其实是通过前一秒的流速用最小二乘方法和其他的数学方法预测到的，因此是为下一次的流量限速；自己的afqos算法对比了aqos算法，有9%的性能提升。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;论文复现时遇到了一些问题，我尽量解决了，得到了和论文中大致相同的结果。但是对于数据的分析，由于作者没有在论文中提到，而且在代码也没发现，我就没有进行。但是从本报告的结果展示中，可以得出作者的算法确实在一定程度上优于aqos算法。</p>]]></content>
    
    
    <categories>
      
      <category>实验报告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sdn</tag>
      
      <tag>实验报告</tag>
      
      <tag>qos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于syzkaller+codeql的漏洞复现实验报告</title>
    <link href="/2024/09/17/%E5%9F%BA%E4%BA%8Esyzkaller+codeql%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/2024/09/17/%E5%9F%BA%E4%BA%8Esyzkaller+codeql%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="基于syzkaller-CodeQL的漏洞复现实验报告"><a href="#基于syzkaller-CodeQL的漏洞复现实验报告" class="headerlink" title="基于syzkaller+CodeQL的漏洞复现实验报告"></a>基于syzkaller+CodeQL的漏洞复现实验报告</h1><h2 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1. 实验目的"></a>1. 实验目的</h2><p>分析syzkaller实现原理，描述利用syzkaller和CodeQL用法，并对具体cve案例展开测试（至少3个）</p><h2 id="2-实验技术原理"><a href="#2-实验技术原理" class="headerlink" title="2. 实验技术原理"></a>2. 实验技术原理</h2><h3 id="2-1-syzkaller技术原理"><a href="#2-1-syzkaller技术原理" class="headerlink" title="2.1 syzkaller技术原理"></a>2.1 syzkaller技术原理</h3><p>参考：<a href="https://github.com/google/syzkaller">syzkaller - kernel fuzzer</a></p><h4 id="2-1-1-syzkaller简介"><a href="#2-1-1-syzkaller简介" class="headerlink" title="2.1.1 syzkaller简介"></a>2.1.1 syzkaller简介</h4><p>syzkaller是一个无监督的覆盖率引导的内核模糊测试器，支持操作系统：FreeBSD, Fuchsia, gVisor, Linux, NetBSD, OpenBSD, Windows。</p><p>syzkaller 系统的流程结构如下图所示：<br><img src="/../img/syzkaller+codeql/process_structure.png" alt="process_structure"></p><ul><li>syz-manager负责：<ul><li>启动&#x2F;重启&#x2F;监控虚拟机实例，每个虚拟机都启动一个syz-executor进程</li><li>实际模糊处理过程（输入生成、变异、最小化等）。</li><li>生成持久语料库和崩溃存储。</li></ul></li><li>syz-executor：<ul><li>通过RPC(远程过程调用，Remote Procedure Call)与syz-manager通信，接收需要执行的程序，然后报告结果（错误状态，收集的覆盖率等）</li><li>启动临时的子进程来执行一系列系统调用，与内核通信，接收内核的覆盖率信息</li></ul></li><li>sshd&#x2F;adbd:<ul><li>syz-manage通过ssh登录到虚拟机实例，然后调用syz-executor</li></ul></li></ul><h4 id="2-1-2-系统调用描述文件"><a href="#2-1-2-系统调用描述文件" class="headerlink" title="2.1.2 系统调用描述文件"></a>2.1.2 系统调用描述文件</h4><p>本节参考：</p><ol><li><p><a href="https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions.md">Syscall descriptions</a></p></li><li><p><a href="https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions_syntax.md">Syscall description language</a></p></li></ol><p>syz-manager进程根据系统调用描述生成程序，特定的系统描述生成文件对应特定的系统调用，针对特定内核的特定系统调用进行测试，更容易找到发现crashes(崩溃)，从而提高fuzzing的效率。<br>syzkaller 使用系统调用接口的声明性描述来操作程序，这种声明性描述或者系统调用描述，在syzkaller代码目录一般是保存为<code>sys/$OS/*.txt</code>，例如<code>sys/linux/dev_snd_midi.txt</code>就是Linux MIDI 接口的描述。下面是一个读写文件的系统调用描述文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">open</span><span class="hljs-params">(file filename, flags flags[open_flags], mode flags[open_mode])</span></span> fd<br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(fd fd, buf buffer[out], count len[buf])</span></span><br><span class="hljs-function"><span class="hljs-title">close</span><span class="hljs-params">(fd fd)</span></span><br>open_mode = S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH<br></code></pre></td></tr></table></figure><ul><li><code>open</code>：是系统调用函数</li><li><code>file filename</code>：file是名称（或者称为标识符），filename是类型</li><li><code>flags flags[open_flags]</code>：第一个flags是名称（或者称为标识符），第二个flags是类型，open_flags是一系列的值。意思是flags的值可以是open_flags中的一个。</li><li><code>mode flags[open_mode]</code>：mode是名称（或者称为标识符），flags是类型，open_mode是一系列的值，定义在下面。意思是mode的值可以是open_mode中的一个。</li><li><code>fd</code>是<code>open</code>函数返回值，一般先会使用<code>resource</code>关键字进行定义的，定义好了之后可以作为类型使用。</li><li><code>read</code>函数使用了<code>fd</code>资源，将内容存到buf（类型是buffer）里面。然后<code>close</code>函数接收<code>fd</code>作为参数，关闭文件。</li></ul><p>然后，转换后的描述文件用于生成、变异、执行、最小化、序列化和反序列化程序。程序是具有具体参数值的系统调用序列。下面是一个上面描述文件生成的程序的示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">r0 = <span class="hljs-built_in">open</span>(&amp;(<span class="hljs-number">0</span>x7f0000000000)=<span class="hljs-string">&quot;./file0&quot;</span>, <span class="hljs-number">0</span>x3, <span class="hljs-number">0</span>x9)<br><span class="hljs-function"><span class="hljs-title">read</span><span class="hljs-params">(r0, &amp;(<span class="hljs-number">0</span>x7f0000000000)</span></span>, <span class="hljs-number">42</span>)<br><span class="hljs-function"><span class="hljs-title">close</span><span class="hljs-params">(r0)</span></span><br></code></pre></td></tr></table></figure><p>将文本系统调用描述编译为 syzkaller 用来实际生成程序的机器可用形式的过程包括 2 个步骤。</p><ol><li>使用 syz-extract 实用程序从内核源中提取符号常量的值。 syz-extract 生成一个小型 C 程序，其中包括由 include 指令引用的内核头、定义由 Define 指令指定的宏并打印符号常量的值。结果存储在 .const 文件中，每个架构一个。例如，<code>sys/linux/dev_ptmx.txt</code> 被转换为 <code>sys/linux/dev_ptmx.txt.const</code>。</li><li>使用 syz-sysgen 实用程序将描述转换为 Go 代码（实际的编译器代码位于 <code>pkg/ast</code> 和 <code>pkg/compiler</code> 中）。此步骤使用系统调用描述和第一步中生成的 const 文件，并生成 prog&#x2F;types.go 中定义的系统调用和类型类型的实例化。</li></ol><h4 id="2-1-3-覆盖率"><a href="#2-1-3-覆盖率" class="headerlink" title="2.1.3 覆盖率"></a>2.1.3 覆盖率</h4><p>参考：<a href="https://github.com/google/syzkaller/blob/master/docs/coverage.md">coverage</a><br>syzkaller 使用Sanitizer coverage（跟踪模式）和 KCOV 进行覆盖率收集。 gcc 也支持 Sanitizer coverage ，其他一些操作系统也支持 KCOV。</p><p>覆盖率基于跟踪编译器插入到目标代码中的覆盖点。覆盖点通常指基本代码块或 CFG 边缘（这取决于构建期间使用的编译器和检测模式，例如，对于 Linux 和 clang，默认模式是 CFG 边缘，而对于 gcc，默认模式是基本块）。请注意，在经过大量转换和优化之后，编译器会在中端插入覆盖点。因此，结果覆盖率可能与源代码的相关性较差。评估覆盖率通常仍然非常有用，可以了解模糊测试的整​​体进度，但要持保留态度。</p><p>在syzkaller的web接口：<a href="http://127.0.0.1:56741/">syzkaller</a>，coverage后面的数字，代表覆盖率。点击之后，可以查看linux内核源代码各个文件的结果覆盖率。如下图所示，<code>--</code>代表该目录没有覆盖，<code>X% of N</code>代表现在N个覆盖点的X%被覆盖，点击X%可以看到对应文件中各个函数的覆盖率。<br><img src="/../img/syzkaller+codeql/coverage.png" alt="coverage"></p><p>点击对应的文件，可以看到源代码和颜色标记，不同的颜色标记有不同的含义。<br><img src="/../img/syzkaller+codeql/coverage_color.png" alt="coverage_color"></p><ul><li>黑色：与该行关联的所有 PC 值都被覆盖。左侧有一个数字，表示有多少程序已触发执行与该行关联的 PC 值。您可以单击该数字，它将打开最后执行的程序。</li><li>橘色：有多个与该行关联的 PC 值，但并非所有这些值都被执行了。同样，源代码行中还留有数字，可以单击该数字来打开触发相关 PC 值的最后一个程序</li><li>深红色：该行所在的函数（符号）没有任何覆盖，即该函数根本没有执行。</li><li>红色：该行没有覆盖，即所在的函数被执行了，但该行没有执行。</li><li>灰色：与该行关联的PC值不会被检测，或者源行根本不会生成代码。</li></ul><p>syz-cover是syzkaller仓库的一个工具，可以根据原始覆盖数据生成覆盖报告</p><h4 id="2-1-4-崩溃报告"><a href="#2-1-4-崩溃报告" class="headerlink" title="2.1.4 崩溃报告"></a>2.1.4 崩溃报告</h4><p>当 syzkaller 发现崩溃程序时，它会将有关它的信息保存到 <code>workdir/crashes</code> 目录中。该目录针对每种独特的崩溃类型包含一个子目录。每个子目录都包含一个描述文件，其中包含标识崩溃的唯一字符串（用于错误识别和重复数据删除）；以及最多 100 个 logN 和 reportN 文件，每台测试机崩溃一对，下面是我实验时的crashes目录树：<br><img src="/../img/syzkaller+codeql/tree_crashes.png" alt="tree_crashes"><br>logN 文件包含原始 syzkaller 日志，并包括内核控制台输出以及崩溃之前执行的程序。这些日志可以输入 syz-repro 工具进行崩溃定位和最小化，或者输入 syz-execprog 工具进行手动本地化。 reportN 文件包含后处理和符号化的内核崩溃报告（例如 KASAN 报告）。通常只需要一对这些文件（即 log0 和 report0），因为它们可能都描述相同的内核错误。</p><h3 id="2-2-CodeQL技术原理"><a href="#2-2-CodeQL技术原理" class="headerlink" title="2.2 CodeQL技术原理"></a>2.2 CodeQL技术原理</h3><h4 id="2-2-1-CodeQL简介"><a href="#2-2-1-CodeQL简介" class="headerlink" title="2.2.1 CodeQL简介"></a>2.2.1 CodeQL简介</h4><p>参考：<a href="https://codeql.github.com/docs/codeql-overview/about-codeql/">About CodeQL</a><br>CodeQL 是开发人员用来自动进行安全检查、安全研究人员用来执行变体分析的分析引擎。在 CodeQL 中，代码被视为数据。安全漏洞、错误和其他错误被建模为可以针对从代码中提取的数据库执行的查询。<br>CodeQL 分析包含三个步骤：</p><ul><li>通过创建CodeQL数据库来准备代码</li><li>针对数据库运行CodeQL查询</li><li>解释查询结果</li></ul><ol><li>数据库创建<ol><li>为了创建数据库，CodeQL首先提取代码库中每个源文件的单个关系表示。提取过程：<ul><li>编译型语言：监控代码编译过程，收集源文件的语法信息和语义信息 </li><li>解释型语言：直接在源代码中运行，获取代码库的准确表示</li></ul></li><li>分析所需的所有数据（关系数据、复制的源文件和特定于语言的数据库架构）将导入到一个目录中，称为CodeQL数据库。</li></ol><ul><li>CodeQL数据库包括抽象语法树、数据流图和控制流图的表示。</li><li>CodeQL数据库为每种语言都设计了关键的表，这些表在CodeOL库中被抽象为类，使得编写查询更加容易。</li></ul></li><li>查询执行<ul><li>CodeQL查询是用专门设计的面向对象查询语言（称为 QL）编写的。使用CodeQL for VS Code扩展或CodeQL CLI运行CodeQL仓库的取出的查询。</li></ul></li><li>查询结果<ul><li>将查询执行期间生成的结果转换为在源代码上下文中更有意义的形式，从而突出显示查询中旨在查找的潜在问题。</li><li>查询包含指示如何解释结果的元数据属性。例如：在代码的某个位置显示一条消息；显示一系列位置等。</li><li>查询的结果可以用作代码审查和分类。对于CodeQL for VS Code扩展，解释好的查询直接显示在代码中，对于CodeQL CLI，查询结果有多种输出格式。</li></ul></li></ol><h4 id="2-2-2-编写CodeQL查询"><a href="#2-2-2-编写CodeQL查询" class="headerlink" title="2.2.2 编写CodeQL查询"></a>2.2.2 编写CodeQL查询</h4><p>参考：<a href="https://codeql.github.com/docs/writing-codeql-queries/">https://codeql.github.com/docs/writing-codeql-queries/</a></p><h2 id="3-实验详细步骤"><a href="#3-实验详细步骤" class="headerlink" title="3. 实验详细步骤"></a>3. 实验详细步骤</h2><h3 id="3-1-基础环境"><a href="#3-1-基础环境" class="headerlink" title="3.1 基础环境"></a>3.1 基础环境</h3><ul><li>操作系统：Windows 11</li><li>架构：x86_64</li><li>软件：VMware 17.0.0 build-20800274</li><li>虚拟机：Ubuntu 20.04</li></ul><h3 id="3-2-syzkaller实验"><a href="#3-2-syzkaller实验" class="headerlink" title="3.2 syzkaller实验"></a>3.2 syzkaller实验</h3><h4 id="3-2-1-syzkaller环境搭建"><a href="#3-2-1-syzkaller环境搭建" class="headerlink" title="3.2.1 syzkaller环境搭建"></a>3.2.1 syzkaller环境搭建</h4><p>本节参考文档：<a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup.md">How to set up syzkaller</a><br>要使用syzkaller，需要下面四个组件</p><ul><li>Go语言编译器和syzkaller本身</li><li>支持覆盖率的C编译器</li><li>支持覆盖率的Linux内核</li><li>虚拟机或物理设备</li></ul><h5 id="3-2-1-1-Go和syzkaller"><a href="#3-2-1-1-Go和syzkaller" class="headerlink" title="3.2.1.1 Go和syzkaller"></a>3.2.1.1 Go和syzkaller</h5><ol><li><p>syzkaller是用Go编写的，并且为了编译需要Go 1.21+工具链。这个工具链可以按照以下步骤安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://dl.google.com/go/go1.21.4.linux-amd64.tar.gz<br>tar -xf go1.21.4.linux-amd64.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以将这下面部分放在~/.bashrc内，通过<span class="hljs-built_in">source</span> .bashrc更新配置</span><br>export GOROOT=`pwd`/go<br>export PATH=$GOROOT/bin:$PATH<br></code></pre></td></tr></table></figure><p> 实验过程如下<br> <img src="/../img/syzkaller+codeql/Go_download.png" alt="Go_download"><br> <img src="/../img/syzkaller+codeql/Go_bashrc_config.png" alt="Go_bashrc_config"><br> <img src="/../img/syzkaller+codeql/Go_test.png" alt="Go_test"></p></li><li><p>下载和编译syzkaller</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/google/syzkaller<br>cd syzkaller<br>make<br></code></pre></td></tr></table></figure><p> 在<code>bin</code>目录下看到对应的二进制文件即为成功<br> <img src="/../img/syzkaller+codeql/syzkaller_bin.png" alt="syzkaller_bin"></p></li></ol><h5 id="3-2-1-2-C编译器"><a href="#3-2-1-2-C编译器" class="headerlink" title="3.2.1.2 C编译器"></a>3.2.1.2 C编译器</h5><p>syzkaller 是一种以覆盖率为导向的模糊器，因此需要内核支持覆盖率，GCC 6.1.0及以上支持覆盖率。<br>确认gcc版本高于6.1.0<br><img src="/../img/syzkaller+codeql/gcc_version.png" alt="gcc_version"></p><h5 id="3-2-1-3-Linux内核"><a href="#3-2-1-3-Linux内核" class="headerlink" title="3.2.1.3 Linux内核"></a>3.2.1.3 Linux内核</h5><p>除了 GCC 中的覆盖率支持外，syzkaller还需要内核方面的支持。 KCOV 是在 4.6 版的 Linux 内核中加入的，可通过 CONFIG_KCOV&#x3D;y 内核配置选项启用。<br>这里指的应该是要fuzz的linux内核版本应该大于4.6，而不是说syzkaller的宿主机的linux内核版本。</p><h5 id="3-2-1-4-VM建立"><a href="#3-2-1-4-VM建立" class="headerlink" title="3.2.1.4 VM建立"></a>3.2.1.4 VM建立</h5><p>syzkaller在工作虚拟机或物理设备上执行内核模糊测试，这些工作环境被称为VMs。开箱即用的 syzkaller 支持 QEMU、kvmtool 和 GCE 虚拟机、安卓设备和 Odroid C2 板。<br>后续还有一些要求：比如VM支持联网，开启ssh服务，支持root ssh无需密码的身份认证。<br>本次实验采用的VM是QEMU，因此需要在宿主机（也就是虚拟机ubuntu20.04）上安装QEMU。</p><h5 id="3-2-1-5-内核模糊测试验证"><a href="#3-2-1-5-内核模糊测试验证" class="headerlink" title="3.2.1.5 内核模糊测试验证"></a>3.2.1.5 内核模糊测试验证</h5><p>本节参考文档：<a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md">Setup: Ubuntu host, QEMU vm, x86-64 kernel</a><br>以下是如何在 QEMU 中对 x86-64 内核进行模糊测试的说明，主机为 Ubuntu，QEMU 实例为 Debian Bullseye。</p><ol><li><p>安装依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt install make gcc flex bison libncurses-dev libelf-dev libssl-dev<br></code></pre></td></tr></table></figure></li><li><p>GCC：ubuntu20.04满足要求，无需更新</p></li><li><p>内核：这是指要fuzz的内核</p><ol><li>下载源码  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --branch v6.2 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git<br></code></pre></td></tr></table></figure>  这里官方文档的git链接可能没有权限，我就改成了https的链接<br>  <img src="/../img/syzkaller+codeql/git_clone_linux.png" alt="git_clone_linux"></li><li>生成默认配置文件  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd linux<br>make defconfig<br>make kvm_guest.config<br></code></pre></td></tr></table></figure>  <img src="/../img/syzkaller+codeql/generate_default_configs.png" alt="generate_default_configs"></li><li>启动需要的配置选项：在linux目录下有<code>.config</code>文件，至少需要启动以下选项  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs conf"># Coverage collection.<br>CONFIG_KCOV=y<br><br># Debug info for symbolization.<br>CONFIG_DEBUG_INFO_DWARF4=y<br><br># Memory bug detector<br>CONFIG_KASAN=y<br>CONFIG_KASAN_INLINE=y<br><br># Required for Debian Stretch and later<br>CONFIG_CONFIGFS_FS=y<br>CONFIG_SECURITYFS=y<br><br>CONFIG_CMDLINE_BOOL=y<br>CONFIG_CMDLINE=&quot;net.ifnames=0&quot;<br></code></pre></td></tr></table></figure>   因为我后面运行syzkaller时有错误：<blockquote><p>Failed to start Raise network interfaces</p></blockquote>  根据<a href="https://github.com/google/syzkaller/blob/master/docs/linux/troubleshooting.md">Troubleshooting</a>可知需要在配置文件中增加<code>&quot;CONFIG_CMDLINE_BOOL=y   CONFIG_CMDLINE=&quot;net.ifnames=0&quot;&quot; </code>。<br>  重新生成配置文件  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make olddefconfig<br></code></pre></td></tr></table></figure>  <img src="/../img/syzkaller+codeql/make_olddefconfig.png" alt="make_olddefconfig"></li><li>编译内核  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j`nproc`<br></code></pre></td></tr></table></figure>  如果出现错误： <code>make: *** [Makefile:1161:vmlinux]  Error 137</code>应该是内存不够，建议ubuntu关掉其他程序。<br>  查看生成的vmlinux和bzImage<br>  <img src="/../img/syzkaller+codeql/ls_vmlinux_bzImage.png" alt="ls_vmlinux_bzImage"></li></ol></li><li><p>镜像</p><ol><li>安装debootstrap  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install debootstrap<br></code></pre></td></tr></table></figure></li><li>创建Debian Bullseye Linux镜像  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir image<br>cd image/<br>wget https://raw.githubusercontent.com/google/syzkaller/master/tools/create-image.sh -O create-image.sh<br>chmod +x create-image.sh<br>./create-image.sh<br></code></pre></td></tr></table></figure>  创建完成后，可以看到生成了<code>bullseye.img</code>镜像文件<br>  <img src="/../img/syzkaller+codeql/image_ll.png" alt="image_ll"></li><li>其他选项：<code>create-image.sh</code>有很多选项，比如指定镜像的版本，附加的工具等。实验仅仅使用了默认选项。</li></ol></li><li><p>QEMU</p><ol><li>安装QEMU  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install qemu-system-x86<br></code></pre></td></tr></table></figure></li><li>验证：确保内核启动和sshd开启，可以把下面的命令保存为<code>boot.sh</code>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br>    -m 2G \<br>    -smp 2 \<br>    -kernel /home/ubuntu/linux/arch/x86/boot/bzImage \<br>    -append &quot;console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0&quot; \<br>    -drive file=/home/ubuntu/image/bullseye.img,format=raw \<br>    -net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \<br>    -net nic,model=e1000 \<br>    -enable-kvm \<br>    -nographic \<br>    -pidfile vm.pid \<br>    2&gt;&amp;1 | tee vm.log<br></code></pre></td></tr></table></figure>  运行报错，原因是vmware虚拟机没有开启虚拟化,因此无法在虚拟机（ubuntu20.04）中再开启qemu的虚拟机<br>  <img src="/../img/syzkaller+codeql/qemu_not_virtualization.png" alt="qemu_not_virtualization"><br>  首先要开启ubuntu20.04的cpu虚拟化<br>  <img src="/../img/syzkaller+codeql/vmware_cpu_virtural.png" alt="vmware_cpu_virtual"><br>  但是之后启动虚拟机，vmware报错：“此平台不支持虚拟化的 Intel VT-x&#x2F;EPT。不使用虚拟化的 Intel VT-x&#x2F;EPT，是否继续?”<br>  该问题的解决方案参考<a href="https://blog.csdn.net/u013669912/article/details/130920193?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-130920193-blog-134643080.235%5Ev43%5Econtrol&spm=1001.2101.3001.4242.1&utm_relevant_index=3">VMware Workstation 此平台不支持虚拟化的 Intel VT-x&#x2F;EPT …不支持嵌套虚拟化。模块“HV”启动失败…不支持使用虚拟化性能计数器。模块“VPMC“启动失败</a>，我把该链接上的步骤都做了一遍才成功了。<br>  重新运行以上命令，启动qemu，输入root即可登录<br>  <img src="/../img/syzkaller+codeql/qemu_linux_start.png" alt="qemu_linux_start"><br>  使用ssh登录到qemu实例  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -i ~/image/bullseye.id_rsa -p 10021 -o &quot;StrictHostKeyChecking no&quot; root@localhost<br></code></pre></td></tr></table></figure>  <img src="/../img/syzkaller+codeql/qemu_ssh_login.png" alt="qemu_ssh_login"><br>  要杀死正在运行的 QEMU 实例，请按 Ctrl+A 然后按 X 或者在终端运行命令  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill $(cat vm.pid)<br></code></pre></td></tr></table></figure></li></ol></li><li><p>syzkaller</p><ol><li>前面已经编译好了syzkaller，接下来需要编写配置文件<code>my.cfg</code>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linux/amd64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;http&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1:56741&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;workdir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ubuntu/syzkaller/workdir&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kernel_obj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ubuntu/linux&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ubuntu/image/bullseye.img&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sshkey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ubuntu/image/bullseye.id_rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;syzkaller&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ubuntu/syzkaller&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;procs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;qemu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;kernel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/home/ubuntu/linux/arch/x86/boot/bzImage&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cpu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;mem&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li>运行syzkaller,先在syzkaller下新建一个<code>workdir</code>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir workdir<br>./bin/syz-manager -config=my.cfg<br></code></pre></td></tr></table></figure>  <img src="/../img/syzkaller+codeql/syzkaller_run.png" alt="syzkaller_run"><br>  成功启动了2224个系统调用，其他的一些没有启动，可能是设置的原因，暂时不深究。</li><li>自此，过了一遍用syzkaller进行linux内核的模糊测试的流程，证明syzkaller的环境已经搭建成功了。</li></ol></li></ol><h4 id="3-2-2-CVE复现"><a href="#3-2-2-CVE复现" class="headerlink" title="3.2.2 CVE复现"></a>3.2.2 CVE复现</h4><p>本节主要内容是复现syzkaller发现的bug，具体有两个CVE:CVE-2018-14646和CVE-2019-19769。关于syzkaller发现的linux bugs可以在<a href="https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs.md">found_bugs</a>找到。<br>因为不同的cve针对的linux内核版本不一样，因此我先下载了完整的linux github仓库的代码，数据比较大，下载需要一些时间。<br><img src="/../img/syzkaller+codeql/git_clone_linux_all.png" alt="git_clone_linux_all"></p><h5 id="3-2-2-1-CVE-2018-14646"><a href="#3-2-2-1-CVE-2018-14646" class="headerlink" title="3.2.2.1 CVE-2018-14646"></a>3.2.2.1 CVE-2018-14646</h5><p>该cve的有关信息在网站<a href="https://nvd.nist.gov/vuln/detail/CVE-2018-14646">CVE-2018-14646 Detail</a>中找到，针对的linux内核版本为4.15-rc8之前。但是syzkaller要求linux内核版本在4.6之后,因此我选择了版本4.15-rc1进行测试。</p><ol><li>切换内核版本<br><img src="/../img/syzkaller+codeql/git_checkout_4.15_rc1.png" alt="git_checkout_4.15_rc1"></li><li>生成默认配置文件<br><img src="/../img/syzkaller+codeql/4.15_rc1_generate_default_config.png" alt="4.15_rc1_generate_default_config"></li><li>启动需要的配置选项：这里和前面的差不多，需要注意的是<code>.config</code>文件中没有<code>CONFIG_DEBUG_INFO_DWARF4</code>选项，只有<code>CONFIG_DEBUG_INFO</code>选项，开启该选项即可。即<code>CONFIG_DEBUG_INFO=y</code><br>重新生成配置文件<br><img src="/../img/syzkaller+codeql/4.15_rc1_make_olddefconfig.png" alt="4.15_rc1_make_olddefconfig"></li><li>编译内核，遇到报错：<br><img src="/../img/syzkaller+codeql/4.15_rc1_make_error.png" alt="4.15_rc1_make_error"><br>查询<code>cc1: all warnings being treated as errors</code>后得知，是因为Makefile设置gcc参数<code>-Werror</code>的原因，需要在Makefile中删除对应的<code>-Werror</code>，但是linux内核的makefile太多，而且很复杂，尝试了很多网上的方法，还是会有这种错误。</li><li>选择其他版本的内核:v4.14.<br><img src="/../img/syzkaller+codeql/git_checkout_v4.14.png" alt="git_checkout_v4.14"></li><li>生成默认配置文件，然后启动需要的配置选项，参考2,3步内容。然后编译内核：还是遇到错误:<code>error New address family defined, please update secclass_map.</code><br><img src="/../img/syzkaller+codeql/4.14_make_error_1.png" alt="4.14_make_error_1"><br>根据这个linux commit：<a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=760f8522ce08">selinux: use kernel linux&#x2F;socket.h for genheaders and mdp</a>修改。<br><code>make clean</code>然后重新编译，又出现新的错误：<br><img src="/../img/syzkaller+codeql/4.14_make_error_2.png" alt="4.14_make_error_2"><br>根据这个linux commit: <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=b21ebf2fb4cde1618915a97cc773e287ff49173e">x86: Treat R_X86_64_PLT32 as R_X86_64_PC32</a>修改，<code>make clean</code>然后重新编译内核，成功了。<br><img src="/../img/syzkaller+codeql/4.14_make_succuess.png" alt="4.4_make_success"></li><li>使用<code>boot.sh</code>，qemu启动内核试试：<br><img src="/../img/syzkaller+codeql/4.14_qemu_boot_fail.png" alt="4.14_qemu_boot_fail"><br>一直重复卡在这里了，在Booting the kernel时就重新开始了。猜想应该是内核或者配置不对，但是不知道怎么搞。找了很久的资料，终于根据这个链接<a href="https://unix.stackexchange.com/questions/461314/qemu-cannot-boot-locally-built-linux-kernel-anymore">QEMU cannot boot locally built Linux kernel anymore</a> 下面的回答有一个linux kernel的commit链接<a href="https://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git/commit/?id=e3d03598e8ae7d195af5d3d049596dec336f569f">x86&#x2F;build&#x2F;64: Force the linker to use 2MB page size</a>，根据这个链接修改linux内核的<code>./arch/x86/Makefile</code>文件，添加以下内容：<br><img src="/../img/syzkaller+codeql/4.14_arch_x86_Makefile.png" alt="arch_x86_Makefile"><br><code>make clean</code>，然后重新编译内核，运行<code>boot.sh</code>，启动qemu虚拟机：<br><img src="/../img/syzkaller+codeql/4.14_qemu_boot.png" alt="4.14_qemu_boot"><br>可以看到成功启动了。</li><li>启动syzkaller，等待运行结果<br><img src="/../img/syzkaller+codeql/2018_web_res_fail.png" alt="2018_web_res_fail"><br>跑了很久，是得到了很多crashes，但是没有预期的crash：<code>general protection fault in __netlink_ns_capable</code>。可能是时间过去很久了，现在的syzkaller能检测的crash更多了，很难发现当时的crash。所以还是用当时报告时用的linux内核版本和syzkaller试试吧。</li><li>相关信息可以在syzbot中找到，具体网址：<a href="https://syzkaller.appspot.com/bug?extid=e432865c29eb4c48c142">https://syzkaller.appspot.com/bug?extid=e432865c29eb4c48c142</a><br><img src="/../img/syzkaller+codeql/2018_syzboot.png" alt="2018_syzbot"><br>但是这个内核版本时4.15-rc5的，编译时遇到了前面4.15-rc1的问题，然后就是syzkaller我checkout到对应的commit后编译时遇到GO语言配置的问题，试了挺久的，也没找到解决办法，现在不知道该怎么办了。</li><li>想了以下，觉得还是这个cve太久远了，现在的一些工具配置都不同，很难复现当时的情况，所以会有很多奇怪的bug,又看了一下这个了链接：<a href="https://github.com/google/syzkaller/blob/master/docs/linux/found_bugs.md">found_bugs</a>，发现最近的一次commit也是4年前了，于是我就想能不能试试最近的cve。</li></ol><h5 id="3-2-2-2-CVE-2024-38567"><a href="#3-2-2-2-CVE-2024-38567" class="headerlink" title="3.2.2.2 CVE-2024-38567"></a>3.2.2.2 CVE-2024-38567</h5><p>在网上搜索了一下，选择了这个cve，然后最终在syzboot中找到了对应的crash:<br><img src="/../img/syzkaller+codeql/cve_2024_1_syzboot.png" alt="cve_2024_1_syzboot"><br>但是syzbot报告的时间是21年，直接现在的syzkaller跑，可能也得不到一样的结果。干脆试试用C程序复现吧。<br>对应的asserts在网页下面有下载链接：<br><img src="/../img/syzkaller+codeql/cve_2024_1_dist_image.png" alt="cve_2024_1_dist_image"><br>使用wget下载：<br><img src="/../img/syzkaller+codeql/cve_2024_1_wget.png" alt="cve_2024_1_wget"><br>参考<a href="https://github.com/google/syzkaller/blob/master/docs/syzbot_assets.md">Reproduce a bug with syzbot’s downloadable assets</a>进行实验。<br>使用unxz命令解压disk-fe24a97.raw.xz，得到disk-fe24a97.raw，然后使用qemu启动VM:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">qemu-system-x86_64 -m 2G -smp 2,<span class="hljs-attribute">sockets</span>=2,cores=1 -drive <span class="hljs-attribute">file</span>=./disk-fe24a97.raw,format=raw -net nic,<span class="hljs-attribute">model</span>=e1000 -net user,<span class="hljs-attribute">host</span>=10.0.2.10,hostfwd=tcp::10022-:22 -enable-kvm -nographic -snapshot<br></code></pre></td></tr></table></figure><p>构建和运行C复现程序<br><img src="/../img/syzkaller+codeql/cve_2024_1_c_repro.png" alt="cve_2024_1_c_repro"><br>然后在qemu的界面成功复现这个warning<br><img src="/../img/syzkaller+codeql/cve_2024_1_qemu.png"><br>和syzbot页面上的示例crash报告是差不多的，看来是没问题了。<br>还可以使用syz的复现程序，但其实差不多，就没做了。</p><h3 id="3-3-CodeQL实验"><a href="#3-3-CodeQL实验" class="headerlink" title="3.3 CodeQL实验"></a>3.3 CodeQL实验</h3><h4 id="3-3-1-CodeQL环境搭建"><a href="#3-3-1-CodeQL环境搭建" class="headerlink" title="3.3.1 CodeQL环境搭建"></a>3.3.1 CodeQL环境搭建</h4><h4 id="3-3-1-1-CodeQL-CLI安装"><a href="#3-3-1-1-CodeQL-CLI安装" class="headerlink" title="3.3.1.1 CodeQL CLI安装"></a>3.3.1.1 CodeQL CLI安装</h4><ol><li>在<a href="https://github.com/github/codeql-action/releases">https://github.com/github/codeql-action/releases</a> 下载最新的CodeQL CLI压缩包<br><img src="/../img/syzkaller+codeql/codeql_bundle_download.png" alt="codeql_buddle_download"></li><li>解压缩，验证CodeQL已经安装，<br><img src="/../img/syzkaller+codeql/codeql_tar.png" alt="codeql_tar"></li><li>在~&#x2F;.bashrc中添加CodeQL环境变量<br><img src="/../img/syzkaller+codeql/codeql_path.png" alt="codeql_path"><br><img src="/../img/syzkaller+codeql/codeql_path_verify.png" alt="codeql_path_verify"></li><li>测试CodeQL CLI配置<br><img src="/../img/syzkaller+codeql/codeql_test_config.png" alt="codeql_test_config"></li></ol><h4 id="3-3-1-2-CodeQL-VSCode扩展安装"><a href="#3-3-1-2-CodeQL-VSCode扩展安装" class="headerlink" title="3.3.1.2 CodeQL VSCode扩展安装"></a>3.3.1.2 CodeQL VSCode扩展安装</h4><ol><li>在vscode扩展中搜索codeql，安装<br><img src="/../img/syzkaller+codeql/codeql_vscode_install.png" alt="codeql_vscode_install"></li><li>检查CodeQL CLI接入到了扩展中：查看CodeQL扩展的Log<br><img src="/../img/syzkaller+codeql/codeql_vscode_log.png" alt="codeql_vscode_log"></li><li>设置CodeQL工作区<br><img src="/../img/syzkaller+codeql/codeql_starter_clone.png" alt="codeql_starter_clone"></li><li>使用CodeQL扩展<ol><li>在Github中选择一个项目，以Apache Kafka为例。在vscode控制面板输入codeql，选择CodeQL: Download Database from GitHub command<br><img src="/../img/syzkaller+codeql/codeql_vscode_download_database_from_github.png" alt="codeql_vscode_download_database_from_github"></li><li>输入kafka的github地址<br><img src="/../img/syzkaller+codeql/codeql_vscode_kafka.png" alt="codeql_vscode_kafka"></li><li>选择一种要下载的语言，这里选择了java.<br><img src="/../img/syzkaller+codeql/codeql_vscode_kafka_java.png" alt="codeql_vscode_kafka_java"><br>但是下载一直失败，没找出原因;<br><img src="/../img/syzkaller+codeql/codeql_vscode_failure.png" alt="codeql_vscode_failure"></li><li>我直接输入github&#x2F;codeql，然后选择java，竟然成功了。然后用前面的clone的vscode_codeql_starter里面的查询文件，选择code-custom-queries-java目录下的 example.pl运行，得到以下结果：<br><img src="/../img/syzkaller+codeql/codeql_example.query.png" alt="codeql_example.query"></li></ol></li></ol><h2 id="4-实验结果分析"><a href="#4-实验结果分析" class="headerlink" title="4. 实验结果分析"></a>4. 实验结果分析</h2><ol><li>关于syzkaller实验，我针对特定内核用现在的syzkaller没有跑出需要的结果，那使用syz程序和C程序进入内核去复现crashes就做不到了。本来想找一个近期的cve跑的，但是syzboot上的很多东西都看不懂(官方确实有详细的syzboot介绍，但是找起来很麻烦，理解也有困难)。网上的博客写的是代码分析，不能直接借鉴。因此，实验就这样没办法做了。</li><li>关于CodeQL实验，我看了一些cve复现的博客，但是基本都是跳跃式的，操作步骤都默认读者很熟悉CodeQL，讲的都是一些关键的点，以代码分析为主，我根本不知道每一步具体是怎么做的，没办法复现。除非对codeql很熟悉，否则根本不能用codeql去复现cve，我花的时间确实少，没办法做到复现cve。</li></ol>]]></content>
    
    
    <categories>
      
      <category>实验报告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验报告</tag>
      
      <tag>syzkaller</tag>
      
      <tag>codeql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test Post</title>
    <link href="/2024/09/17/Test-Post/"/>
    <url>/2024/09/17/Test-Post/</url>
    
    <content type="html"><![CDATA[<p>这是一个摘要</p><span id="more"></span><p>这是正文这是正文</p><h1 id="tag插件测试"><a href="#tag插件测试" class="headerlink" title="tag插件测试"></a>tag插件测试</h1><h2 id="便签测试"><a href="#便签测试" class="headerlink" title="便签测试"></a>便签测试</h2><div class="note note-success">            <p>这是success便签这是success便签</p>          </div><h2 id="标签测试"><a href="#标签测试" class="headerlink" title="标签测试"></a>标签测试</h2><span class="label label-success">这是success标签</span><h2 id="折叠块测试"><a href="#折叠块测试" class="headerlink" title="折叠块测试"></a>折叠块测试</h2>    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-415c7093" role="button" aria-expanded="false" aria-controls="collapse-415c7093">        <div class="fold-arrow">▶</div>success折叠块的标题      </div>      <div class="fold-collapse collapse" id="collapse-415c7093">        <div class="fold-content">          <p>这是success折叠块的折叠的内容</p>        </div>      </div>    </div><h2 id="勾选框测试"><a href="#勾选框测试" class="headerlink" title="勾选框测试"></a>勾选框测试</h2><div>            <input type="checkbox"  checked="checked">这是一个勾了的框          </div><div>            <input type="checkbox"  >这是一个没勾的框          </div><h2 id="按钮测试"><a href="#按钮测试" class="headerlink" title="按钮测试"></a>按钮测试</h2><a class="btn" href="about:blank"  target="_blank">这是一个按钮</a><h2 id="组图测试"><a href="#组图测试" class="headerlink" title="组图测试"></a>组图测试</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/fluid.png"></div><div class="group-image-wrap"><img src="/img/fluid.png"></div><div class="group-image-wrap"><img src="/img/fluid.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/img/fluid.png"></div><div class="group-image-wrap"><img src="/img/fluid.png"></div></div></div><h1 id="数学公式测试"><a href="#数学公式测试" class="headerlink" title="数学公式测试"></a>数学公式测试</h1><p>$$<br>\begin{array}{l}<br>    \nabla \cdot \mathbf{E} &#x3D;\cfrac{\rho}{\varepsilon _0}  \\<br>    \nabla \cdot \mathbf{B} &#x3D; 0 \\<br>    \nabla \times  \mathbf{E} &#x3D; -\cfrac{\partial \mathbf{B}}{\partial t }  \\<br>    \nabla \times  \mathbf{B} &#x3D; \mu _0\mathbf{J} + \mu _0\varepsilon_0 \cfrac{\partial \mathbf{E}}{\partial t }<br>\end{array}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Test</tag>
      
      <tag>demo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
